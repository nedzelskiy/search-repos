/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The query root of GitHub's GraphQL interface.
 */
export interface GQLQuery {
  
  /**
   * Look up a code of conduct by its key
   */
  codeOfConduct?: GQLCodeOfConduct;
  
  /**
   * Look up a code of conduct by its key
   */
  codesOfConduct?: Array<GQLCodeOfConduct | null>;
  
  /**
   * Look up an enterprise by URL slug.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
   */
  enterpriseAdministratorInvitation?: GQLEnterpriseAdministratorInvitation;
  
  /**
   * Look up a pending enterprise administrator invitation by invitation token.
   */
  enterpriseAdministratorInvitationByToken?: GQLEnterpriseAdministratorInvitation;
  
  /**
   * Look up an open source license by its key
   */
  license?: GQLLicense;
  
  /**
   * Return a list of known open source licenses
   */
  licenses: Array<GQLLicense | null>;
  
  /**
   * Get alphabetically sorted list of Marketplace categories
   */
  marketplaceCategories: Array<GQLMarketplaceCategory>;
  
  /**
   * Look up a Marketplace category by its slug.
   */
  marketplaceCategory?: GQLMarketplaceCategory;
  
  /**
   * Look up a single Marketplace listing
   */
  marketplaceListing?: GQLMarketplaceListing;
  
  /**
   * Look up Marketplace listings
   */
  marketplaceListings: GQLMarketplaceListingConnection;
  
  /**
   * Return information about the GitHub instance
   */
  meta: GQLGitHubMetadata;
  
  /**
   * Fetches an object given its ID.
   */
  node?: GQLNode;
  
  /**
   * Lookup nodes by a list of IDs.
   */
  nodes: Array<GQLNode | null>;
  
  /**
   * Lookup a organization by login.
   */
  organization?: GQLOrganization;
  
  /**
   * The client's rate limit information.
   */
  rateLimit?: GQLRateLimit;
  
  /**
   * Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
   */
  relay: GQLQuery;
  
  /**
   * Lookup a given repository by the owner and repository name.
   */
  repository?: GQLRepository;
  
  /**
   * Lookup a repository owner (ie. either a User or an Organization) by login.
   */
  repositoryOwner?: GQLRepositoryOwner;
  
  /**
   * Lookup resource by a URL.
   */
  resource?: GQLUniformResourceLocatable;
  
  /**
   * Perform a search across resources.
   */
  search: GQLSearchResultItemConnection;
  
  /**
   * GitHub Security Advisories
   */
  securityAdvisories: GQLSecurityAdvisoryConnection;
  
  /**
   * Fetch a Security Advisory by its GHSA ID
   */
  securityAdvisory?: GQLSecurityAdvisory;
  
  /**
   * Software Vulnerabilities documented by GitHub Security Advisories
   */
  securityVulnerabilities: GQLSecurityVulnerabilityConnection;
  
  /**
   * Look up a single Sponsors Listing
   * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
   */
  sponsorsListing?: GQLSponsorsListing;
  
  /**
   * Look up a topic by name.
   */
  topic?: GQLTopic;
  
  /**
   * Lookup a user by login.
   */
  user?: GQLUser;
  
  /**
   * The currently authenticated user.
   */
  viewer: GQLUser;
}

/**
 * The Code of Conduct for a repository
 */
export interface GQLCodeOfConduct extends GQLNode {
  
  /**
   * The body of the Code of Conduct
   */
  body?: string;
  id: string;
  
  /**
   * The key for the Code of Conduct
   */
  key: string;
  
  /**
   * The formal name of the Code of Conduct
   */
  name: string;
  
  /**
   * The HTTP path for this Code of Conduct
   */
  resourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this Code of Conduct
   */
  url?: GQLURI;
}

/**
 * An object with an ID.
 */
export interface GQLNode {
  
  /**
   * ID of the object.
   */
  id: string;
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
'CodeOfConduct' |
'Enterprise' |
'EnterpriseUserAccount' |
'Organization' |
'UserStatus' |
'User' |
'Package' |
'PackageVersion' |
'PackageFile' |
'Release' |
'ReleaseAsset' |
'Ref' |
'PullRequest' |
'UserContentEdit' |
'Label' |
'Issue' |
'Reaction' |
'Repository' |
'Project' |
'ProjectColumn' |
'ProjectCard' |
'License' |
'BranchProtectionRule' |
'PushAllowance' |
'App' |
'Team' |
'TeamDiscussion' |
'TeamDiscussionComment' |
'OrganizationInvitation' |
'ReviewDismissalAllowance' |
'CommitComment' |
'Commit' |
'Deployment' |
'DeploymentStatus' |
'Status' |
'StatusContext' |
'StatusCheckRollup' |
'Tree' |
'DeployKey' |
'Language' |
'Milestone' |
'RepositoryTopic' |
'Topic' |
'RepositoryVulnerabilityAlert' |
'SecurityAdvisory' |
'IssueComment' |
'AssignedEvent' |
'Bot' |
'Mannequin' |
'ClosedEvent' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'LabeledEvent' |
'LockedEvent' |
'MilestonedEvent' |
'ReferencedEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent' |
'UserBlockedEvent' |
'AddedToProjectEvent' |
'CommentDeletedEvent' |
'ConnectedEvent' |
'ConvertedNoteToIssueEvent' |
'DisconnectedEvent' |
'MarkedAsDuplicateEvent' |
'MentionedEvent' |
'MovedColumnsInProjectEvent' |
'PinnedEvent' |
'RemovedFromProjectEvent' |
'UnmarkedAsDuplicateEvent' |
'UnpinnedEvent' |
'PullRequestCommit' |
'ReviewRequest' |
'PullRequestReviewThread' |
'PullRequestReviewComment' |
'PullRequestReview' |
'BaseRefForcePushedEvent' |
'CommitCommentThread' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'MergedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewRequestedEvent' |
'AutomaticBaseChangeFailedEvent' |
'AutomaticBaseChangeSucceededEvent' |
'BaseRefChangedEvent' |
'ConvertToDraftEvent' |
'PullRequestCommitCommentThread' |
'ReadyForReviewEvent' |
'Gist' |
'GistComment' |
'SponsorsListing' |
'SponsorsTier' |
'Sponsorship' |
'PublicKey' |
'SavedReply' |
'MembersCanDeleteReposClearAuditEntry' |
'MembersCanDeleteReposDisableAuditEntry' |
'MembersCanDeleteReposEnableAuditEntry' |
'OauthApplicationCreateAuditEntry' |
'OrgAddBillingManagerAuditEntry' |
'OrgAddMemberAuditEntry' |
'OrgBlockUserAuditEntry' |
'OrgConfigDisableCollaboratorsOnlyAuditEntry' |
'OrgConfigEnableCollaboratorsOnlyAuditEntry' |
'OrgCreateAuditEntry' |
'OrgDisableOauthAppRestrictionsAuditEntry' |
'OrgDisableSamlAuditEntry' |
'OrgDisableTwoFactorRequirementAuditEntry' |
'OrgEnableOauthAppRestrictionsAuditEntry' |
'OrgEnableSamlAuditEntry' |
'OrgEnableTwoFactorRequirementAuditEntry' |
'OrgInviteMemberAuditEntry' |
'OrgInviteToBusinessAuditEntry' |
'OrgOauthAppAccessApprovedAuditEntry' |
'OrgOauthAppAccessDeniedAuditEntry' |
'OrgOauthAppAccessRequestedAuditEntry' |
'OrgRemoveBillingManagerAuditEntry' |
'OrgRemoveMemberAuditEntry' |
'OrgRemoveOutsideCollaboratorAuditEntry' |
'OrgRestoreMemberAuditEntry' |
'OrgUnblockUserAuditEntry' |
'OrgUpdateDefaultRepositoryPermissionAuditEntry' |
'OrgUpdateMemberAuditEntry' |
'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' |
'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' |
'PrivateRepositoryForkingDisableAuditEntry' |
'PrivateRepositoryForkingEnableAuditEntry' |
'RepoAccessAuditEntry' |
'RepoAddMemberAuditEntry' |
'RepoAddTopicAuditEntry' |
'RepoArchivedAuditEntry' |
'RepoChangeMergeSettingAuditEntry' |
'RepoConfigDisableAnonymousGitAccessAuditEntry' |
'RepoConfigDisableCollaboratorsOnlyAuditEntry' |
'RepoConfigDisableContributorsOnlyAuditEntry' |
'RepoConfigDisableSockpuppetDisallowedAuditEntry' |
'RepoConfigEnableAnonymousGitAccessAuditEntry' |
'RepoConfigEnableCollaboratorsOnlyAuditEntry' |
'RepoConfigEnableContributorsOnlyAuditEntry' |
'RepoConfigEnableSockpuppetDisallowedAuditEntry' |
'RepoConfigLockAnonymousGitAccessAuditEntry' |
'RepoConfigUnlockAnonymousGitAccessAuditEntry' |
'RepoCreateAuditEntry' |
'RepoDestroyAuditEntry' |
'RepoRemoveMemberAuditEntry' |
'RepoRemoveTopicAuditEntry' |
'RepositoryVisibilityChangeDisableAuditEntry' |
'RepositoryVisibilityChangeEnableAuditEntry' |
'TeamAddMemberAuditEntry' |
'TeamAddRepositoryAuditEntry' |
'TeamChangeParentTeamAuditEntry' |
'TeamRemoveMemberAuditEntry' |
'TeamRemoveRepositoryAuditEntry' |
'IpAllowListEntry' |
'OrganizationIdentityProvider' |
'ExternalIdentity' |
'EnterpriseServerInstallation' |
'EnterpriseServerUserAccount' |
'EnterpriseServerUserAccountEmail' |
'EnterpriseServerUserAccountsUpload' |
'EnterpriseRepositoryInfo' |
'EnterpriseAdministratorInvitation' |
'RepositoryInvitation' |
'EnterpriseIdentityProvider' |
'MarketplaceCategory' |
'MarketplaceListing' |
'Blob' |
'PackageTag' |
'Tag';

export interface GQLNodeNameMap {
  Node: GQLNode;
  CodeOfConduct: GQLCodeOfConduct;
  Enterprise: GQLEnterprise;
  EnterpriseUserAccount: GQLEnterpriseUserAccount;
  Organization: GQLOrganization;
  UserStatus: GQLUserStatus;
  User: GQLUser;
  Package: GQLPackage;
  PackageVersion: GQLPackageVersion;
  PackageFile: GQLPackageFile;
  Release: GQLRelease;
  ReleaseAsset: GQLReleaseAsset;
  Ref: GQLRef;
  PullRequest: GQLPullRequest;
  UserContentEdit: GQLUserContentEdit;
  Label: GQLLabel;
  Issue: GQLIssue;
  Reaction: GQLReaction;
  Repository: GQLRepository;
  Project: GQLProject;
  ProjectColumn: GQLProjectColumn;
  ProjectCard: GQLProjectCard;
  License: GQLLicense;
  BranchProtectionRule: GQLBranchProtectionRule;
  PushAllowance: GQLPushAllowance;
  App: GQLApp;
  Team: GQLTeam;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  OrganizationInvitation: GQLOrganizationInvitation;
  ReviewDismissalAllowance: GQLReviewDismissalAllowance;
  CommitComment: GQLCommitComment;
  Commit: GQLCommit;
  Deployment: GQLDeployment;
  DeploymentStatus: GQLDeploymentStatus;
  Status: GQLStatus;
  StatusContext: GQLStatusContext;
  StatusCheckRollup: GQLStatusCheckRollup;
  Tree: GQLTree;
  DeployKey: GQLDeployKey;
  Language: GQLLanguage;
  Milestone: GQLMilestone;
  RepositoryTopic: GQLRepositoryTopic;
  Topic: GQLTopic;
  RepositoryVulnerabilityAlert: GQLRepositoryVulnerabilityAlert;
  SecurityAdvisory: GQLSecurityAdvisory;
  IssueComment: GQLIssueComment;
  AssignedEvent: GQLAssignedEvent;
  Bot: GQLBot;
  Mannequin: GQLMannequin;
  ClosedEvent: GQLClosedEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  ReferencedEvent: GQLReferencedEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
  UserBlockedEvent: GQLUserBlockedEvent;
  AddedToProjectEvent: GQLAddedToProjectEvent;
  CommentDeletedEvent: GQLCommentDeletedEvent;
  ConnectedEvent: GQLConnectedEvent;
  ConvertedNoteToIssueEvent: GQLConvertedNoteToIssueEvent;
  DisconnectedEvent: GQLDisconnectedEvent;
  MarkedAsDuplicateEvent: GQLMarkedAsDuplicateEvent;
  MentionedEvent: GQLMentionedEvent;
  MovedColumnsInProjectEvent: GQLMovedColumnsInProjectEvent;
  PinnedEvent: GQLPinnedEvent;
  RemovedFromProjectEvent: GQLRemovedFromProjectEvent;
  UnmarkedAsDuplicateEvent: GQLUnmarkedAsDuplicateEvent;
  UnpinnedEvent: GQLUnpinnedEvent;
  PullRequestCommit: GQLPullRequestCommit;
  ReviewRequest: GQLReviewRequest;
  PullRequestReviewThread: GQLPullRequestReviewThread;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
  BaseRefForcePushedEvent: GQLBaseRefForcePushedEvent;
  CommitCommentThread: GQLCommitCommentThread;
  DeployedEvent: GQLDeployedEvent;
  DeploymentEnvironmentChangedEvent: GQLDeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: GQLHeadRefDeletedEvent;
  HeadRefForcePushedEvent: GQLHeadRefForcePushedEvent;
  HeadRefRestoredEvent: GQLHeadRefRestoredEvent;
  MergedEvent: GQLMergedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ReviewRequestRemovedEvent: GQLReviewRequestRemovedEvent;
  ReviewRequestedEvent: GQLReviewRequestedEvent;
  AutomaticBaseChangeFailedEvent: GQLAutomaticBaseChangeFailedEvent;
  AutomaticBaseChangeSucceededEvent: GQLAutomaticBaseChangeSucceededEvent;
  BaseRefChangedEvent: GQLBaseRefChangedEvent;
  ConvertToDraftEvent: GQLConvertToDraftEvent;
  PullRequestCommitCommentThread: GQLPullRequestCommitCommentThread;
  ReadyForReviewEvent: GQLReadyForReviewEvent;
  Gist: GQLGist;
  GistComment: GQLGistComment;
  SponsorsListing: GQLSponsorsListing;
  SponsorsTier: GQLSponsorsTier;
  Sponsorship: GQLSponsorship;
  PublicKey: GQLPublicKey;
  SavedReply: GQLSavedReply;
  MembersCanDeleteReposClearAuditEntry: GQLMembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry: GQLMembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry: GQLMembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry: GQLOauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry: GQLOrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry: GQLOrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry: GQLOrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry: GQLOrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry: GQLOrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry: GQLOrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry: GQLOrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry: GQLOrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry: GQLOrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry: GQLOrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry: GQLOrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry: GQLOrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry: GQLOrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry: GQLOrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry: GQLOrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry: GQLOrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry: GQLOrgOauthAppAccessRequestedAuditEntry;
  OrgRemoveBillingManagerAuditEntry: GQLOrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry: GQLOrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry: GQLOrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry: GQLOrgRestoreMemberAuditEntry;
  OrgUnblockUserAuditEntry: GQLOrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry: GQLOrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry: GQLOrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry: GQLPrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry: GQLPrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry: GQLRepoAccessAuditEntry;
  RepoAddMemberAuditEntry: GQLRepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry: GQLRepoAddTopicAuditEntry;
  RepoArchivedAuditEntry: GQLRepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry: GQLRepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry: GQLRepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry: GQLRepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry: GQLRepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry: GQLRepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry: GQLRepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry: GQLRepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry: GQLRepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry: GQLRepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry: GQLRepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry: GQLRepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry: GQLRepoCreateAuditEntry;
  RepoDestroyAuditEntry: GQLRepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry: GQLRepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry: GQLRepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry: GQLRepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry: GQLRepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry: GQLTeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry: GQLTeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry: GQLTeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry: GQLTeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry: GQLTeamRemoveRepositoryAuditEntry;
  IpAllowListEntry: GQLIpAllowListEntry;
  OrganizationIdentityProvider: GQLOrganizationIdentityProvider;
  ExternalIdentity: GQLExternalIdentity;
  EnterpriseServerInstallation: GQLEnterpriseServerInstallation;
  EnterpriseServerUserAccount: GQLEnterpriseServerUserAccount;
  EnterpriseServerUserAccountEmail: GQLEnterpriseServerUserAccountEmail;
  EnterpriseServerUserAccountsUpload: GQLEnterpriseServerUserAccountsUpload;
  EnterpriseRepositoryInfo: GQLEnterpriseRepositoryInfo;
  EnterpriseAdministratorInvitation: GQLEnterpriseAdministratorInvitation;
  RepositoryInvitation: GQLRepositoryInvitation;
  EnterpriseIdentityProvider: GQLEnterpriseIdentityProvider;
  MarketplaceCategory: GQLMarketplaceCategory;
  MarketplaceListing: GQLMarketplaceListing;
  Blob: GQLBlob;
  PackageTag: GQLPackageTag;
  Tag: GQLTag;
}

/**
 * An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
 */
export type GQLURI = any;

/**
 * An account to manage multiple organizations with consolidated policy and billing.
 */
export interface GQLEnterprise extends GQLNode {
  
  /**
   * A URL pointing to the enterprise's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * Enterprise billing information visible to enterprise billing managers.
   */
  billingInfo?: GQLEnterpriseBillingInfo;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The description of the enterprise.
   */
  description?: string;
  
  /**
   * The description of the enterprise as HTML.
   */
  descriptionHTML: GQLHTML;
  id: string;
  
  /**
   * The location of the enterprise.
   */
  location?: string;
  
  /**
   * A list of users who are members of this enterprise.
   */
  members: GQLEnterpriseMemberConnection;
  
  /**
   * The name of the enterprise.
   */
  name: string;
  
  /**
   * A list of organizations that belong to this enterprise.
   */
  organizations: GQLOrganizationConnection;
  
  /**
   * Enterprise information only visible to enterprise owners.
   */
  ownerInfo?: GQLEnterpriseOwnerInfo;
  
  /**
   * The HTTP path for this enterprise.
   */
  resourcePath: GQLURI;
  
  /**
   * The URL-friendly identifier for the enterprise.
   */
  slug: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  url: GQLURI;
  
  /**
   * A list of user accounts on this enterprise.
   */
  userAccounts: GQLEnterpriseUserAccountConnection;
  
  /**
   * Is the current viewer an admin of this enterprise?
   */
  viewerIsAdmin: boolean;
  
  /**
   * The URL of the enterprise website.
   */
  websiteUrl?: GQLURI;
}

/**
 * Enterprise billing information visible to enterprise billing managers and owners.
 */
export interface GQLEnterpriseBillingInfo {
  
  /**
   * The number of licenseable users/emails across the enterprise.
   */
  allLicensableUsersCount: number;
  
  /**
   * The number of data packs used by all organizations owned by the enterprise.
   */
  assetPacks: number;
  
  /**
   * The number of available seats across all owned organizations based on the unique number of billable users.
   * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
   */
  availableSeats: number;
  
  /**
   * The bandwidth quota in GB for all organizations owned by the enterprise.
   */
  bandwidthQuota: number;
  
  /**
   * The bandwidth usage in GB for all organizations owned by the enterprise.
   */
  bandwidthUsage: number;
  
  /**
   * The bandwidth usage as a percentage of the bandwidth quota.
   */
  bandwidthUsagePercentage: number;
  
  /**
   * The total seats across all organizations owned by the enterprise.
   * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
   */
  seats: number;
  
  /**
   * The storage quota in GB for all organizations owned by the enterprise.
   */
  storageQuota: number;
  
  /**
   * The storage usage in GB for all organizations owned by the enterprise.
   */
  storageUsage: number;
  
  /**
   * The storage usage as a percentage of the storage quota.
   */
  storageUsagePercentage: number;
  
  /**
   * The number of available licenses across all owned organizations based on the unique number of billable users.
   */
  totalAvailableLicenses: number;
  
  /**
   * The total number of licenses allocated.
   */
  totalLicenses: number;
}

/**
 * An ISO-8601 encoded UTC date string.
 */
export type GQLDateTime = any;

/**
 * A string containing HTML code.
 */
export type GQLHTML = any;

/**
 * The possible GitHub Enterprise deployments where this user can exist.
 */
export enum GQLEnterpriseUserDeployment {
  
  /**
   * The user is part of a GitHub Enterprise Cloud deployment.
   */
  CLOUD = 'CLOUD',
  
  /**
   * The user is part of a GitHub Enterprise Server deployment.
   */
  SERVER = 'SERVER'
}

/**
 * Ordering options for enterprise member connections.
 */
export interface GQLEnterpriseMemberOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order enterprise members by.
   */
  field: GQLEnterpriseMemberOrderField;
}

/**
 * Possible directions in which to order a list of items when provided an `orderBy` argument.
 */
export enum GQLOrderDirection {
  
  /**
   * Specifies an ascending order for a given `orderBy` argument.
   */
  ASC = 'ASC',
  
  /**
   * Specifies a descending order for a given `orderBy` argument.
   */
  DESC = 'DESC'
}

/**
 * Properties by which enterprise member connections can be ordered.
 */
export enum GQLEnterpriseMemberOrderField {
  
  /**
   * Order enterprise members by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order enterprise members by login
   */
  LOGIN = 'LOGIN'
}

/**
 * The possible roles for enterprise membership.
 */
export enum GQLEnterpriseUserAccountMembershipRole {
  
  /**
   * The user is a member of the enterprise membership.
   */
  MEMBER = 'MEMBER',
  
  /**
   * The user is an owner of the enterprise membership.
   */
  OWNER = 'OWNER'
}

/**
 * The connection type for EnterpriseMember.
 */
export interface GQLEnterpriseMemberConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseMemberEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseMember | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is a member of an enterprise through one or more organizations.
 */
export interface GQLEnterpriseMemberEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * Whether the user does not have a license for the enterprise.
   * @deprecated All members consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: boolean;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseMember;
}

/**
 * An object that is a member of an enterprise.
 */
export type GQLEnterpriseMember = GQLEnterpriseUserAccount | GQLUser;

/** Use this to resolve union type EnterpriseMember */
export type GQLPossibleEnterpriseMemberTypeNames =
'EnterpriseUserAccount' |
'User';

export interface GQLEnterpriseMemberNameMap {
  EnterpriseMember: GQLEnterpriseMember;
  EnterpriseUserAccount: GQLEnterpriseUserAccount;
  User: GQLUser;
}

/**
 * An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
 */
export interface GQLEnterpriseUserAccount extends GQLActor, GQLNode {
  
  /**
   * A URL pointing to the enterprise user account's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The enterprise in which this user account exists.
   */
  enterprise: GQLEnterprise;
  id: string;
  
  /**
   * An identifier for the enterprise user account, a login or email address
   */
  login: string;
  
  /**
   * The name of the enterprise user account
   */
  name?: string;
  
  /**
   * A list of enterprise organizations this user is a member of.
   */
  organizations: GQLEnterpriseOrganizationMembershipConnection;
  
  /**
   * The HTTP path for this user.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this user.
   */
  url: GQLURI;
  
  /**
   * The user within the enterprise.
   */
  user?: GQLUser;
}

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export interface GQLActor {
  
  /**
   * A URL pointing to the actor's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * The username of the actor.
   */
  login: string;
  
  /**
   * The HTTP path for this actor.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this actor.
   */
  url: GQLURI;
}

/** Use this to resolve interface type Actor */
export type GQLPossibleActorTypeNames =
'EnterpriseUserAccount' |
'Organization' |
'User' |
'Bot' |
'Mannequin';

export interface GQLActorNameMap {
  Actor: GQLActor;
  EnterpriseUserAccount: GQLEnterpriseUserAccount;
  Organization: GQLOrganization;
  User: GQLUser;
  Bot: GQLBot;
  Mannequin: GQLMannequin;
}

/**
 * Ordering options for organization connections.
 */
export interface GQLOrganizationOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order organizations by.
   */
  field: GQLOrganizationOrderField;
}

/**
 * Properties by which organization connections can be ordered.
 */
export enum GQLOrganizationOrderField {
  
  /**
   * Order organizations by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order organizations by login
   */
  LOGIN = 'LOGIN'
}

/**
 * The connection type for Organization.
 */
export interface GQLEnterpriseOrganizationMembershipConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseOrganizationMembershipEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLOrganization | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An enterprise organization that a user is a member of.
 */
export interface GQLEnterpriseOrganizationMembershipEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLOrganization;
  
  /**
   * The role of the user in the enterprise membership.
   */
  role: GQLEnterpriseUserAccountMembershipRole;
}

/**
 * An account on GitHub, with one or more owners, that has repositories, members and teams.
 */
export interface GQLOrganization extends GQLActor, GQLMemberStatusable, GQLNode, GQLPackageOwner, GQLProfileOwner, GQLProjectOwner, GQLRepositoryOwner, GQLSponsorable, GQLUniformResourceLocatable {
  
  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;
  
  /**
   * Audit log entries of the organization
   */
  auditLog: GQLOrganizationAuditEntryConnection;
  
  /**
   * A URL pointing to the organization's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The organization's public profile description.
   */
  description?: string;
  
  /**
   * The organization's public profile description rendered to HTML.
   */
  descriptionHTML?: string;
  
  /**
   * The organization's public email.
   */
  email?: string;
  id: string;
  
  /**
   * The setting value for whether the organization has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: GQLIpAllowListEnabledSettingValue;
  
  /**
   * The IP addresses that are allowed to access resources owned by the organization.
   */
  ipAllowListEntries: GQLIpAllowListEntryConnection;
  
  /**
   * Whether the organization has verified its profile email and website.
   */
  isVerified: boolean;
  
  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: GQLProfileItemShowcase;
  
  /**
   * The organization's public profile location.
   */
  location?: string;
  
  /**
   * The organization's login name.
   */
  login: string;
  
  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: GQLUserStatusConnection;
  
  /**
   * A list of users who are members of this organization.
   */
  membersWithRole: GQLOrganizationMemberConnection;
  
  /**
   * The organization's public profile name.
   */
  name?: string;
  
  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: GQLURI;
  
  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: GQLURI;
  
  /**
   * The billing email for the organization.
   */
  organizationBillingEmail?: string;
  
  /**
   * A list of packages under the owner.
   */
  packages: GQLPackageConnection;
  
  /**
   * A list of users who have been invited to join this organization.
   */
  pendingMembers: GQLUserConnection;
  
  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: GQLPinnableItemConnection;
  
  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: GQLPinnableItemConnection;
  
  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;
  
  /**
   * Find project by number.
   */
  project?: GQLProject;
  
  /**
   * A list of projects under the owner.
   */
  projects: GQLProjectConnection;
  
  /**
   * The HTTP path listing organization's projects
   */
  projectsResourcePath: GQLURI;
  
  /**
   * The HTTP URL listing organization's projects
   */
  projectsUrl: GQLURI;
  
  /**
   * A list of repositories that the user owns.
   */
  repositories: GQLRepositoryConnection;
  
  /**
   * Find Repository.
   */
  repository?: GQLRepository;
  
  /**
   * When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
   */
  requiresTwoFactorAuthentication?: boolean;
  
  /**
   * The HTTP path for this organization.
   */
  resourcePath: GQLURI;
  
  /**
   * The Organization's SAML identity providers
   */
  samlIdentityProvider?: GQLOrganizationIdentityProvider;
  
  /**
   * The GitHub Sponsors listing for this user.
   */
  sponsorsListing?: GQLSponsorsListing;
  
  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: GQLSponsorshipConnection;
  
  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: GQLSponsorshipConnection;
  
  /**
   * Find an organization's team by its slug.
   */
  team?: GQLTeam;
  
  /**
   * A list of teams in this organization.
   */
  teams: GQLTeamConnection;
  
  /**
   * The HTTP path listing organization's teams
   */
  teamsResourcePath: GQLURI;
  
  /**
   * The HTTP URL listing organization's teams
   */
  teamsUrl: GQLURI;
  
  /**
   * The organization's Twitter username.
   */
  twitterUsername?: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this organization.
   */
  url: GQLURI;
  
  /**
   * Organization is adminable by the viewer.
   */
  viewerCanAdminister: boolean;
  
  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
  
  /**
   * Viewer can create repositories on this organization
   */
  viewerCanCreateRepositories: boolean;
  
  /**
   * Viewer can create teams on this organization.
   */
  viewerCanCreateTeams: boolean;
  
  /**
   * Viewer is an active member of this organization.
   */
  viewerIsAMember: boolean;
  
  /**
   * The organization's public profile URL.
   */
  websiteUrl?: GQLURI;
}

/**
 * Entities that have members who can set status messages.
 */
export interface GQLMemberStatusable {
  
  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: GQLUserStatusConnection;
}

/** Use this to resolve interface type MemberStatusable */
export type GQLPossibleMemberStatusableTypeNames = 'Organization' | 'Team';

export interface GQLMemberStatusableNameMap {
  MemberStatusable: GQLMemberStatusable;
  Organization: GQLOrganization;
  Team: GQLTeam;
}

/**
 * Ordering options for user status connections.
 */
export interface GQLUserStatusOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order user statuses by.
   */
  field: GQLUserStatusOrderField;
}

/**
 * Properties by which user status connections can be ordered.
 */
export enum GQLUserStatusOrderField {
  
  /**
   * Order user statuses by when they were updated.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for UserStatus.
 */
export interface GQLUserStatusConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLUserStatusEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUserStatus | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLUserStatusEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUserStatus;
}

/**
 * The user's description of what they're currently doing.
 */
export interface GQLUserStatus extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * An emoji summarizing the user's status.
   */
  emoji?: string;
  
  /**
   * The status emoji as HTML.
   */
  emojiHTML?: GQLHTML;
  
  /**
   * If set, the status will not be shown after this date.
   */
  expiresAt?: GQLDateTime;
  
  /**
   * ID of the object.
   */
  id: string;
  
  /**
   * Whether this status indicates the user is not fully available on GitHub.
   */
  indicatesLimitedAvailability: boolean;
  
  /**
   * A brief message describing what the user is doing.
   */
  message?: string;
  
  /**
   * The organization whose members can see this status. If null, this status is publicly visible.
   */
  organization?: GQLOrganization;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The user who has this status.
   */
  user: GQLUser;
}

/**
 * A user is an individual's account on GitHub that owns repositories and can make new content.
 */
export interface GQLUser extends GQLActor, GQLNode, GQLPackageOwner, GQLProfileOwner, GQLProjectOwner, GQLRepositoryOwner, GQLSponsorable, GQLUniformResourceLocatable {
  
  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;
  
  /**
   * A URL pointing to the user's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * The user's public profile bio.
   */
  bio?: string;
  
  /**
   * The user's public profile bio as HTML.
   */
  bioHTML: GQLHTML;
  
  /**
   * A list of commit comments made by this user.
   */
  commitComments: GQLCommitCommentConnection;
  
  /**
   * The user's public profile company.
   */
  company?: string;
  
  /**
   * The user's public profile company as HTML.
   */
  companyHTML: GQLHTML;
  
  /**
   * The collection of contributions this user has made to different repositories.
   */
  contributionsCollection: GQLContributionsCollection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The user's publicly visible profile email.
   */
  email: string;
  
  /**
   * A list of users the given user is followed by.
   */
  followers: GQLFollowerConnection;
  
  /**
   * A list of users the given user is following.
   */
  following: GQLFollowingConnection;
  
  /**
   * Find gist by repo name.
   */
  gist?: GQLGist;
  
  /**
   * A list of gist comments made by this user.
   */
  gistComments: GQLGistCommentConnection;
  
  /**
   * A list of the Gists the user has created.
   */
  gists: GQLGistConnection;
  
  /**
   * The hovercard information for this user in a given context
   */
  hovercard: GQLHovercard;
  id: string;
  
  /**
   * Whether or not this user is a participant in the GitHub Security Bug Bounty.
   */
  isBountyHunter: boolean;
  
  /**
   * Whether or not this user is a participant in the GitHub Campus Experts Program.
   */
  isCampusExpert: boolean;
  
  /**
   * Whether or not this user is a GitHub Developer Program member.
   */
  isDeveloperProgramMember: boolean;
  
  /**
   * Whether or not this user is a GitHub employee.
   */
  isEmployee: boolean;
  
  /**
   * Whether or not the user has marked themselves as for hire.
   */
  isHireable: boolean;
  
  /**
   * Whether or not this user is a site administrator.
   */
  isSiteAdmin: boolean;
  
  /**
   * Whether or not this user is the viewing user.
   */
  isViewer: boolean;
  
  /**
   * A list of issue comments made by this user.
   */
  issueComments: GQLIssueCommentConnection;
  
  /**
   * A list of issues associated with this user.
   */
  issues: GQLIssueConnection;
  
  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: GQLProfileItemShowcase;
  
  /**
   * The user's public profile location.
   */
  location?: string;
  
  /**
   * The username used to login.
   */
  login: string;
  
  /**
   * The user's public profile name.
   */
  name?: string;
  
  /**
   * Find an organization by its login that the user belongs to.
   */
  organization?: GQLOrganization;
  
  /**
   * Verified email addresses that match verified domains for a specified organization the user is a member of.
   */
  organizationVerifiedDomainEmails: Array<string>;
  
  /**
   * A list of organizations the user belongs to.
   */
  organizations: GQLOrganizationConnection;
  
  /**
   * A list of packages under the owner.
   */
  packages: GQLPackageConnection;
  
  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: GQLPinnableItemConnection;
  
  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: GQLPinnableItemConnection;
  
  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;
  
  /**
   * Find project by number.
   */
  project?: GQLProject;
  
  /**
   * A list of projects under the owner.
   */
  projects: GQLProjectConnection;
  
  /**
   * The HTTP path listing user's projects
   */
  projectsResourcePath: GQLURI;
  
  /**
   * The HTTP URL listing user's projects
   */
  projectsUrl: GQLURI;
  
  /**
   * A list of public keys associated with this user.
   */
  publicKeys: GQLPublicKeyConnection;
  
  /**
   * A list of pull requests associated with this user.
   */
  pullRequests: GQLPullRequestConnection;
  
  /**
   * A list of repositories that the user owns.
   */
  repositories: GQLRepositoryConnection;
  
  /**
   * A list of repositories that the user recently contributed to.
   */
  repositoriesContributedTo: GQLRepositoryConnection;
  
  /**
   * Find Repository.
   */
  repository?: GQLRepository;
  
  /**
   * The HTTP path for this user
   */
  resourcePath: GQLURI;
  
  /**
   * Replies this user has saved
   */
  savedReplies?: GQLSavedReplyConnection;
  
  /**
   * The GitHub Sponsors listing for this user.
   */
  sponsorsListing?: GQLSponsorsListing;
  
  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: GQLSponsorshipConnection;
  
  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: GQLSponsorshipConnection;
  
  /**
   * Repositories the user has starred.
   */
  starredRepositories: GQLStarredRepositoryConnection;
  
  /**
   * The user's description of what they're currently doing.
   */
  status?: GQLUserStatus;
  
  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   */
  topRepositories: GQLRepositoryConnection;
  
  /**
   * The user's Twitter username.
   */
  twitterUsername?: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this user
   */
  url: GQLURI;
  
  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
  
  /**
   * Whether or not the viewer is able to follow the user.
   */
  viewerCanFollow: boolean;
  
  /**
   * Whether or not this user is followed by the viewer.
   */
  viewerIsFollowing: boolean;
  
  /**
   * A list of repositories the given user is watching.
   */
  watching: GQLRepositoryConnection;
  
  /**
   * A URL pointing to the user's public website/blog.
   */
  websiteUrl?: GQLURI;
}

/**
 * Represents an owner of a package.
 */
export interface GQLPackageOwner {
  id: string;
  
  /**
   * A list of packages under the owner.
   */
  packages: GQLPackageConnection;
}

/** Use this to resolve interface type PackageOwner */
export type GQLPossiblePackageOwnerTypeNames =
'Organization' |
'User' |
'Repository';

export interface GQLPackageOwnerNameMap {
  PackageOwner: GQLPackageOwner;
  Organization: GQLOrganization;
  User: GQLUser;
  Repository: GQLRepository;
}

/**
 * Ways in which lists of packages can be ordered upon return.
 */
export interface GQLPackageOrder {
  
  /**
   * The direction in which to order packages by the specified field.
   */
  direction?: GQLOrderDirection;
  
  /**
   * The field in which to order packages by.
   */
  field?: GQLPackageOrderField;
}

/**
 * Properties by which package connections can be ordered.
 */
export enum GQLPackageOrderField {
  
  /**
   * Order packages by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The possible types of a package.
 */
export enum GQLPackageType {
  
  /**
   * A debian package.
   */
  DEBIAN = 'DEBIAN',
  
  /**
   * A docker image.
   */
  DOCKER = 'DOCKER',
  
  /**
   * A maven package.
   */
  MAVEN = 'MAVEN',
  
  /**
   * An npm package.
   */
  NPM = 'NPM',
  
  /**
   * A nuget package.
   */
  NUGET = 'NUGET',
  
  /**
   * A python package.
   */
  PYPI = 'PYPI',
  
  /**
   * A rubygems package.
   */
  RUBYGEMS = 'RUBYGEMS'
}

/**
 * The connection type for Package.
 */
export interface GQLPackageConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPackageEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPackage | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPackageEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPackage;
}

/**
 * Information for an uploaded package.
 */
export interface GQLPackage extends GQLNode {
  id: string;
  
  /**
   * Find the latest version for the package.
   */
  latestVersion?: GQLPackageVersion;
  
  /**
   * Identifies the name of the package.
   */
  name: string;
  
  /**
   * Identifies the type of the package.
   */
  packageType: GQLPackageType;
  
  /**
   * The repository this package belongs to.
   */
  repository?: GQLRepository;
  
  /**
   * Statistics about package activity.
   */
  statistics?: GQLPackageStatistics;
  
  /**
   * Find package version by version string.
   */
  version?: GQLPackageVersion;
  
  /**
   * list of versions for this package
   */
  versions: GQLPackageVersionConnection;
}

/**
 * Information about a specific package version.
 */
export interface GQLPackageVersion extends GQLNode {
  
  /**
   * List of files associated with this package version
   */
  files: GQLPackageFileConnection;
  id: string;
  
  /**
   * The package associated with this version.
   */
  package?: GQLPackage;
  
  /**
   * The platform this version was built for.
   */
  platform?: string;
  
  /**
   * Whether or not this version is a pre-release.
   */
  preRelease: boolean;
  
  /**
   * The README of this package version.
   */
  readme?: string;
  
  /**
   * The release associated with this package version.
   */
  release?: GQLRelease;
  
  /**
   * Statistics about package activity.
   */
  statistics?: GQLPackageVersionStatistics;
  
  /**
   * The package version summary.
   */
  summary?: string;
  
  /**
   * The version string.
   */
  version: string;
}

/**
 * Ways in which lists of package files can be ordered upon return.
 */
export interface GQLPackageFileOrder {
  
  /**
   * The direction in which to order package files by the specified field.
   */
  direction?: GQLOrderDirection;
  
  /**
   * The field in which to order package files by.
   */
  field?: GQLPackageFileOrderField;
}

/**
 * Properties by which package file connections can be ordered.
 */
export enum GQLPackageFileOrderField {
  
  /**
   * Order package files by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for PackageFile.
 */
export interface GQLPackageFileConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPackageFileEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPackageFile | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPackageFileEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPackageFile;
}

/**
 * A file in a package version.
 */
export interface GQLPackageFile extends GQLNode {
  id: string;
  
  /**
   * MD5 hash of the file.
   */
  md5?: string;
  
  /**
   * Name of the file.
   */
  name: string;
  
  /**
   * The package version this file belongs to.
   */
  packageVersion?: GQLPackageVersion;
  
  /**
   * SHA1 hash of the file.
   */
  sha1?: string;
  
  /**
   * SHA256 hash of the file.
   */
  sha256?: string;
  
  /**
   * Size of the file in bytes.
   */
  size?: number;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * URL to download the asset.
   */
  url?: GQLURI;
}

/**
 * Information about pagination in a connection.
 */
export interface GQLPageInfo {
  
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor?: string;
  
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor?: string;
}

/**
 * A release contains the content for a release.
 */
export interface GQLRelease extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * The author of the release
   */
  author?: GQLUser;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The description of the release.
   */
  description?: string;
  
  /**
   * The description of this release rendered to HTML.
   */
  descriptionHTML?: GQLHTML;
  id: string;
  
  /**
   * Whether or not the release is a draft
   */
  isDraft: boolean;
  
  /**
   * Whether or not the release is a prerelease
   */
  isPrerelease: boolean;
  
  /**
   * The title of the release.
   */
  name?: string;
  
  /**
   * Identifies the date and time when the release was created.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * List of releases assets which are dependent on this release.
   */
  releaseAssets: GQLReleaseAssetConnection;
  
  /**
   * The HTTP path for this issue
   */
  resourcePath: GQLURI;
  
  /**
   * A description of the release, rendered to HTML without any links in it.
   */
  shortDescriptionHTML?: GQLHTML;
  
  /**
   * The Git tag the release points to
   */
  tag?: GQLRef;
  
  /**
   * The name of the release's Git tag
   */
  tagName: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this issue
   */
  url: GQLURI;
}

/**
 * Represents a type that can be retrieved by a URL.
 */
export interface GQLUniformResourceLocatable {
  
  /**
   * The HTML path to this resource.
   */
  resourcePath: GQLURI;
  
  /**
   * The URL to this resource.
   */
  url: GQLURI;
}

/** Use this to resolve interface type UniformResourceLocatable */
export type GQLPossibleUniformResourceLocatableTypeNames =
'Organization' |
'User' |
'Release' |
'PullRequest' |
'Issue' |
'Repository' |
'TeamDiscussion' |
'TeamDiscussionComment' |
'Commit' |
'Milestone' |
'RepositoryTopic' |
'Bot' |
'Mannequin' |
'ClosedEvent' |
'CrossReferencedEvent' |
'PullRequestCommit' |
'MergedEvent' |
'ReviewDismissedEvent' |
'ConvertToDraftEvent' |
'ReadyForReviewEvent' |
'Gist';

export interface GQLUniformResourceLocatableNameMap {
  UniformResourceLocatable: GQLUniformResourceLocatable;
  Organization: GQLOrganization;
  User: GQLUser;
  Release: GQLRelease;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  Repository: GQLRepository;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  Commit: GQLCommit;
  Milestone: GQLMilestone;
  RepositoryTopic: GQLRepositoryTopic;
  Bot: GQLBot;
  Mannequin: GQLMannequin;
  ClosedEvent: GQLClosedEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  PullRequestCommit: GQLPullRequestCommit;
  MergedEvent: GQLMergedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ConvertToDraftEvent: GQLConvertToDraftEvent;
  ReadyForReviewEvent: GQLReadyForReviewEvent;
  Gist: GQLGist;
}

/**
 * The connection type for ReleaseAsset.
 */
export interface GQLReleaseAssetConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLReleaseAssetEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLReleaseAsset | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLReleaseAssetEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLReleaseAsset;
}

/**
 * A release asset contains the content for a release asset.
 */
export interface GQLReleaseAsset extends GQLNode {
  
  /**
   * The asset's content-type
   */
  contentType: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The number of times this asset was downloaded
   */
  downloadCount: number;
  
  /**
   * Identifies the URL where you can download the release asset via the browser.
   */
  downloadUrl: GQLURI;
  id: string;
  
  /**
   * Identifies the title of the release asset.
   */
  name: string;
  
  /**
   * Release that the asset is associated with
   */
  release?: GQLRelease;
  
  /**
   * The size (in bytes) of the asset
   */
  size: number;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The user that performed the upload
   */
  uploadedBy: GQLUser;
  
  /**
   * Identifies the URL of the release asset.
   */
  url: GQLURI;
}

/**
 * Represents a Git reference.
 */
export interface GQLRef extends GQLNode {
  
  /**
   * A list of pull requests with this ref as the head ref.
   */
  associatedPullRequests: GQLPullRequestConnection;
  id: string;
  
  /**
   * The ref name.
   */
  name: string;
  
  /**
   * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
   */
  prefix: string;
  
  /**
   * The repository the ref belongs to.
   */
  repository: GQLRepository;
  
  /**
   * The object the ref points to. Returns null when object does not exist.
   */
  target?: GQLGitObject;
}

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface GQLIssueOrder {
  
  /**
   * The direction in which to order issues by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order issues by.
   */
  field: GQLIssueOrderField;
}

/**
 * Properties by which issue connections can be ordered.
 */
export enum GQLIssueOrderField {
  
  /**
   * Order issues by comment count
   */
  COMMENTS = 'COMMENTS',
  
  /**
   * Order issues by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order issues by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The possible states of a pull request.
 */
export enum GQLPullRequestState {
  
  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',
  
  /**
   * A pull request that has been closed by being merged.
   */
  MERGED = 'MERGED',
  
  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN'
}

/**
 * The connection type for PullRequest.
 */
export interface GQLPullRequestConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequest | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequest;
}

/**
 * A repository pull request.
 */
export interface GQLPullRequest extends GQLAssignable, GQLClosable, GQLComment, GQLLabelable, GQLLockable, GQLNode, GQLReactable, GQLRepositoryNode, GQLSubscribable, GQLUniformResourceLocatable, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: GQLLockReason;
  
  /**
   * The number of additions in this pull request.
   */
  additions: number;
  
  /**
   * A list of Users assigned to this object.
   */
  assignees: GQLUserConnection;
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * Identifies the base Ref associated with the pull request.
   */
  baseRef?: GQLRef;
  
  /**
   * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefName: string;
  
  /**
   * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefOid: GQLGitObjectID;
  
  /**
   * The repository associated with this pull request's base Ref.
   */
  baseRepository?: GQLRepository;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * The number of changed files in this pull request.
   */
  changedFiles: number;
  
  /**
   * The HTTP path for the checks of this pull request.
   */
  checksResourcePath: GQLURI;
  
  /**
   * The HTTP URL for the checks of this pull request.
   */
  checksUrl: GQLURI;
  
  /**
   * `true` if the pull request is closed
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: GQLDateTime;
  
  /**
   * A list of comments associated with the pull request.
   */
  comments: GQLIssueCommentConnection;
  
  /**
   * A list of commits present in this pull request's head branch not present in the base branch.
   */
  commits: GQLPullRequestCommitConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The number of deletions in this pull request.
   */
  deletions: number;
  
  /**
   * The actor who edited this pull request's body.
   */
  editor?: GQLActor;
  
  /**
   * Lists the files changed within this pull request.
   */
  files?: GQLPullRequestChangedFileConnection;
  
  /**
   * Identifies the head Ref associated with the pull request.
   */
  headRef?: GQLRef;
  
  /**
   * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
   */
  headRefName: string;
  
  /**
   * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
   */
  headRefOid: GQLGitObjectID;
  
  /**
   * The repository associated with this pull request's head Ref.
   */
  headRepository?: GQLRepository;
  
  /**
   * The owner of the repository associated with this pull request's head Ref.
   */
  headRepositoryOwner?: GQLRepositoryOwner;
  
  /**
   * The hovercard information for this issue
   */
  hovercard: GQLHovercard;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The head and base repositories are different.
   */
  isCrossRepository: boolean;
  
  /**
   * Identifies if the pull request is a draft.
   */
  isDraft: boolean;
  
  /**
   * A list of labels associated with the object.
   */
  labels?: GQLLabelConnection;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * `true` if the pull request is locked
   */
  locked: boolean;
  
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify: boolean;
  
  /**
   * The commit that was created when this pull request was merged.
   */
  mergeCommit?: GQLCommit;
  
  /**
   * Whether or not the pull request can be merged based on the existence of merge conflicts.
   */
  mergeable: GQLMergeableState;
  
  /**
   * Whether or not the pull request was merged.
   */
  merged: boolean;
  
  /**
   * The date and time that the pull request was merged.
   */
  mergedAt?: GQLDateTime;
  
  /**
   * The actor who merged the pull request.
   */
  mergedBy?: GQLActor;
  
  /**
   * Identifies the milestone associated with the pull request.
   */
  milestone?: GQLMilestone;
  
  /**
   * Identifies the pull request number.
   */
  number: number;
  
  /**
   * A list of Users that are participating in the Pull Request conversation.
   */
  participants: GQLUserConnection;
  
  /**
   * The permalink to the pull request.
   */
  permalink: GQLURI;
  
  /**
   * The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
   */
  potentialMergeCommit?: GQLCommit;
  
  /**
   * List of project cards associated with this pull request.
   */
  projectCards: GQLProjectCardConnection;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this pull request.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP path for reverting this pull request.
   */
  revertResourcePath: GQLURI;
  
  /**
   * The HTTP URL for reverting this pull request.
   */
  revertUrl: GQLURI;
  
  /**
   * The current status of this pull request with respect to code review.
   */
  reviewDecision?: GQLPullRequestReviewDecision;
  
  /**
   * A list of review requests associated with the pull request.
   */
  reviewRequests?: GQLReviewRequestConnection;
  
  /**
   * The list of all review threads for this pull request.
   */
  reviewThreads: GQLPullRequestReviewThreadConnection;
  
  /**
   * A list of reviews associated with the pull request.
   */
  reviews?: GQLPullRequestReviewConnection;
  
  /**
   * Identifies the state of the pull request.
   */
  state: GQLPullRequestState;
  
  /**
   * A list of reviewer suggestions based on commit history and past review comments.
   */
  suggestedReviewers: Array<GQLSuggestedReviewer | null>;
  
  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   */
  timeline: GQLPullRequestTimelineConnection;
  
  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timelineItems: GQLPullRequestTimelineItemsConnection;
  
  /**
   * Identifies the pull request title.
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this pull request.
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Whether or not the viewer can apply suggestion.
   */
  viewerCanApplySuggestion: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
}

/**
 * An object that can have users assigned to it.
 */
export interface GQLAssignable {
  
  /**
   * A list of Users assigned to this object.
   */
  assignees: GQLUserConnection;
}

/** Use this to resolve interface type Assignable */
export type GQLPossibleAssignableTypeNames = 'PullRequest' | 'Issue';

export interface GQLAssignableNameMap {
  Assignable: GQLAssignable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
}

/**
 * The connection type for User.
 */
export interface GQLUserConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLUserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user.
 */
export interface GQLUserEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUser;
}

/**
 * An object that can be closed
 */
export interface GQLClosable {
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: GQLDateTime;
}

/** Use this to resolve interface type Closable */
export type GQLPossibleClosableTypeNames =
'PullRequest' |
'Issue' |
'Project' |
'Milestone';

export interface GQLClosableNameMap {
  Closable: GQLClosable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  Project: GQLProject;
  Milestone: GQLMilestone;
}

/**
 * Represents a comment.
 */
export interface GQLComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/** Use this to resolve interface type Comment */
export type GQLPossibleCommentTypeNames =
'PullRequest' |
'Issue' |
'TeamDiscussion' |
'TeamDiscussionComment' |
'CommitComment' |
'IssueComment' |
'PullRequestReviewComment' |
'PullRequestReview' |
'GistComment';

export interface GQLCommentNameMap {
  Comment: GQLComment;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  CommitComment: GQLCommitComment;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
  GistComment: GQLGistComment;
}

/**
 * A comment author association with repository.
 */
export enum GQLCommentAuthorAssociation {
  
  /**
   * Author has been invited to collaborate on the repository.
   */
  COLLABORATOR = 'COLLABORATOR',
  
  /**
   * Author has previously committed to the repository.
   */
  CONTRIBUTOR = 'CONTRIBUTOR',
  
  /**
   * Author has not previously committed to GitHub.
   */
  FIRST_TIMER = 'FIRST_TIMER',
  
  /**
   * Author has not previously committed to the repository.
   */
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',
  
  /**
   * Author is a member of the organization that owns the repository.
   */
  MEMBER = 'MEMBER',
  
  /**
   * Author has no association with the repository.
   */
  NONE = 'NONE',
  
  /**
   * Author is the owner of the repository.
   */
  OWNER = 'OWNER'
}

/**
 * A list of edits to content.
 */
export interface GQLUserContentEditConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLUserContentEditEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUserContentEdit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLUserContentEditEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUserContentEdit;
}

/**
 * An edit on user content
 */
export interface GQLUserContentEdit extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the date and time when the object was deleted.
   */
  deletedAt?: GQLDateTime;
  
  /**
   * The actor who deleted this content
   */
  deletedBy?: GQLActor;
  
  /**
   * A summary of the changes for this edit
   */
  diff?: string;
  
  /**
   * When this content was edited
   */
  editedAt: GQLDateTime;
  
  /**
   * The actor who edited this content
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * An object that can have labels assigned to it.
 */
export interface GQLLabelable {
  
  /**
   * A list of labels associated with the object.
   */
  labels?: GQLLabelConnection;
}

/** Use this to resolve interface type Labelable */
export type GQLPossibleLabelableTypeNames = 'PullRequest' | 'Issue';

export interface GQLLabelableNameMap {
  Labelable: GQLLabelable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
}

/**
 * Ways in which lists of labels can be ordered upon return.
 */
export interface GQLLabelOrder {
  
  /**
   * The direction in which to order labels by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order labels by.
   */
  field: GQLLabelOrderField;
}

/**
 * Properties by which label connections can be ordered.
 */
export enum GQLLabelOrderField {
  
  /**
   * Order labels by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order labels by name 
   */
  NAME = 'NAME'
}

/**
 * The connection type for Label.
 */
export interface GQLLabelConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLLabelEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLLabel | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLLabelEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLLabel;
}

/**
 * A label for categorizing Issues or Milestones with a given Repository.
 */
export interface GQLLabel extends GQLNode {
  
  /**
   * Identifies the label color.
   */
  color: string;
  
  /**
   * Identifies the date and time when the label was created.
   */
  createdAt?: GQLDateTime;
  
  /**
   * A brief description of this label.
   */
  description?: string;
  id: string;
  
  /**
   * Indicates whether or not this is a default label.
   */
  isDefault: boolean;
  
  /**
   * A list of issues associated with this label.
   */
  issues: GQLIssueConnection;
  
  /**
   * Identifies the label name.
   */
  name: string;
  
  /**
   * A list of pull requests associated with this label.
   */
  pullRequests: GQLPullRequestConnection;
  
  /**
   * The repository associated with this label.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this label.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the label was last updated.
   */
  updatedAt?: GQLDateTime;
  
  /**
   * The HTTP URL for this label.
   */
  url: GQLURI;
}

/**
 * Ways in which to filter lists of issues.
 */
export interface GQLIssueFilters {
  
  /**
   * List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string;
  
  /**
   * List issues created by given name.
   */
  createdBy?: string;
  
  /**
   * List issues where the list of label names exist on the issue.
   */
  labels?: Array<string>;
  
  /**
   * List issues where the given name is mentioned in the issue.
   */
  mentioned?: string;
  
  /**
   * List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
   */
  milestone?: string;
  
  /**
   * List issues that have been updated at or after the given date.
   */
  since?: GQLDateTime;
  
  /**
   * List issues filtered by the list of states given.
   */
  states?: Array<GQLIssueState>;
  
  /**
   * List issues subscribed to by viewer.
   */
  viewerSubscribed?: boolean;
}

/**
 * The possible states of an issue.
 */
export enum GQLIssueState {
  
  /**
   * An issue that has been closed
   */
  CLOSED = 'CLOSED',
  
  /**
   * An issue that is still open
   */
  OPEN = 'OPEN'
}

/**
 * The connection type for Issue.
 */
export interface GQLIssueConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLIssueEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLIssue | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLIssueEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLIssue;
}

/**
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 */
export interface GQLIssue extends GQLAssignable, GQLClosable, GQLComment, GQLLabelable, GQLLockable, GQLNode, GQLReactable, GQLRepositoryNode, GQLSubscribable, GQLUniformResourceLocatable, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: GQLLockReason;
  
  /**
   * A list of Users assigned to this object.
   */
  assignees: GQLUserConnection;
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * Identifies the body of the issue.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * Identifies the body of the issue rendered to text.
   */
  bodyText: string;
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: GQLDateTime;
  
  /**
   * A list of comments associated with the Issue.
   */
  comments: GQLIssueCommentConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  
  /**
   * The hovercard information for this issue
   */
  hovercard: GQLHovercard;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * A list of labels associated with the object.
   */
  labels?: GQLLabelConnection;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * `true` if the object is locked
   */
  locked: boolean;
  
  /**
   * Identifies the milestone associated with the issue.
   */
  milestone?: GQLMilestone;
  
  /**
   * Identifies the issue number.
   */
  number: number;
  
  /**
   * A list of Users that are participating in the Issue conversation.
   */
  participants: GQLUserConnection;
  
  /**
   * List of project cards associated with this issue.
   */
  projectCards: GQLProjectCardConnection;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this issue
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the state of the issue.
   */
  state: GQLIssueState;
  
  /**
   * A list of events, comments, commits, etc. associated with the issue.
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   */
  timeline: GQLIssueTimelineConnection;
  
  /**
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timelineItems: GQLIssueTimelineItemsConnection;
  
  /**
   * Identifies the issue title.
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this issue
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
}

/**
 * An object that can be locked.
 */
export interface GQLLockable {
  
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: GQLLockReason;
  
  /**
   * `true` if the object is locked
   */
  locked: boolean;
}

/** Use this to resolve interface type Lockable */
export type GQLPossibleLockableTypeNames = 'PullRequest' | 'Issue';

export interface GQLLockableNameMap {
  Lockable: GQLLockable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
}

/**
 * The possible reasons that an issue or pull request was locked.
 */
export enum GQLLockReason {
  
  /**
   * The issue or pull request was locked because the conversation was off-topic.
   */
  OFF_TOPIC = 'OFF_TOPIC',
  
  /**
   * The issue or pull request was locked because the conversation was resolved.
   */
  RESOLVED = 'RESOLVED',
  
  /**
   * The issue or pull request was locked because the conversation was spam.
   */
  SPAM = 'SPAM',
  
  /**
   * The issue or pull request was locked because the conversation was too heated.
   */
  TOO_HEATED = 'TOO_HEATED'
}

/**
 * Represents a subject that can be reacted on.
 */
export interface GQLReactable {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
}

/** Use this to resolve interface type Reactable */
export type GQLPossibleReactableTypeNames =
'PullRequest' |
'Issue' |
'TeamDiscussion' |
'TeamDiscussionComment' |
'CommitComment' |
'IssueComment' |
'PullRequestReviewComment' |
'PullRequestReview';

export interface GQLReactableNameMap {
  Reactable: GQLReactable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  CommitComment: GQLCommitComment;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
}

/**
 * A group of emoji reactions to a particular piece of content.
 */
export interface GQLReactionGroup {
  
  /**
   * Identifies the emoji reaction.
   */
  content: GQLReactionContent;
  
  /**
   * Identifies when the reaction was created.
   */
  createdAt?: GQLDateTime;
  
  /**
   * The subject that was reacted to.
   */
  subject: GQLReactable;
  
  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   */
  users: GQLReactingUserConnection;
  
  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

/**
 * Emojis that can be attached to Issues, Pull Requests and Comments.
 */
export enum GQLReactionContent {
  
  /**
   * Represents the `:confused:` emoji.
   */
  CONFUSED = 'CONFUSED',
  
  /**
   * Represents the `:eyes:` emoji.
   */
  EYES = 'EYES',
  
  /**
   * Represents the `:heart:` emoji.
   */
  HEART = 'HEART',
  
  /**
   * Represents the `:hooray:` emoji.
   */
  HOORAY = 'HOORAY',
  
  /**
   * Represents the `:laugh:` emoji.
   */
  LAUGH = 'LAUGH',
  
  /**
   * Represents the `:rocket:` emoji.
   */
  ROCKET = 'ROCKET',
  
  /**
   * Represents the `:-1:` emoji.
   */
  THUMBS_DOWN = 'THUMBS_DOWN',
  
  /**
   * Represents the `:+1:` emoji.
   */
  THUMBS_UP = 'THUMBS_UP'
}

/**
 * The connection type for User.
 */
export interface GQLReactingUserConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLReactingUserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's made a reaction.
 */
export interface GQLReactingUserEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: GQLUser;
  
  /**
   * The moment when the user made the reaction.
   */
  reactedAt: GQLDateTime;
}

/**
 * Ways in which lists of reactions can be ordered upon return.
 */
export interface GQLReactionOrder {
  
  /**
   * The direction in which to order reactions by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order reactions by.
   */
  field: GQLReactionOrderField;
}

/**
 * A list of fields that reactions can be ordered by.
 */
export enum GQLReactionOrderField {
  
  /**
   * Allows ordering a list of reactions by when they were created.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * A list of reactions that have been left on the subject.
 */
export interface GQLReactionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLReactionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLReaction | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

/**
 * An edge in a connection.
 */
export interface GQLReactionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLReaction;
}

/**
 * An emoji reaction to a particular piece of content.
 */
export interface GQLReaction extends GQLNode {
  
  /**
   * Identifies the emoji reaction.
   */
  content: GQLReactionContent;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The reactable piece of content
   */
  reactable: GQLReactable;
  
  /**
   * Identifies the user who created this reaction.
   */
  user?: GQLUser;
}

/**
 * Represents a object that belongs to a repository.
 */
export interface GQLRepositoryNode {
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
}

/** Use this to resolve interface type RepositoryNode */
export type GQLPossibleRepositoryNodeTypeNames =
'PullRequest' |
'Issue' |
'CommitComment' |
'RepositoryVulnerabilityAlert' |
'IssueComment' |
'PullRequestReviewComment' |
'PullRequestReview' |
'CommitCommentThread' |
'PullRequestCommitCommentThread';

export interface GQLRepositoryNodeNameMap {
  RepositoryNode: GQLRepositoryNode;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  CommitComment: GQLCommitComment;
  RepositoryVulnerabilityAlert: GQLRepositoryVulnerabilityAlert;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
  CommitCommentThread: GQLCommitCommentThread;
  PullRequestCommitCommentThread: GQLPullRequestCommitCommentThread;
}

/**
 * A repository contains the content for a project.
 */
export interface GQLRepository extends GQLNode, GQLPackageOwner, GQLProjectOwner, GQLRepositoryInfo, GQLStarrable, GQLSubscribable, GQLUniformResourceLocatable {
  
  /**
   * A list of users that can be assigned to issues in this repository.
   */
  assignableUsers: GQLUserConnection;
  
  /**
   * A list of branch protection rules for this repository.
   */
  branchProtectionRules: GQLBranchProtectionRuleConnection;
  
  /**
   * Returns the code of conduct for this repository
   */
  codeOfConduct?: GQLCodeOfConduct;
  
  /**
   * A list of collaborators associated with the repository.
   */
  collaborators?: GQLRepositoryCollaboratorConnection;
  
  /**
   * A list of commit comments associated with the repository.
   */
  commitComments: GQLCommitCommentConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The Ref associated with the repository's default branch.
   */
  defaultBranchRef?: GQLRef;
  
  /**
   * Whether or not branches are automatically deleted when merged in this repository.
   */
  deleteBranchOnMerge: boolean;
  
  /**
   * A list of deploy keys that are on this repository.
   */
  deployKeys: GQLDeployKeyConnection;
  
  /**
   * Deployments associated with the repository
   */
  deployments: GQLDeploymentConnection;
  
  /**
   * The description of the repository.
   */
  description?: string;
  
  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: GQLHTML;
  
  /**
   * The number of kilobytes this repository occupies on disk.
   */
  diskUsage?: number;
  
  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;
  
  /**
   * A list of direct forked repositories.
   */
  forks: GQLRepositoryConnection;
  
  /**
   * The funding links for this repository
   */
  fundingLinks: Array<GQLFundingLink>;
  
  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;
  
  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: boolean;
  
  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;
  
  /**
   * The repository's URL.
   */
  homepageUrl?: GQLURI;
  id: string;
  
  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;
  
  /**
   * Returns whether or not this repository disabled.
   */
  isDisabled: boolean;
  
  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;
  
  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;
  
  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;
  
  /**
   * Identifies if the repository is private.
   */
  isPrivate: boolean;
  
  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: boolean;
  
  /**
   * Returns a single issue from the current repository by number.
   */
  issue?: GQLIssue;
  
  /**
   * Returns a single issue-like object from the current repository by number.
   */
  issueOrPullRequest?: GQLIssueOrPullRequest;
  
  /**
   * A list of issues that have been opened in the repository.
   */
  issues: GQLIssueConnection;
  
  /**
   * Returns a single label by name
   */
  label?: GQLLabel;
  
  /**
   * A list of labels associated with the repository.
   */
  labels?: GQLLabelConnection;
  
  /**
   * A list containing a breakdown of the language composition of the repository.
   */
  languages?: GQLLanguageConnection;
  
  /**
   * The license associated with the repository
   */
  licenseInfo?: GQLLicense;
  
  /**
   * The reason the repository has been locked.
   */
  lockReason?: GQLRepositoryLockReason;
  
  /**
   * A list of Users that can be mentioned in the context of the repository.
   */
  mentionableUsers: GQLUserConnection;
  
  /**
   * Whether or not PRs are merged with a merge commit on this repository.
   */
  mergeCommitAllowed: boolean;
  
  /**
   * Returns a single milestone from the current repository by number.
   */
  milestone?: GQLMilestone;
  
  /**
   * A list of milestones associated with the repository.
   */
  milestones?: GQLMilestoneConnection;
  
  /**
   * The repository's original mirror URL.
   */
  mirrorUrl?: GQLURI;
  
  /**
   * The name of the repository.
   */
  name: string;
  
  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
  
  /**
   * A Git object in the repository
   */
  object?: GQLGitObject;
  
  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: GQLURI;
  
  /**
   * The User owner of the repository.
   */
  owner: GQLRepositoryOwner;
  
  /**
   * A list of packages under the owner.
   */
  packages: GQLPackageConnection;
  
  /**
   * The repository parent, if this is a fork.
   */
  parent?: GQLRepository;
  
  /**
   * The primary language of the repository's code.
   */
  primaryLanguage?: GQLLanguage;
  
  /**
   * Find project by number.
   */
  project?: GQLProject;
  
  /**
   * A list of projects under the owner.
   */
  projects: GQLProjectConnection;
  
  /**
   * The HTTP path listing the repository's projects
   */
  projectsResourcePath: GQLURI;
  
  /**
   * The HTTP URL listing the repository's projects
   */
  projectsUrl: GQLURI;
  
  /**
   * Returns a single pull request from the current repository by number.
   */
  pullRequest?: GQLPullRequest;
  
  /**
   * A list of pull requests that have been opened in the repository.
   */
  pullRequests: GQLPullRequestConnection;
  
  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt?: GQLDateTime;
  
  /**
   * Whether or not rebase-merging is enabled on this repository.
   */
  rebaseMergeAllowed: boolean;
  
  /**
   * Fetch a given ref from the repository
   */
  ref?: GQLRef;
  
  /**
   * Fetch a list of refs from the repository
   */
  refs?: GQLRefConnection;
  
  /**
   * Lookup a single release given various criteria.
   */
  release?: GQLRelease;
  
  /**
   * List of releases which are dependent on this repository.
   */
  releases: GQLReleaseConnection;
  
  /**
   * A list of applied repository-topic associations for this repository.
   */
  repositoryTopics: GQLRepositoryTopicConnection;
  
  /**
   * The HTTP path for this repository
   */
  resourcePath: GQLURI;
  
  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: GQLHTML;
  
  /**
   * Whether or not squash-merging is enabled on this repository.
   */
  squashMergeAllowed: boolean;
  
  /**
   * The SSH URL to clone this repository
   */
  sshUrl: GQLGitSSHRemote;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: GQLStargazerConnection;
  
  /**
   * Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
   */
  submodules: GQLSubmoduleConnection;
  
  /**
   * Temporary authentication token for cloning this repository.
   */
  tempCloneToken?: string;
  
  /**
   * The repository from which this repository was generated, if any.
   */
  templateRepository?: GQLRepository;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this repository
   */
  url: GQLURI;
  
  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: boolean;
  
  /**
   * Indicates whether the viewer has admin permissions on this repository.
   */
  viewerCanAdminister: boolean;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Indicates whether the viewer can update the topics of this repository.
   */
  viewerCanUpdateTopics: boolean;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
  
  /**
   * The users permission level on the repository. Will return null if authenticated as an GitHub App.
   */
  viewerPermission?: GQLRepositoryPermission;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
  
  /**
   * A list of vulnerability alerts that are on this repository.
   */
  vulnerabilityAlerts?: GQLRepositoryVulnerabilityAlertConnection;
  
  /**
   * A list of users watching the repository.
   */
  watchers: GQLUserConnection;
}

/**
 * Represents an owner of a Project.
 */
export interface GQLProjectOwner {
  id: string;
  
  /**
   * Find project by number.
   */
  project?: GQLProject;
  
  /**
   * A list of projects under the owner.
   */
  projects: GQLProjectConnection;
  
  /**
   * The HTTP path listing owners projects
   */
  projectsResourcePath: GQLURI;
  
  /**
   * The HTTP URL listing owners projects
   */
  projectsUrl: GQLURI;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
}

/** Use this to resolve interface type ProjectOwner */
export type GQLPossibleProjectOwnerTypeNames =
'Organization' |
'User' |
'Repository';

export interface GQLProjectOwnerNameMap {
  ProjectOwner: GQLProjectOwner;
  Organization: GQLOrganization;
  User: GQLUser;
  Repository: GQLRepository;
}

/**
 * Projects manage issues, pull requests and notes within a project owner.
 */
export interface GQLProject extends GQLClosable, GQLNode, GQLUpdatable {
  
  /**
   * The project's description body.
   */
  body?: string;
  
  /**
   * The projects description body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: GQLDateTime;
  
  /**
   * List of columns in the project
   */
  columns: GQLProjectColumnConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The actor who originally created the project.
   */
  creator?: GQLActor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The project's name.
   */
  name: string;
  
  /**
   * The project's number.
   */
  number: number;
  
  /**
   * The project's owner. Currently limited to repositories, organizations, and users.
   */
  owner: GQLProjectOwner;
  
  /**
   * List of pending cards in this project
   */
  pendingCards: GQLProjectCardConnection;
  
  /**
   * The HTTP path for this project
   */
  resourcePath: GQLURI;
  
  /**
   * Whether the project is open or closed.
   */
  state: GQLProjectState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this project
   */
  url: GQLURI;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

/**
 * Entities that can be updated.
 */
export interface GQLUpdatable {
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

/** Use this to resolve interface type Updatable */
export type GQLPossibleUpdatableTypeNames =
'PullRequest' |
'Issue' |
'Project' |
'TeamDiscussion' |
'TeamDiscussionComment' |
'CommitComment' |
'IssueComment' |
'PullRequestReviewComment' |
'PullRequestReview' |
'GistComment';

export interface GQLUpdatableNameMap {
  Updatable: GQLUpdatable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  Project: GQLProject;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  CommitComment: GQLCommitComment;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
  GistComment: GQLGistComment;
}

/**
 * The connection type for ProjectColumn.
 */
export interface GQLProjectColumnConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLProjectColumnEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLProjectColumn | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLProjectColumnEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLProjectColumn;
}

/**
 * A column inside a project.
 */
export interface GQLProjectColumn extends GQLNode {
  
  /**
   * List of cards in the column
   */
  cards: GQLProjectCardConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The project column's name.
   */
  name: string;
  
  /**
   * The project that contains this column.
   */
  project: GQLProject;
  
  /**
   * The semantic purpose of the column
   */
  purpose?: GQLProjectColumnPurpose;
  
  /**
   * The HTTP path for this project column
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this project column
   */
  url: GQLURI;
}

/**
 * The possible archived states of a project card.
 */
export enum GQLProjectCardArchivedState {
  
  /**
   * A project card that is archived
   */
  ARCHIVED = 'ARCHIVED',
  
  /**
   * A project card that is not archived
   */
  NOT_ARCHIVED = 'NOT_ARCHIVED'
}

/**
 * The connection type for ProjectCard.
 */
export interface GQLProjectCardConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLProjectCardEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLProjectCard | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLProjectCardEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLProjectCard;
}

/**
 * A card in a project.
 */
export interface GQLProjectCard extends GQLNode {
  
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   */
  column?: GQLProjectColumn;
  
  /**
   * The card content item
   */
  content?: GQLProjectCardItem;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The actor who created this card
   */
  creator?: GQLActor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * Whether the card is archived
   */
  isArchived: boolean;
  
  /**
   * The card note
   */
  note?: string;
  
  /**
   * The project that contains this card.
   */
  project: GQLProject;
  
  /**
   * The HTTP path for this card
   */
  resourcePath: GQLURI;
  
  /**
   * The state of ProjectCard
   */
  state?: GQLProjectCardState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this card
   */
  url: GQLURI;
}

/**
 * Types that can be inside Project Cards.
 */
export type GQLProjectCardItem = GQLIssue | GQLPullRequest;

/** Use this to resolve union type ProjectCardItem */
export type GQLPossibleProjectCardItemTypeNames = 'Issue' | 'PullRequest';

export interface GQLProjectCardItemNameMap {
  ProjectCardItem: GQLProjectCardItem;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

/**
 * Various content states of a ProjectCard
 */
export enum GQLProjectCardState {
  
  /**
   * The card has content only.
   */
  CONTENT_ONLY = 'CONTENT_ONLY',
  
  /**
   * The card has a note only.
   */
  NOTE_ONLY = 'NOTE_ONLY',
  
  /**
   * The card is redacted.
   */
  REDACTED = 'REDACTED'
}

/**
 * The semantic purpose of the column - todo, in progress, or done.
 */
export enum GQLProjectColumnPurpose {
  
  /**
   * The column contains cards which are complete
   */
  DONE = 'DONE',
  
  /**
   * The column contains cards which are currently being worked on
   */
  IN_PROGRESS = 'IN_PROGRESS',
  
  /**
   * The column contains cards still to be worked on
   */
  TODO = 'TODO'
}

/**
 * State of the project; either 'open' or 'closed'
 */
export enum GQLProjectState {
  
  /**
   * The project is closed.
   */
  CLOSED = 'CLOSED',
  
  /**
   * The project is open.
   */
  OPEN = 'OPEN'
}

/**
 * Ways in which lists of projects can be ordered upon return.
 */
export interface GQLProjectOrder {
  
  /**
   * The direction in which to order projects by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order projects by.
   */
  field: GQLProjectOrderField;
}

/**
 * Properties by which project connections can be ordered.
 */
export enum GQLProjectOrderField {
  
  /**
   * Order projects by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order projects by name
   */
  NAME = 'NAME',
  
  /**
   * Order projects by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * A list of projects associated with the owner.
 */
export interface GQLProjectConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLProjectEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLProject | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLProjectEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLProject;
}

/**
 * A subset of repository info.
 */
export interface GQLRepositoryInfo {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The description of the repository.
   */
  description?: string;
  
  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: GQLHTML;
  
  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;
  
  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;
  
  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: boolean;
  
  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;
  
  /**
   * The repository's URL.
   */
  homepageUrl?: GQLURI;
  
  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;
  
  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;
  
  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;
  
  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;
  
  /**
   * Identifies if the repository is private.
   */
  isPrivate: boolean;
  
  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: boolean;
  
  /**
   * The license associated with the repository
   */
  licenseInfo?: GQLLicense;
  
  /**
   * The reason the repository has been locked.
   */
  lockReason?: GQLRepositoryLockReason;
  
  /**
   * The repository's original mirror URL.
   */
  mirrorUrl?: GQLURI;
  
  /**
   * The name of the repository.
   */
  name: string;
  
  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
  
  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: GQLURI;
  
  /**
   * The User owner of the repository.
   */
  owner: GQLRepositoryOwner;
  
  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt?: GQLDateTime;
  
  /**
   * The HTTP path for this repository
   */
  resourcePath: GQLURI;
  
  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: GQLHTML;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this repository
   */
  url: GQLURI;
  
  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: boolean;
}

/** Use this to resolve interface type RepositoryInfo */
export type GQLPossibleRepositoryInfoTypeNames = 'Repository';

export interface GQLRepositoryInfoNameMap {
  RepositoryInfo: GQLRepositoryInfo;
  Repository: GQLRepository;
}

/**
 * A repository's open source license
 */
export interface GQLLicense extends GQLNode {
  
  /**
   * The full text of the license
   */
  body: string;
  
  /**
   * The conditions set by the license
   */
  conditions: Array<GQLLicenseRule | null>;
  
  /**
   * A human-readable description of the license
   */
  description?: string;
  
  /**
   * Whether the license should be featured
   */
  featured: boolean;
  
  /**
   * Whether the license should be displayed in license pickers
   */
  hidden: boolean;
  id: string;
  
  /**
   * Instructions on how to implement the license
   */
  implementation?: string;
  
  /**
   * The lowercased SPDX ID of the license
   */
  key: string;
  
  /**
   * The limitations set by the license
   */
  limitations: Array<GQLLicenseRule | null>;
  
  /**
   * The license full name specified by <https://spdx.org/licenses>
   */
  name: string;
  
  /**
   * Customary short name if applicable (e.g, GPLv3)
   */
  nickname?: string;
  
  /**
   * The permissions set by the license
   */
  permissions: Array<GQLLicenseRule | null>;
  
  /**
   * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
   */
  pseudoLicense: boolean;
  
  /**
   * Short identifier specified by <https://spdx.org/licenses>
   */
  spdxId?: string;
  
  /**
   * URL to the license on <https://choosealicense.com>
   */
  url?: GQLURI;
}

/**
 * Describes a License's conditions, permissions, and limitations
 */
export interface GQLLicenseRule {
  
  /**
   * A description of the rule
   */
  description: string;
  
  /**
   * The machine-readable rule key
   */
  key: string;
  
  /**
   * The human-readable rule label
   */
  label: string;
}

/**
 * The possible reasons a given repository could be in a locked state.
 */
export enum GQLRepositoryLockReason {
  
  /**
   * The repository is locked due to a billing related reason.
   */
  BILLING = 'BILLING',
  
  /**
   * The repository is locked due to a migration.
   */
  MIGRATING = 'MIGRATING',
  
  /**
   * The repository is locked due to a move.
   */
  MOVING = 'MOVING',
  
  /**
   * The repository is locked due to a rename.
   */
  RENAME = 'RENAME'
}

/**
 * Represents an owner of a Repository.
 */
export interface GQLRepositoryOwner {
  
  /**
   * A URL pointing to the owner's public avatar.
   */
  avatarUrl: GQLURI;
  id: string;
  
  /**
   * The username used to login.
   */
  login: string;
  
  /**
   * A list of repositories that the user owns.
   */
  repositories: GQLRepositoryConnection;
  
  /**
   * Find Repository.
   */
  repository?: GQLRepository;
  
  /**
   * The HTTP URL for the owner.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for the owner.
   */
  url: GQLURI;
}

/** Use this to resolve interface type RepositoryOwner */
export type GQLPossibleRepositoryOwnerTypeNames = 'Organization' | 'User';

export interface GQLRepositoryOwnerNameMap {
  RepositoryOwner: GQLRepositoryOwner;
  Organization: GQLOrganization;
  User: GQLUser;
}

/**
 * The affiliation of a user to a repository
 */
export enum GQLRepositoryAffiliation {
  
  /**
   * Repositories that the user has been added to as a collaborator.
   */
  COLLABORATOR = 'COLLABORATOR',
  
  /**
   * Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   */
  ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER',
  
  /**
   * Repositories that are owned by the authenticated user.
   */
  OWNER = 'OWNER'
}

/**
 * Ordering options for repository connections
 */
export interface GQLRepositoryOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order repositories by.
   */
  field: GQLRepositoryOrderField;
}

/**
 * Properties by which repository connections can be ordered.
 */
export enum GQLRepositoryOrderField {
  
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order repositories by name
   */
  NAME = 'NAME',
  
  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',
  
  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS',
  
  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The privacy of a repository
 */
export enum GQLRepositoryPrivacy {
  
  /**
   * Private
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * Public
   */
  PUBLIC = 'PUBLIC'
}

/**
 * A list of repositories owned by the subject.
 */
export interface GQLRepositoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLRepositoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRepository | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * The total size in kilobytes of all repositories in the connection.
   */
  totalDiskUsage: number;
}

/**
 * An edge in a connection.
 */
export interface GQLRepositoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLRepository;
}

/**
 * Things that can be starred.
 */
export interface GQLStarrable {
  id: string;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: GQLStargazerConnection;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

/** Use this to resolve interface type Starrable */
export type GQLPossibleStarrableTypeNames = 'Repository' | 'Topic' | 'Gist';

export interface GQLStarrableNameMap {
  Starrable: GQLStarrable;
  Repository: GQLRepository;
  Topic: GQLTopic;
  Gist: GQLGist;
}

/**
 * Ways in which star connections can be ordered.
 */
export interface GQLStarOrder {
  
  /**
   * The direction in which to order nodes.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order nodes by.
   */
  field: GQLStarOrderField;
}

/**
 * Properties by which star connections can be ordered.
 */
export enum GQLStarOrderField {
  
  /**
   * Allows ordering a list of stars by when they were created.
   */
  STARRED_AT = 'STARRED_AT'
}

/**
 * The connection type for User.
 */
export interface GQLStargazerConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLStargazerEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's starred a repository.
 */
export interface GQLStargazerEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: GQLUser;
  
  /**
   * Identifies when the item was starred.
   */
  starredAt: GQLDateTime;
}

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export interface GQLSubscribable {
  id: string;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
}

/** Use this to resolve interface type Subscribable */
export type GQLPossibleSubscribableTypeNames =
'PullRequest' |
'Issue' |
'Repository' |
'Team' |
'TeamDiscussion' |
'Commit';

export interface GQLSubscribableNameMap {
  Subscribable: GQLSubscribable;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  Repository: GQLRepository;
  Team: GQLTeam;
  TeamDiscussion: GQLTeamDiscussion;
  Commit: GQLCommit;
}

/**
 * The possible states of a subscription.
 */
export enum GQLSubscriptionState {
  
  /**
   * The User is never notified.
   */
  IGNORED = 'IGNORED',
  
  /**
   * The User is notified of all conversations.
   */
  SUBSCRIBED = 'SUBSCRIBED',
  
  /**
   * The User is only notified when participating or @mentioned.
   */
  UNSUBSCRIBED = 'UNSUBSCRIBED'
}

/**
 * The connection type for BranchProtectionRule.
 */
export interface GQLBranchProtectionRuleConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLBranchProtectionRuleEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLBranchProtectionRule | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLBranchProtectionRuleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLBranchProtectionRule;
}

/**
 * A branch protection rule.
 */
export interface GQLBranchProtectionRule extends GQLNode {
  
  /**
   * A list of conflicts matching branches protection rule and other branch protection rules
   */
  branchProtectionRuleConflicts: GQLBranchProtectionRuleConflictConnection;
  
  /**
   * The actor who created this branch protection rule.
   */
  creator?: GQLActor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews: boolean;
  id: string;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced: boolean;
  
  /**
   * Repository refs that are protected by this rule
   */
  matchingRefs: GQLRefConnection;
  
  /**
   * Identifies the protection rule pattern.
   */
  pattern: string;
  
  /**
   * A list push allowances for this branch protection rule.
   */
  pushAllowances: GQLPushAllowanceConnection;
  
  /**
   * The repository associated with this branch protection rule.
   */
  repository?: GQLRepository;
  
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string | null>;
  
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews: boolean;
  
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: boolean;
  
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures: boolean;
  
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks: boolean;
  
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals: boolean;
  
  /**
   * A list review dismissal allowances for this branch protection rule.
   */
  reviewDismissalAllowances: GQLReviewDismissalAllowanceConnection;
}

/**
 * The connection type for BranchProtectionRuleConflict.
 */
export interface GQLBranchProtectionRuleConflictConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLBranchProtectionRuleConflictEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLBranchProtectionRuleConflict | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLBranchProtectionRuleConflictEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLBranchProtectionRuleConflict;
}

/**
 * A conflict between two branch protection rules.
 */
export interface GQLBranchProtectionRuleConflict {
  
  /**
   * Identifies the branch protection rule.
   */
  branchProtectionRule?: GQLBranchProtectionRule;
  
  /**
   * Identifies the conflicting branch protection rule.
   */
  conflictingBranchProtectionRule?: GQLBranchProtectionRule;
  
  /**
   * Identifies the branch ref that has conflicting rules
   */
  ref?: GQLRef;
}

/**
 * The connection type for Ref.
 */
export interface GQLRefConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLRefEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRef | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLRefEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLRef;
}

/**
 * The connection type for PushAllowance.
 */
export interface GQLPushAllowanceConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPushAllowanceEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPushAllowance | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPushAllowanceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPushAllowance;
}

/**
 * A team, user or app who has the ability to push to a protected branch.
 */
export interface GQLPushAllowance extends GQLNode {
  
  /**
   * The actor that can push.
   */
  actor?: GQLPushAllowanceActor;
  
  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule?: GQLBranchProtectionRule;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type GQLPushAllowanceActor = GQLApp | GQLTeam | GQLUser;

/** Use this to resolve union type PushAllowanceActor */
export type GQLPossiblePushAllowanceActorTypeNames = 'App' | 'Team' | 'User';

export interface GQLPushAllowanceActorNameMap {
  PushAllowanceActor: GQLPushAllowanceActor;
  App: GQLApp;
  Team: GQLTeam;
  User: GQLUser;
}

/**
 * A GitHub App.
 */
export interface GQLApp extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The description of the app.
   */
  description?: string;
  id: string;
  
  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;
  
  /**
   * A URL pointing to the app's logo.
   */
  logoUrl: GQLURI;
  
  /**
   * The name of the app.
   */
  name: string;
  
  /**
   * A slug based on the name of the app for use in URLs.
   */
  slug: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The URL to the app's homepage.
   */
  url: GQLURI;
}

/**
 * A team of users in an organization.
 */
export interface GQLTeam extends GQLMemberStatusable, GQLNode, GQLSubscribable {
  
  /**
   * A list of teams that are ancestors of this team.
   */
  ancestors: GQLTeamConnection;
  
  /**
   * A URL pointing to the team's avatar.
   */
  avatarUrl?: GQLURI;
  
  /**
   * List of child teams belonging to this team
   */
  childTeams: GQLTeamConnection;
  
  /**
   * The slug corresponding to the organization and team.
   */
  combinedSlug: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The description of the team.
   */
  description?: string;
  
  /**
   * Find a team discussion by its number.
   */
  discussion?: GQLTeamDiscussion;
  
  /**
   * A list of team discussions.
   */
  discussions: GQLTeamDiscussionConnection;
  
  /**
   * The HTTP path for team discussions
   */
  discussionsResourcePath: GQLURI;
  
  /**
   * The HTTP URL for team discussions
   */
  discussionsUrl: GQLURI;
  
  /**
   * The HTTP path for editing this team
   */
  editTeamResourcePath: GQLURI;
  
  /**
   * The HTTP URL for editing this team
   */
  editTeamUrl: GQLURI;
  id: string;
  
  /**
   * A list of pending invitations for users to this team
   */
  invitations?: GQLOrganizationInvitationConnection;
  
  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: GQLUserStatusConnection;
  
  /**
   * A list of users who are members of this team.
   */
  members: GQLTeamMemberConnection;
  
  /**
   * The HTTP path for the team' members
   */
  membersResourcePath: GQLURI;
  
  /**
   * The HTTP URL for the team' members
   */
  membersUrl: GQLURI;
  
  /**
   * The name of the team.
   */
  name: string;
  
  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: GQLURI;
  
  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: GQLURI;
  
  /**
   * The organization that owns this team.
   */
  organization: GQLOrganization;
  
  /**
   * The parent team of the team.
   */
  parentTeam?: GQLTeam;
  
  /**
   * The level of privacy the team has.
   */
  privacy: GQLTeamPrivacy;
  
  /**
   * A list of repositories this team has access to.
   */
  repositories: GQLTeamRepositoryConnection;
  
  /**
   * The HTTP path for this team's repositories
   */
  repositoriesResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this team's repositories
   */
  repositoriesUrl: GQLURI;
  
  /**
   * The HTTP path for this team
   */
  resourcePath: GQLURI;
  
  /**
   * The slug corresponding to the team.
   */
  slug: string;
  
  /**
   * The HTTP path for this team's teams
   */
  teamsResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this team's teams
   */
  teamsUrl: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this team
   */
  url: GQLURI;
  
  /**
   * Team is adminable by the viewer.
   */
  viewerCanAdminister: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
}

/**
 * The connection type for Team.
 */
export interface GQLTeamConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLTeamEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLTeam | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLTeamEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLTeam;
}

/**
 * Ways in which team connections can be ordered.
 */
export interface GQLTeamOrder {
  
  /**
   * The direction in which to order nodes.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order nodes by.
   */
  field: GQLTeamOrderField;
}

/**
 * Properties by which team connections can be ordered.
 */
export enum GQLTeamOrderField {
  
  /**
   * Allows ordering a list of teams by name.
   */
  NAME = 'NAME'
}

/**
 * A team discussion.
 */
export interface GQLTeamDiscussion extends GQLComment, GQLDeletable, GQLNode, GQLReactable, GQLSubscribable, GQLUniformResourceLocatable, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the discussion's team.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the discussion body hash.
   */
  bodyVersion: string;
  
  /**
   * A list of comments on this discussion.
   */
  comments: GQLTeamDiscussionCommentConnection;
  
  /**
   * The HTTP path for discussion comments
   */
  commentsResourcePath: GQLURI;
  
  /**
   * The HTTP URL for discussion comments
   */
  commentsUrl: GQLURI;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Whether or not the discussion is pinned.
   */
  isPinned: boolean;
  
  /**
   * Whether or not the discussion is only visible to team members and org admins.
   */
  isPrivate: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Identifies the discussion within its team.
   */
  number: number;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The HTTP path for this discussion
   */
  resourcePath: GQLURI;
  
  /**
   * The team that defines the context of this discussion.
   */
  team: GQLTeam;
  
  /**
   * The title of the discussion
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this discussion
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Whether or not the current viewer can pin this discussion.
   */
  viewerCanPin: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
}

/**
 * Entities that can be deleted.
 */
export interface GQLDeletable {
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
}

/** Use this to resolve interface type Deletable */
export type GQLPossibleDeletableTypeNames =
'TeamDiscussion' |
'TeamDiscussionComment' |
'CommitComment' |
'IssueComment' |
'PullRequestReviewComment' |
'PullRequestReview' |
'GistComment';

export interface GQLDeletableNameMap {
  Deletable: GQLDeletable;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  CommitComment: GQLCommitComment;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
  GistComment: GQLGistComment;
}

/**
 * Comments that can be updated.
 */
export interface GQLUpdatableComment {
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
}

/** Use this to resolve interface type UpdatableComment */
export type GQLPossibleUpdatableCommentTypeNames =
'PullRequest' |
'Issue' |
'TeamDiscussion' |
'TeamDiscussionComment' |
'CommitComment' |
'IssueComment' |
'PullRequestReviewComment' |
'PullRequestReview' |
'GistComment';

export interface GQLUpdatableCommentNameMap {
  UpdatableComment: GQLUpdatableComment;
  PullRequest: GQLPullRequest;
  Issue: GQLIssue;
  TeamDiscussion: GQLTeamDiscussion;
  TeamDiscussionComment: GQLTeamDiscussionComment;
  CommitComment: GQLCommitComment;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReview: GQLPullRequestReview;
  GistComment: GQLGistComment;
}

/**
 * The possible errors that will prevent a user from updating a comment.
 */
export enum GQLCommentCannotUpdateReason {
  
  /**
   * Unable to create comment because repository is archived.
   */
  ARCHIVED = 'ARCHIVED',
  
  /**
   * You cannot update this comment
   */
  DENIED = 'DENIED',
  
  /**
   * You must be the author or have write access to this repository to update this comment.
   */
  INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS',
  
  /**
   * Unable to create comment because issue is locked.
   */
  LOCKED = 'LOCKED',
  
  /**
   * You must be logged in to update this comment.
   */
  LOGIN_REQUIRED = 'LOGIN_REQUIRED',
  
  /**
   * Repository is under maintenance.
   */
  MAINTENANCE = 'MAINTENANCE',
  
  /**
   * At least one email address must be verified to update this comment.
   */
  VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED'
}

/**
 * Ways in which team discussion comment connections can be ordered.
 */
export interface GQLTeamDiscussionCommentOrder {
  
  /**
   * The direction in which to order nodes.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field by which to order nodes.
   */
  field: GQLTeamDiscussionCommentOrderField;
}

/**
 * Properties by which team discussion comment connections can be ordered.
 */
export enum GQLTeamDiscussionCommentOrderField {
  
  /**
   * Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
   */
  NUMBER = 'NUMBER'
}

/**
 * The connection type for TeamDiscussionComment.
 */
export interface GQLTeamDiscussionCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLTeamDiscussionCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLTeamDiscussionComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLTeamDiscussionCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLTeamDiscussionComment;
}

/**
 * A comment on a team discussion.
 */
export interface GQLTeamDiscussionComment extends GQLComment, GQLDeletable, GQLNode, GQLReactable, GQLUniformResourceLocatable, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the comment's team.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * The current version of the body content.
   */
  bodyVersion: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The discussion this comment is about.
   */
  discussion: GQLTeamDiscussion;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Identifies the comment number.
   */
  number: number;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The HTTP path for this comment
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this comment
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * Ways in which team discussion connections can be ordered.
 */
export interface GQLTeamDiscussionOrder {
  
  /**
   * The direction in which to order nodes.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field by which to order nodes.
   */
  field: GQLTeamDiscussionOrderField;
}

/**
 * Properties by which team discussion connections can be ordered.
 */
export enum GQLTeamDiscussionOrderField {
  
  /**
   * Allows chronological ordering of team discussions.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for TeamDiscussion.
 */
export interface GQLTeamDiscussionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLTeamDiscussionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLTeamDiscussion | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLTeamDiscussionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLTeamDiscussion;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface GQLOrganizationInvitationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLOrganizationInvitationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLOrganizationInvitation | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLOrganizationInvitationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLOrganizationInvitation;
}

/**
 * An Invitation for a user to an organization.
 */
export interface GQLOrganizationInvitation extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The email address of the user invited to the organization.
   */
  email?: string;
  id: string;
  
  /**
   * The type of invitation that was sent (e.g. email, user).
   */
  invitationType: GQLOrganizationInvitationType;
  
  /**
   * The user who was invited to the organization.
   */
  invitee?: GQLUser;
  
  /**
   * The user who created the invitation.
   */
  inviter: GQLUser;
  
  /**
   * The organization the invite is for
   */
  organization: GQLOrganization;
  
  /**
   * The user's pending role in the organization (e.g. member, owner).
   */
  role: GQLOrganizationInvitationRole;
}

/**
 * The possible organization invitation types.
 */
export enum GQLOrganizationInvitationType {
  
  /**
   * The invitation was to an email address.
   */
  EMAIL = 'EMAIL',
  
  /**
   * The invitation was to an existing user.
   */
  USER = 'USER'
}

/**
 * The possible organization invitation roles.
 */
export enum GQLOrganizationInvitationRole {
  
  /**
   * The user is invited to be an admin of the organization.
   */
  ADMIN = 'ADMIN',
  
  /**
   * The user is invited to be a billing manager of the organization.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
  
  /**
   * The user is invited to be a direct member of the organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  
  /**
   * The user's previous role will be reinstated.
   */
  REINSTATE = 'REINSTATE'
}

/**
 * Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
 */
export enum GQLTeamMembershipType {
  
  /**
   * Includes immediate and child team members for the team.
   */
  ALL = 'ALL',
  
  /**
   * Includes only child team members for the team.
   */
  CHILD_TEAM = 'CHILD_TEAM',
  
  /**
   * Includes only immediate members of the team.
   */
  IMMEDIATE = 'IMMEDIATE'
}

/**
 * Ordering options for team member connections
 */
export interface GQLTeamMemberOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order team members by.
   */
  field: GQLTeamMemberOrderField;
}

/**
 * Properties by which team member connections can be ordered.
 */
export enum GQLTeamMemberOrderField {
  
  /**
   * Order team members by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order team members by login
   */
  LOGIN = 'LOGIN'
}

/**
 * The possible team member roles; either 'maintainer' or 'member'.
 */
export enum GQLTeamMemberRole {
  
  /**
   * A team maintainer has permission to add and remove team members.
   */
  MAINTAINER = 'MAINTAINER',
  
  /**
   * A team member has no administrative permissions on the team.
   */
  MEMBER = 'MEMBER'
}

/**
 * The connection type for User.
 */
export interface GQLTeamMemberConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLTeamMemberEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a member of a team.
 */
export interface GQLTeamMemberEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The HTTP path to the organization's member access page.
   */
  memberAccessResourcePath: GQLURI;
  
  /**
   * The HTTP URL to the organization's member access page.
   */
  memberAccessUrl: GQLURI;
  node: GQLUser;
  
  /**
   * The role the member has on the team.
   */
  role: GQLTeamMemberRole;
}

/**
 * The possible team privacy values.
 */
export enum GQLTeamPrivacy {
  
  /**
   * A secret team can only be seen by its members.
   */
  SECRET = 'SECRET',
  
  /**
   * A visible team can be seen and @mentioned by every member of the organization.
   */
  VISIBLE = 'VISIBLE'
}

/**
 * Ordering options for team repository connections
 */
export interface GQLTeamRepositoryOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order repositories by.
   */
  field: GQLTeamRepositoryOrderField;
}

/**
 * Properties by which team repository connections can be ordered.
 */
export enum GQLTeamRepositoryOrderField {
  
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order repositories by name
   */
  NAME = 'NAME',
  
  /**
   * Order repositories by permission
   */
  PERMISSION = 'PERMISSION',
  
  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',
  
  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS',
  
  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for Repository.
 */
export interface GQLTeamRepositoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLTeamRepositoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRepository | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a team repository.
 */
export interface GQLTeamRepositoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: GQLRepository;
  
  /**
   * The permission level the team has on the repository
   * 
   * **Upcoming Change on 2020-10-01 UTC**
   * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
   * **Reason:** This field may return additional values
   */
  permission: GQLRepositoryPermission;
}

/**
 * The access level to a repository
 */
export enum GQLRepositoryPermission {
  
  /**
   * Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators
   */
  ADMIN = 'ADMIN',
  
  /**
   * Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
   */
  MAINTAIN = 'MAINTAIN',
  
  /**
   * Can read and clone this repository. Can also open and comment on issues and pull requests
   */
  READ = 'READ',
  
  /**
   * Can read and clone this repository. Can also manage issues and pull requests
   */
  TRIAGE = 'TRIAGE',
  
  /**
   * Can read, clone, and push to this repository. Can also manage issues and pull requests
   */
  WRITE = 'WRITE'
}

/**
 * The connection type for ReviewDismissalAllowance.
 */
export interface GQLReviewDismissalAllowanceConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLReviewDismissalAllowanceEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLReviewDismissalAllowance | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLReviewDismissalAllowanceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLReviewDismissalAllowance;
}

/**
 * A team or user who has the ability to dismiss a review on a protected branch.
 */
export interface GQLReviewDismissalAllowance extends GQLNode {
  
  /**
   * The actor that can dismiss.
   */
  actor?: GQLReviewDismissalAllowanceActor;
  
  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule?: GQLBranchProtectionRule;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type GQLReviewDismissalAllowanceActor = GQLTeam | GQLUser;

/** Use this to resolve union type ReviewDismissalAllowanceActor */
export type GQLPossibleReviewDismissalAllowanceActorTypeNames = 'Team' | 'User';

export interface GQLReviewDismissalAllowanceActorNameMap {
  ReviewDismissalAllowanceActor: GQLReviewDismissalAllowanceActor;
  Team: GQLTeam;
  User: GQLUser;
}

/**
 * Collaborators affiliation level with a subject.
 */
export enum GQLCollaboratorAffiliation {
  
  /**
   * All collaborators the authenticated user can see.
   */
  ALL = 'ALL',
  
  /**
   * All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
   */
  DIRECT = 'DIRECT',
  
  /**
   * All outside collaborators of an organization-owned subject.
   */
  OUTSIDE = 'OUTSIDE'
}

/**
 * The connection type for User.
 */
export interface GQLRepositoryCollaboratorConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLRepositoryCollaboratorEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a collaborator of a repository.
 */
export interface GQLRepositoryCollaboratorEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: GQLUser;
  
  /**
   * The permission the user has on the repository.
   * 
   * **Upcoming Change on 2020-10-01 UTC**
   * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
   * **Reason:** This field may return additional values
   */
  permission: GQLRepositoryPermission;
  
  /**
   * A list of sources for the user's access to the repository.
   */
  permissionSources?: Array<GQLPermissionSource>;
}

/**
 * A level of permission and source for a user's access to a repository.
 */
export interface GQLPermissionSource {
  
  /**
   * The organization the repository belongs to.
   */
  organization: GQLOrganization;
  
  /**
   * The level of access this source has granted to the user.
   */
  permission: GQLDefaultRepositoryPermissionField;
  
  /**
   * The source of this permission.
   */
  source: GQLPermissionGranter;
}

/**
 * The possible default permissions for repositories.
 */
export enum GQLDefaultRepositoryPermissionField {
  
  /**
   * Can read, write, and administrate repos by default
   */
  ADMIN = 'ADMIN',
  
  /**
   * No access
   */
  NONE = 'NONE',
  
  /**
   * Can read repos by default
   */
  READ = 'READ',
  
  /**
   * Can read and write repos by default
   */
  WRITE = 'WRITE'
}

/**
 * Types that can grant permissions on a repository to a user
 */
export type GQLPermissionGranter = GQLOrganization | GQLRepository | GQLTeam;

/** Use this to resolve union type PermissionGranter */
export type GQLPossiblePermissionGranterTypeNames =
'Organization' |
'Repository' |
'Team';

export interface GQLPermissionGranterNameMap {
  PermissionGranter: GQLPermissionGranter;
  Organization: GQLOrganization;
  Repository: GQLRepository;
  Team: GQLTeam;
}

/**
 * The connection type for CommitComment.
 */
export interface GQLCommitCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCommitCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCommitComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCommitCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCommitComment;
}

/**
 * Represents a comment on a given Commit.
 */
export interface GQLCommitComment extends GQLComment, GQLDeletable, GQLMinimizable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * Identifies the comment body.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the commit associated with the comment, if the commit exists.
   */
  commit?: GQLCommit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies the file path associated with the comment.
   */
  path?: string;
  
  /**
   * Identifies the line position associated with the comment.
   */
  position?: number;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path permalink for this commit comment.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL permalink for this commit comment.
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * Entities that can be minimized.
 */
export interface GQLMinimizable {
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
}

/** Use this to resolve interface type Minimizable */
export type GQLPossibleMinimizableTypeNames =
'CommitComment' |
'IssueComment' |
'PullRequestReviewComment' |
'GistComment';

export interface GQLMinimizableNameMap {
  Minimizable: GQLMinimizable;
  CommitComment: GQLCommitComment;
  IssueComment: GQLIssueComment;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  GistComment: GQLGistComment;
}

/**
 * Represents a Git commit.
 */
export interface GQLCommit extends GQLGitObject, GQLNode, GQLSubscribable, GQLUniformResourceLocatable {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The number of additions in this commit.
   */
  additions: number;
  
  /**
   * The pull requests associated with a commit
   */
  associatedPullRequests?: GQLPullRequestConnection;
  
  /**
   * Authorship details of the commit.
   */
  author?: GQLGitActor;
  
  /**
   * Check if the committer and the author match.
   */
  authoredByCommitter: boolean;
  
  /**
   * The datetime when this commit was authored.
   */
  authoredDate: GQLDateTime;
  
  /**
   * Fetches `git blame` information.
   */
  blame: GQLBlame;
  
  /**
   * The number of changed files in this commit.
   */
  changedFiles: number;
  
  /**
   * Comments made on the commit.
   */
  comments: GQLCommitCommentConnection;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: GQLURI;
  
  /**
   * The datetime when this commit was committed.
   */
  committedDate: GQLDateTime;
  
  /**
   * Check if commited via GitHub web UI.
   */
  committedViaWeb: boolean;
  
  /**
   * Committership details of the commit.
   */
  committer?: GQLGitActor;
  
  /**
   * The number of deletions in this commit.
   */
  deletions: number;
  
  /**
   * The deployments associated with a commit.
   */
  deployments?: GQLDeploymentConnection;
  
  /**
   * The linear commit history starting from (and including) this commit, in the same order as `git log`.
   */
  history: GQLCommitHistoryConnection;
  id: string;
  
  /**
   * The Git commit message
   */
  message: string;
  
  /**
   * The Git commit message body
   */
  messageBody: string;
  
  /**
   * The commit message body rendered to HTML.
   */
  messageBodyHTML: GQLHTML;
  
  /**
   * The Git commit message headline
   */
  messageHeadline: string;
  
  /**
   * The commit message headline rendered to HTML.
   */
  messageHeadlineHTML: GQLHTML;
  
  /**
   * The Git object ID
   */
  oid: GQLGitObjectID;
  
  /**
   * The organization this commit was made on behalf of.
   */
  onBehalfOf?: GQLOrganization;
  
  /**
   * The parents of a commit.
   */
  parents: GQLCommitConnection;
  
  /**
   * The datetime when this commit was pushed.
   */
  pushedDate?: GQLDateTime;
  
  /**
   * The Repository this commit belongs to
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this commit
   */
  resourcePath: GQLURI;
  
  /**
   * Commit signing information, if present.
   */
  signature?: GQLGitSignature;
  
  /**
   * Status information for this commit
   */
  status?: GQLStatus;
  
  /**
   * Check and Status rollup information for this commit.
   */
  statusCheckRollup?: GQLStatusCheckRollup;
  
  /**
   * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
   */
  submodules: GQLSubmoduleConnection;
  
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: GQLURI;
  
  /**
   * Commit's root Tree
   */
  tree: GQLTree;
  
  /**
   * The HTTP path for the tree of this commit
   */
  treeResourcePath: GQLURI;
  
  /**
   * The HTTP URL for the tree of this commit
   */
  treeUrl: GQLURI;
  
  /**
   * The HTTP URL for this commit
   */
  url: GQLURI;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: GQLSubscriptionState;
  
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: GQLURI;
}

/**
 * Represents a Git object.
 */
export interface GQLGitObject {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: GQLURI;
  id: string;
  
  /**
   * The Git object ID
   */
  oid: GQLGitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: GQLRepository;
}

/** Use this to resolve interface type GitObject */
export type GQLPossibleGitObjectTypeNames = 'Commit' | 'Tree' | 'Blob' | 'Tag';

export interface GQLGitObjectNameMap {
  GitObject: GQLGitObject;
  Commit: GQLCommit;
  Tree: GQLTree;
  Blob: GQLBlob;
  Tag: GQLTag;
}

/**
 * A Git object ID.
 */
export type GQLGitObjectID = any;

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface GQLPullRequestOrder {
  
  /**
   * The direction in which to order pull requests by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order pull requests by.
   */
  field: GQLPullRequestOrderField;
}

/**
 * Properties by which pull_requests connections can be ordered.
 */
export enum GQLPullRequestOrderField {
  
  /**
   * Order pull_requests by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order pull_requests by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * Represents an actor in a Git commit (ie. an author or committer).
 */
export interface GQLGitActor {
  
  /**
   * A URL pointing to the author's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * The timestamp of the Git action (authoring or committing).
   */
  date?: GQLGitTimestamp;
  
  /**
   * The email in the Git commit.
   */
  email?: string;
  
  /**
   * The name in the Git commit.
   */
  name?: string;
  
  /**
   * The GitHub user corresponding to the email field. Null if no such user exists.
   */
  user?: GQLUser;
}

/**
 * An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
 */
export type GQLGitTimestamp = any;

/**
 * Represents a Git blame.
 */
export interface GQLBlame {
  
  /**
   * The list of ranges from a Git blame.
   */
  ranges: Array<GQLBlameRange>;
}

/**
 * Represents a range of information from a Git blame.
 */
export interface GQLBlameRange {
  
  /**
   * Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
   */
  age: number;
  
  /**
   * Identifies the line author
   */
  commit: GQLCommit;
  
  /**
   * The ending line for the range
   */
  endingLine: number;
  
  /**
   * The starting line for the range
   */
  startingLine: number;
}

/**
 * Ordering options for deployment connections
 */
export interface GQLDeploymentOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order deployments by.
   */
  field: GQLDeploymentOrderField;
}

/**
 * Properties by which deployment connections can be ordered.
 */
export enum GQLDeploymentOrderField {
  
  /**
   * Order collection by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for Deployment.
 */
export interface GQLDeploymentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLDeploymentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLDeployment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLDeploymentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLDeployment;
}

/**
 * Represents triggered deployment instance.
 */
export interface GQLDeployment extends GQLNode {
  
  /**
   * Identifies the commit sha of the deployment.
   */
  commit?: GQLCommit;
  
  /**
   * Identifies the oid of the deployment commit, even if the commit has been deleted.
   */
  commitOid: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: GQLActor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The deployment description.
   */
  description?: string;
  
  /**
   * The latest environment to which this deployment was made.
   */
  environment?: string;
  id: string;
  
  /**
   * The latest environment to which this deployment was made.
   */
  latestEnvironment?: string;
  
  /**
   * The latest status of this deployment.
   */
  latestStatus?: GQLDeploymentStatus;
  
  /**
   * The original environment to which this deployment was made.
   */
  originalEnvironment?: string;
  
  /**
   * Extra information that a deployment system might need.
   */
  payload?: string;
  
  /**
   * Identifies the Ref of the deployment, if the deployment was created by ref.
   */
  ref?: GQLRef;
  
  /**
   * Identifies the repository associated with the deployment.
   */
  repository: GQLRepository;
  
  /**
   * The current state of the deployment.
   */
  state?: GQLDeploymentState;
  
  /**
   * A list of statuses associated with the deployment.
   */
  statuses?: GQLDeploymentStatusConnection;
  
  /**
   * The deployment task.
   */
  task?: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * Describes the status of a given deployment attempt.
 */
export interface GQLDeploymentStatus extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: GQLActor;
  
  /**
   * Identifies the deployment associated with status.
   */
  deployment: GQLDeployment;
  
  /**
   * Identifies the description of the deployment.
   */
  description?: string;
  
  /**
   * Identifies the environment URL of the deployment.
   */
  environmentUrl?: GQLURI;
  id: string;
  
  /**
   * Identifies the log URL of the deployment.
   */
  logUrl?: GQLURI;
  
  /**
   * Identifies the current state of the deployment.
   */
  state: GQLDeploymentStatusState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * The possible states for a deployment status.
 */
export enum GQLDeploymentStatusState {
  
  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',
  
  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',
  
  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',
  
  /**
   * The deployment is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',
  
  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',
  
  /**
   * The deployment is queued
   */
  QUEUED = 'QUEUED',
  
  /**
   * The deployment was successful.
   */
  SUCCESS = 'SUCCESS'
}

/**
 * The possible states in which a deployment can be.
 */
export enum GQLDeploymentState {
  
  /**
   * The pending deployment was not updated after 30 minutes.
   */
  ABANDONED = 'ABANDONED',
  
  /**
   * The deployment is currently active.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * An inactive transient deployment.
   */
  DESTROYED = 'DESTROYED',
  
  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',
  
  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',
  
  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',
  
  /**
   * The deployment is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',
  
  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',
  
  /**
   * The deployment has queued
   */
  QUEUED = 'QUEUED'
}

/**
 * The connection type for DeploymentStatus.
 */
export interface GQLDeploymentStatusConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLDeploymentStatusEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLDeploymentStatus | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLDeploymentStatusEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLDeploymentStatus;
}

/**
 * Specifies an author for filtering Git commits.
 */
export interface GQLCommitAuthor {
  
  /**
   * Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
   */
  emails?: Array<string>;
  
  /**
   * ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
   */
  id?: string;
}

/**
 * The connection type for Commit.
 */
export interface GQLCommitHistoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCommitEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCommit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCommitEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCommit;
}

/**
 * The connection type for Commit.
 */
export interface GQLCommitConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCommitEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCommit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export interface GQLGitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: GQLUser;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GQLGitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/** Use this to resolve interface type GitSignature */
export type GQLPossibleGitSignatureTypeNames =
'GpgSignature' |
'SmimeSignature' |
'UnknownSignature';

export interface GQLGitSignatureNameMap {
  GitSignature: GQLGitSignature;
  GpgSignature: GQLGpgSignature;
  SmimeSignature: GQLSmimeSignature;
  UnknownSignature: GQLUnknownSignature;
}

/**
 * The state of a Git signature.
 */
export enum GQLGitSignatureState {
  
  /**
   * The signing certificate or its chain could not be verified
   */
  BAD_CERT = 'BAD_CERT',
  
  /**
   * Invalid email used for signing
   */
  BAD_EMAIL = 'BAD_EMAIL',
  
  /**
   * Signing key expired
   */
  EXPIRED_KEY = 'EXPIRED_KEY',
  
  /**
   * Internal error - the GPG verification service misbehaved
   */
  GPGVERIFY_ERROR = 'GPGVERIFY_ERROR',
  
  /**
   * Internal error - the GPG verification service is unavailable at the moment
   */
  GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE',
  
  /**
   * Invalid signature
   */
  INVALID = 'INVALID',
  
  /**
   * Malformed signature
   */
  MALFORMED_SIG = 'MALFORMED_SIG',
  
  /**
   * The usage flags for the key that signed this don't allow signing
   */
  NOT_SIGNING_KEY = 'NOT_SIGNING_KEY',
  
  /**
   * Email used for signing not known to GitHub
   */
  NO_USER = 'NO_USER',
  
  /**
   * Valid siganture, though certificate revocation check failed
   */
  OCSP_ERROR = 'OCSP_ERROR',
  
  /**
   * Valid signature, pending certificate revocation checking
   */
  OCSP_PENDING = 'OCSP_PENDING',
  
  /**
   * One or more certificates in chain has been revoked
   */
  OCSP_REVOKED = 'OCSP_REVOKED',
  
  /**
   * Key used for signing not known to GitHub
   */
  UNKNOWN_KEY = 'UNKNOWN_KEY',
  
  /**
   * Unknown signature type
   */
  UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE',
  
  /**
   * Unsigned
   */
  UNSIGNED = 'UNSIGNED',
  
  /**
   * Email used for signing unverified on GitHub
   */
  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',
  
  /**
   * Valid signature and verified by GitHub
   */
  VALID = 'VALID'
}

/**
 * Represents a commit status.
 */
export interface GQLStatus extends GQLNode {
  
  /**
   * The commit this status is attached to.
   */
  commit?: GQLCommit;
  
  /**
   * Looks up an individual status context by context name.
   */
  context?: GQLStatusContext;
  
  /**
   * The individual status contexts for this commit.
   */
  contexts: Array<GQLStatusContext>;
  id: string;
  
  /**
   * The combined commit status.
   */
  state: GQLStatusState;
}

/**
 * Represents an individual commit status context
 */
export interface GQLStatusContext extends GQLNode {
  
  /**
   * The avatar of the OAuth application or the user that created the status
   */
  avatarUrl?: GQLURI;
  
  /**
   * This commit this status context is attached to.
   */
  commit?: GQLCommit;
  
  /**
   * The name of this status context.
   */
  context: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The actor who created this status context.
   */
  creator?: GQLActor;
  
  /**
   * The description for this status context.
   */
  description?: string;
  id: string;
  
  /**
   * The state of this status context.
   */
  state: GQLStatusState;
  
  /**
   * The URL for this status context.
   */
  targetUrl?: GQLURI;
}

/**
 * The possible commit status states.
 */
export enum GQLStatusState {
  
  /**
   * Status is errored.
   */
  ERROR = 'ERROR',
  
  /**
   * Status is expected.
   */
  EXPECTED = 'EXPECTED',
  
  /**
   * Status is failing.
   */
  FAILURE = 'FAILURE',
  
  /**
   * Status is pending.
   */
  PENDING = 'PENDING',
  
  /**
   * Status is successful.
   */
  SUCCESS = 'SUCCESS'
}

/**
 * Represents the rollup for both the check runs and status for a commit.
 */
export interface GQLStatusCheckRollup extends GQLNode {
  
  /**
   * The commit the status and check runs are attached to.
   */
  commit?: GQLCommit;
  
  /**
   * A list of status contexts and check runs for this commit.
   */
  contexts: GQLStatusCheckRollupContextConnection;
  id: string;
  
  /**
   * The combined status for the commit.
   */
  state: GQLStatusState;
}

/**
 * The connection type for StatusCheckRollupContext.
 */
export interface GQLStatusCheckRollupContextConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLStatusCheckRollupContextEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLStatusCheckRollupContext | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLStatusCheckRollupContextEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLStatusCheckRollupContext;
}

/**
 * Types that can be inside a StatusCheckRollup context.
 */
export type GQLStatusCheckRollupContext = GQLStatusContext;

/** Use this to resolve union type StatusCheckRollupContext */
export type GQLPossibleStatusCheckRollupContextTypeNames = 'StatusContext';

export interface GQLStatusCheckRollupContextNameMap {
  StatusCheckRollupContext: GQLStatusCheckRollupContext;
  StatusContext: GQLStatusContext;
}

/**
 * The connection type for Submodule.
 */
export interface GQLSubmoduleConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSubmoduleEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSubmodule | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSubmoduleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSubmodule;
}

/**
 * A pointer to a repository at a specific revision embedded inside another repository.
 */
export interface GQLSubmodule {
  
  /**
   * The branch of the upstream submodule for tracking updates
   */
  branch?: string;
  
  /**
   * The git URL of the submodule repository
   */
  gitUrl: GQLURI;
  
  /**
   * The name of the submodule in .gitmodules
   */
  name: string;
  
  /**
   * The path in the superproject that this submodule is located in
   */
  path: string;
  
  /**
   * The commit revision of the subproject repository being tracked by the submodule
   */
  subprojectCommitOid?: GQLGitObjectID;
}

/**
 * Represents a Git tree.
 */
export interface GQLTree extends GQLGitObject, GQLNode {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: GQLURI;
  
  /**
   * A list of tree entries.
   */
  entries?: Array<GQLTreeEntry>;
  id: string;
  
  /**
   * The Git object ID
   */
  oid: GQLGitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: GQLRepository;
}

/**
 * Represents a Git tree entry.
 */
export interface GQLTreeEntry {
  
  /**
   * Entry file mode.
   */
  mode: number;
  
  /**
   * Entry file name.
   */
  name: string;
  
  /**
   * Entry file object.
   */
  object?: GQLGitObject;
  
  /**
   * Entry file Git object ID.
   */
  oid: GQLGitObjectID;
  
  /**
   * The Repository the tree entry belongs to
   */
  repository: GQLRepository;
  
  /**
   * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
   */
  submodule?: GQLSubmodule;
  
  /**
   * Entry file type.
   */
  type: string;
}

/**
 * The connection type for DeployKey.
 */
export interface GQLDeployKeyConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLDeployKeyEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLDeployKey | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLDeployKeyEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLDeployKey;
}

/**
 * A repository deploy key.
 */
export interface GQLDeployKey extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * The deploy key.
   */
  key: string;
  
  /**
   * Whether or not the deploy key is read only.
   */
  readOnly: boolean;
  
  /**
   * The deploy key title.
   */
  title: string;
  
  /**
   * Whether or not the deploy key has been verified.
   */
  verified: boolean;
}

/**
 * A funding platform link for a repository.
 */
export interface GQLFundingLink {
  
  /**
   * The funding platform this link is for.
   */
  platform: GQLFundingPlatform;
  
  /**
   * The configured URL for this funding link.
   */
  url: GQLURI;
}

/**
 * The possible funding platforms for repository funding links.
 */
export enum GQLFundingPlatform {
  
  /**
   * Community Bridge funding platform.
   */
  COMMUNITY_BRIDGE = 'COMMUNITY_BRIDGE',
  
  /**
   * Custom funding platform.
   */
  CUSTOM = 'CUSTOM',
  
  /**
   * GitHub funding platform.
   */
  GITHUB = 'GITHUB',
  
  /**
   * IssueHunt funding platform.
   */
  ISSUEHUNT = 'ISSUEHUNT',
  
  /**
   * Ko-fi funding platform.
   */
  KO_FI = 'KO_FI',
  
  /**
   * Liberapay funding platform.
   */
  LIBERAPAY = 'LIBERAPAY',
  
  /**
   * Open Collective funding platform.
   */
  OPEN_COLLECTIVE = 'OPEN_COLLECTIVE',
  
  /**
   * Otechie funding platform.
   */
  OTECHIE = 'OTECHIE',
  
  /**
   * Patreon funding platform.
   */
  PATREON = 'PATREON',
  
  /**
   * Tidelift funding platform.
   */
  TIDELIFT = 'TIDELIFT'
}

/**
 * Used for return value of Repository.issueOrPullRequest.
 */
export type GQLIssueOrPullRequest = GQLIssue | GQLPullRequest;

/** Use this to resolve union type IssueOrPullRequest */
export type GQLPossibleIssueOrPullRequestTypeNames = 'Issue' | 'PullRequest';

export interface GQLIssueOrPullRequestNameMap {
  IssueOrPullRequest: GQLIssueOrPullRequest;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

/**
 * Ordering options for language connections.
 */
export interface GQLLanguageOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order languages by.
   */
  field: GQLLanguageOrderField;
}

/**
 * Properties by which language connections can be ordered.
 */
export enum GQLLanguageOrderField {
  
  /**
   * Order languages by the size of all files containing the language
   */
  SIZE = 'SIZE'
}

/**
 * A list of languages associated with the parent.
 */
export interface GQLLanguageConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLLanguageEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLLanguage | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * The total size in bytes of files written in that language.
   */
  totalSize: number;
}

/**
 * Represents the language of a repository.
 */
export interface GQLLanguageEdge {
  cursor: string;
  node: GQLLanguage;
  
  /**
   * The number of bytes of code written in the language.
   */
  size: number;
}

/**
 * Represents a given language found in repositories.
 */
export interface GQLLanguage extends GQLNode {
  
  /**
   * The color defined for the current language.
   */
  color?: string;
  id: string;
  
  /**
   * The name of the current language.
   */
  name: string;
}

/**
 * Represents a Milestone object on a given repository.
 */
export interface GQLMilestone extends GQLClosable, GQLNode, GQLUniformResourceLocatable {
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: GQLDateTime;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the actor who created the milestone.
   */
  creator?: GQLActor;
  
  /**
   * Identifies the description of the milestone.
   */
  description?: string;
  
  /**
   * Identifies the due date of the milestone.
   */
  dueOn?: GQLDateTime;
  id: string;
  
  /**
   * Just for debugging on review-lab
   */
  issuePrioritiesDebug: string;
  
  /**
   * A list of issues associated with the milestone.
   */
  issues: GQLIssueConnection;
  
  /**
   * Identifies the number of the milestone.
   */
  number: number;
  
  /**
   * A list of pull requests associated with the milestone.
   */
  pullRequests: GQLPullRequestConnection;
  
  /**
   * The repository associated with this milestone.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this milestone
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the state of the milestone.
   */
  state: GQLMilestoneState;
  
  /**
   * Identifies the title of the milestone.
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this milestone
   */
  url: GQLURI;
}

/**
 * The possible states of a milestone.
 */
export enum GQLMilestoneState {
  
  /**
   * A milestone that has been closed.
   */
  CLOSED = 'CLOSED',
  
  /**
   * A milestone that is still open.
   */
  OPEN = 'OPEN'
}

/**
 * Ordering options for milestone connections.
 */
export interface GQLMilestoneOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order milestones by.
   */
  field: GQLMilestoneOrderField;
}

/**
 * Properties by which milestone connections can be ordered.
 */
export enum GQLMilestoneOrderField {
  
  /**
   * Order milestones by when they were created.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order milestones by when they are due.
   */
  DUE_DATE = 'DUE_DATE',
  
  /**
   * Order milestones by their number.
   */
  NUMBER = 'NUMBER',
  
  /**
   * Order milestones by when they were last updated.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for Milestone.
 */
export interface GQLMilestoneConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLMilestoneEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLMilestone | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLMilestoneEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLMilestone;
}

/**
 * Ways in which lists of git refs can be ordered upon return.
 */
export interface GQLRefOrder {
  
  /**
   * The direction in which to order refs by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order refs by.
   */
  field: GQLRefOrderField;
}

/**
 * Properties by which ref connections can be ordered.
 */
export enum GQLRefOrderField {
  
  /**
   * Order refs by their alphanumeric name
   */
  ALPHABETICAL = 'ALPHABETICAL',
  
  /**
   * Order refs by underlying commit date if the ref prefix is refs/tags/
   */
  TAG_COMMIT_DATE = 'TAG_COMMIT_DATE'
}

/**
 * Ways in which lists of releases can be ordered upon return.
 */
export interface GQLReleaseOrder {
  
  /**
   * The direction in which to order releases by the specified field.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field in which to order releases by.
   */
  field: GQLReleaseOrderField;
}

/**
 * Properties by which release connections can be ordered.
 */
export enum GQLReleaseOrderField {
  
  /**
   * Order releases by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order releases alphabetically by name
   */
  NAME = 'NAME'
}

/**
 * The connection type for Release.
 */
export interface GQLReleaseConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLReleaseEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRelease | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLReleaseEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLRelease;
}

/**
 * The connection type for RepositoryTopic.
 */
export interface GQLRepositoryTopicConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLRepositoryTopicEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRepositoryTopic | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLRepositoryTopicEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLRepositoryTopic;
}

/**
 * A repository-topic connects a repository to a topic.
 */
export interface GQLRepositoryTopic extends GQLNode, GQLUniformResourceLocatable {
  id: string;
  
  /**
   * The HTTP path for this repository-topic.
   */
  resourcePath: GQLURI;
  
  /**
   * The topic.
   */
  topic: GQLTopic;
  
  /**
   * The HTTP URL for this repository-topic.
   */
  url: GQLURI;
}

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface GQLTopic extends GQLNode, GQLStarrable {
  id: string;
  
  /**
   * The topic's name.
   */
  name: string;
  
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   */
  relatedTopics: Array<GQLTopic>;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: GQLStargazerConnection;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

/**
 * Git SSH string
 */
export type GQLGitSSHRemote = any;

/**
 * The connection type for RepositoryVulnerabilityAlert.
 */
export interface GQLRepositoryVulnerabilityAlertConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLRepositoryVulnerabilityAlertEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRepositoryVulnerabilityAlert | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLRepositoryVulnerabilityAlertEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLRepositoryVulnerabilityAlert;
}

/**
 * A alert for a repository with an affected vulnerability.
 */
export interface GQLRepositoryVulnerabilityAlert extends GQLNode, GQLRepositoryNode {
  
  /**
   * When was the alert created?
   */
  createdAt: GQLDateTime;
  
  /**
   * The reason the alert was dismissed
   */
  dismissReason?: string;
  
  /**
   * When was the alert dimissed?
   */
  dismissedAt?: GQLDateTime;
  
  /**
   * The user who dismissed the alert
   */
  dismisser?: GQLUser;
  id: string;
  
  /**
   * The associated repository
   */
  repository: GQLRepository;
  
  /**
   * The associated security advisory
   */
  securityAdvisory?: GQLSecurityAdvisory;
  
  /**
   * The associated security vulnerablity
   */
  securityVulnerability?: GQLSecurityVulnerability;
  
  /**
   * The vulnerable manifest filename
   */
  vulnerableManifestFilename: string;
  
  /**
   * The vulnerable manifest path
   */
  vulnerableManifestPath: string;
  
  /**
   * The vulnerable requirements
   */
  vulnerableRequirements?: string;
}

/**
 * A GitHub Security Advisory
 */
export interface GQLSecurityAdvisory extends GQLNode {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * This is a long plaintext description of the advisory
   */
  description: string;
  
  /**
   * The GitHub Security Advisory ID
   */
  ghsaId: string;
  id: string;
  
  /**
   * A list of identifiers for this advisory
   */
  identifiers: Array<GQLSecurityAdvisoryIdentifier>;
  
  /**
   * The organization that originated the advisory
   */
  origin: string;
  
  /**
   * The permalink for the advisory
   */
  permalink?: GQLURI;
  
  /**
   * When the advisory was published
   */
  publishedAt: GQLDateTime;
  
  /**
   * A list of references for this advisory
   */
  references: Array<GQLSecurityAdvisoryReference>;
  
  /**
   * The severity of the advisory
   */
  severity: GQLSecurityAdvisorySeverity;
  
  /**
   * A short plaintext summary of the advisory
   */
  summary: string;
  
  /**
   * When the advisory was last updated
   */
  updatedAt: GQLDateTime;
  
  /**
   * Vulnerabilities associated with this Advisory
   */
  vulnerabilities: GQLSecurityVulnerabilityConnection;
  
  /**
   * When the advisory was withdrawn, if it has been withdrawn
   */
  withdrawnAt?: GQLDateTime;
}

/**
 * A GitHub Security Advisory Identifier
 */
export interface GQLSecurityAdvisoryIdentifier {
  
  /**
   * The identifier type, e.g. GHSA, CVE
   */
  type: string;
  
  /**
   * The identifier
   */
  value: string;
}

/**
 * A GitHub Security Advisory Reference
 */
export interface GQLSecurityAdvisoryReference {
  
  /**
   * A publicly accessible reference
   */
  url: GQLURI;
}

/**
 * Severity of the vulnerability.
 */
export enum GQLSecurityAdvisorySeverity {
  
  /**
   * Critical.
   */
  CRITICAL = 'CRITICAL',
  
  /**
   * High.
   */
  HIGH = 'HIGH',
  
  /**
   * Low.
   */
  LOW = 'LOW',
  
  /**
   * Moderate.
   */
  MODERATE = 'MODERATE'
}

/**
 * The possible ecosystems of a security vulnerability's package.
 */
export enum GQLSecurityAdvisoryEcosystem {
  
  /**
   * PHP packages hosted at packagist.org
   */
  COMPOSER = 'COMPOSER',
  
  /**
   * Java artifacts hosted at the Maven central repository
   */
  MAVEN = 'MAVEN',
  
  /**
   * JavaScript packages hosted at npmjs.com
   */
  NPM = 'NPM',
  
  /**
   * .NET packages hosted at the NuGet Gallery
   */
  NUGET = 'NUGET',
  
  /**
   * Python packages hosted at PyPI.org
   */
  PIP = 'PIP',
  
  /**
   * Ruby gems hosted at RubyGems.org
   */
  RUBYGEMS = 'RUBYGEMS'
}

/**
 * Ordering options for security vulnerability connections
 */
export interface GQLSecurityVulnerabilityOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order security vulnerabilities by.
   */
  field: GQLSecurityVulnerabilityOrderField;
}

/**
 * Properties by which security vulnerability connections can be ordered.
 */
export enum GQLSecurityVulnerabilityOrderField {
  
  /**
   * Order vulnerability by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for SecurityVulnerability.
 */
export interface GQLSecurityVulnerabilityConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSecurityVulnerabilityEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSecurityVulnerability | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSecurityVulnerabilityEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSecurityVulnerability;
}

/**
 * An individual vulnerability within an Advisory
 */
export interface GQLSecurityVulnerability {
  
  /**
   * The Advisory associated with this Vulnerability
   */
  advisory: GQLSecurityAdvisory;
  
  /**
   * The first version containing a fix for the vulnerability
   */
  firstPatchedVersion?: GQLSecurityAdvisoryPackageVersion;
  
  /**
   * A description of the vulnerable package
   */
  package: GQLSecurityAdvisoryPackage;
  
  /**
   * The severity of the vulnerability within this package
   */
  severity: GQLSecurityAdvisorySeverity;
  
  /**
   * When the vulnerability was last updated
   */
  updatedAt: GQLDateTime;
  
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   */
  vulnerableVersionRange: string;
}

/**
 * An individual package version
 */
export interface GQLSecurityAdvisoryPackageVersion {
  
  /**
   * The package name or version
   */
  identifier: string;
}

/**
 * An individual package
 */
export interface GQLSecurityAdvisoryPackage {
  
  /**
   * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
   */
  ecosystem: GQLSecurityAdvisoryEcosystem;
  
  /**
   * The package name
   */
  name: string;
}

/**
 * The connection type for IssueComment.
 */
export interface GQLIssueCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLIssueCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLIssueComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLIssueCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLIssueComment;
}

/**
 * Represents a comment on an Issue.
 */
export interface GQLIssueComment extends GQLComment, GQLDeletable, GQLMinimizable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * Identifies the issue associated with the comment.
   */
  issue: GQLIssue;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   */
  pullRequest?: GQLPullRequest;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this issue comment
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this issue comment
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * Detail needed to display a hovercard for a user
 */
export interface GQLHovercard {
  
  /**
   * Each of the contexts for this hovercard
   */
  contexts: Array<GQLHovercardContext>;
}

/**
 * An individual line of a hovercard
 */
export interface GQLHovercardContext {
  
  /**
   * A string describing this context
   */
  message: string;
  
  /**
   * An octicon to accompany this context
   */
  octicon: string;
}

/** Use this to resolve interface type HovercardContext */
export type GQLPossibleHovercardContextTypeNames =
'GenericHovercardContext' |
'OrganizationTeamsHovercardContext' |
'OrganizationsHovercardContext' |
'ReviewStatusHovercardContext' |
'ViewerHovercardContext';

export interface GQLHovercardContextNameMap {
  HovercardContext: GQLHovercardContext;
  GenericHovercardContext: GQLGenericHovercardContext;
  OrganizationTeamsHovercardContext: GQLOrganizationTeamsHovercardContext;
  OrganizationsHovercardContext: GQLOrganizationsHovercardContext;
  ReviewStatusHovercardContext: GQLReviewStatusHovercardContext;
  ViewerHovercardContext: GQLViewerHovercardContext;
}

/**
 * The connection type for IssueTimelineItem.
 */
export interface GQLIssueTimelineConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLIssueTimelineItemEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLIssueTimelineItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLIssueTimelineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLIssueTimelineItem;
}

/**
 * An item in an issue timeline
 */
export type GQLIssueTimelineItem =
GQLAssignedEvent |
GQLClosedEvent |
GQLCommit |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMilestonedEvent |
GQLReferencedEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLSubscribedEvent |
GQLTransferredEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnsubscribedEvent |
GQLUserBlockedEvent;

/** Use this to resolve union type IssueTimelineItem */
export type GQLPossibleIssueTimelineItemTypeNames =
'AssignedEvent' |
'ClosedEvent' |
'Commit' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MilestonedEvent' |
'ReferencedEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent' |
'UserBlockedEvent';

export interface GQLIssueTimelineItemNameMap {
  IssueTimelineItem: GQLIssueTimelineItem;
  AssignedEvent: GQLAssignedEvent;
  ClosedEvent: GQLClosedEvent;
  Commit: GQLCommit;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  ReferencedEvent: GQLReferencedEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
  UserBlockedEvent: GQLUserBlockedEvent;
}

/**
 * Represents an 'assigned' event on any assignable object.
 */
export interface GQLAssignedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the assignable associated with the event.
   */
  assignable: GQLAssignable;
  
  /**
   * Identifies the user or mannequin that was assigned.
   */
  assignee?: GQLAssignee;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the user who was assigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  user?: GQLUser;
}

/**
 * Types that can be assigned to issues.
 */
export type GQLAssignee = GQLBot | GQLMannequin | GQLOrganization | GQLUser;

/** Use this to resolve union type Assignee */
export type GQLPossibleAssigneeTypeNames =
'Bot' |
'Mannequin' |
'Organization' |
'User';

export interface GQLAssigneeNameMap {
  Assignee: GQLAssignee;
  Bot: GQLBot;
  Mannequin: GQLMannequin;
  Organization: GQLOrganization;
  User: GQLUser;
}

/**
 * A special type of user which takes actions on behalf of GitHub Apps.
 */
export interface GQLBot extends GQLActor, GQLNode, GQLUniformResourceLocatable {
  
  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The username of the actor.
   */
  login: string;
  
  /**
   * The HTTP path for this bot
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this bot
   */
  url: GQLURI;
}

/**
 * A placeholder user for attribution of imported data on GitHub.
 */
export interface GQLMannequin extends GQLActor, GQLNode, GQLUniformResourceLocatable {
  
  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: GQLURI;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The mannequin's email on the source instance.
   */
  email?: string;
  id: string;
  
  /**
   * The username of the actor.
   */
  login: string;
  
  /**
   * The HTML path to this resource.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The URL to this resource.
   */
  url: GQLURI;
}

/**
 * Represents a 'closed' event on any `Closable`.
 */
export interface GQLClosedEvent extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Object that was closed.
   */
  closable: GQLClosable;
  
  /**
   * Object which triggered the creation of this event.
   */
  closer?: GQLCloser;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * The HTTP path for this closed event.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this closed event.
   */
  url: GQLURI;
}

/**
 * The object which triggered a `ClosedEvent`.
 */
export type GQLCloser = GQLCommit | GQLPullRequest;

/** Use this to resolve union type Closer */
export type GQLPossibleCloserTypeNames = 'Commit' | 'PullRequest';

export interface GQLCloserNameMap {
  Closer: GQLCloser;
  Commit: GQLCommit;
  PullRequest: GQLPullRequest;
}

/**
 * Represents a mention made by one issue or pull request to another.
 */
export interface GQLCrossReferencedEvent extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;
  
  /**
   * Identifies when the reference was made.
   */
  referencedAt: GQLDateTime;
  
  /**
   * The HTTP path for this pull request.
   */
  resourcePath: GQLURI;
  
  /**
   * Issue or pull request that made the reference.
   */
  source: GQLReferencedSubject;
  
  /**
   * Issue or pull request to which the reference was made.
   */
  target: GQLReferencedSubject;
  
  /**
   * The HTTP URL for this pull request.
   */
  url: GQLURI;
  
  /**
   * Checks if the target will be closed when the source is merged.
   */
  willCloseTarget: boolean;
}

/**
 * Any referencable object
 */
export type GQLReferencedSubject = GQLIssue | GQLPullRequest;

/** Use this to resolve union type ReferencedSubject */
export type GQLPossibleReferencedSubjectTypeNames = 'Issue' | 'PullRequest';

export interface GQLReferencedSubjectNameMap {
  ReferencedSubject: GQLReferencedSubject;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
export interface GQLDemilestonedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the milestone title associated with the 'demilestoned' event.
   */
  milestoneTitle: string;
  
  /**
   * Object referenced by event.
   */
  subject: GQLMilestoneItem;
}

/**
 * Types that can be inside a Milestone.
 */
export type GQLMilestoneItem = GQLIssue | GQLPullRequest;

/** Use this to resolve union type MilestoneItem */
export type GQLPossibleMilestoneItemTypeNames = 'Issue' | 'PullRequest';

export interface GQLMilestoneItemNameMap {
  MilestoneItem: GQLMilestoneItem;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
export interface GQLLabeledEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the label associated with the 'labeled' event.
   */
  label: GQLLabel;
  
  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: GQLLabelable;
}

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
export interface GQLLockedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Reason that the conversation was locked (optional).
   */
  lockReason?: GQLLockReason;
  
  /**
   * Object that was locked.
   */
  lockable: GQLLockable;
}

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
export interface GQLMilestonedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the milestone title associated with the 'milestoned' event.
   */
  milestoneTitle: string;
  
  /**
   * Object referenced by event.
   */
  subject: GQLMilestoneItem;
}

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
export interface GQLReferencedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the commit associated with the 'referenced' event.
   */
  commit?: GQLCommit;
  
  /**
   * Identifies the repository associated with the 'referenced' event.
   */
  commitRepository: GQLRepository;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;
  
  /**
   * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
   */
  isDirectReference: boolean;
  
  /**
   * Object referenced by event.
   */
  subject: GQLReferencedSubject;
}

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
export interface GQLRenamedTitleEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the current title of the issue or pull request.
   */
  currentTitle: string;
  id: string;
  
  /**
   * Identifies the previous title of the issue or pull request.
   */
  previousTitle: string;
  
  /**
   * Subject that was renamed.
   */
  subject: GQLRenamedTitleSubject;
}

/**
 * An object which has a renamable title
 */
export type GQLRenamedTitleSubject = GQLIssue | GQLPullRequest;

/** Use this to resolve union type RenamedTitleSubject */
export type GQLPossibleRenamedTitleSubjectTypeNames = 'Issue' | 'PullRequest';

export interface GQLRenamedTitleSubjectNameMap {
  RenamedTitleSubject: GQLRenamedTitleSubject;
  Issue: GQLIssue;
  PullRequest: GQLPullRequest;
}

/**
 * Represents a 'reopened' event on any `Closable`.
 */
export interface GQLReopenedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Object that was reopened.
   */
  closable: GQLClosable;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
}

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
export interface GQLSubscribedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Object referenced by event.
   */
  subscribable: GQLSubscribable;
}

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
export interface GQLTransferredEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The repository this came from
   */
  fromRepository?: GQLRepository;
  id: string;
  
  /**
   * Identifies the issue associated with the event.
   */
  issue: GQLIssue;
}

/**
 * Represents an 'unassigned' event on any assignable object.
 */
export interface GQLUnassignedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the assignable associated with the event.
   */
  assignable: GQLAssignable;
  
  /**
   * Identifies the user or mannequin that was unassigned.
   */
  assignee?: GQLAssignee;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the subject (user) who was unassigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  user?: GQLUser;
}

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
export interface GQLUnlabeledEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the label associated with the 'unlabeled' event.
   */
  label: GQLLabel;
  
  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: GQLLabelable;
}

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
export interface GQLUnlockedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Object that was unlocked.
   */
  lockable: GQLLockable;
}

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
export interface GQLUnsubscribedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Object referenced by event.
   */
  subscribable: GQLSubscribable;
}

/**
 * Represents a 'user_blocked' event on a given user.
 */
export interface GQLUserBlockedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Number of days that the user was blocked for.
   */
  blockDuration: GQLUserBlockDuration;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * The user who was blocked.
   */
  subject?: GQLUser;
}

/**
 * The possible durations that a user can be blocked for.
 */
export enum GQLUserBlockDuration {
  
  /**
   * The user was blocked for 1 day
   */
  ONE_DAY = 'ONE_DAY',
  
  /**
   * The user was blocked for 30 days
   */
  ONE_MONTH = 'ONE_MONTH',
  
  /**
   * The user was blocked for 7 days
   */
  ONE_WEEK = 'ONE_WEEK',
  
  /**
   * The user was blocked permanently
   */
  PERMANENT = 'PERMANENT',
  
  /**
   * The user was blocked for 3 days
   */
  THREE_DAYS = 'THREE_DAYS'
}

/**
 * The possible item types found in a timeline.
 */
export enum GQLIssueTimelineItemsItemType {
  
  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  
  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  
  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',
  
  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  
  /**
   * Represents a 'connected' event on a given issue or pull request.
   */
  CONNECTED_EVENT = 'CONNECTED_EVENT',
  
  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  
  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  
  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  
  /**
   * Represents a 'disconnected' event on a given issue or pull request.
   */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',
  
  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  
  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',
  
  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',
  
  /**
   * Represents a 'marked_as_duplicate' event on a given issue or pull request.
   */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',
  
  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  
  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  
  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  
  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',
  
  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  
  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  
  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  
  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',
  
  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  
  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  
  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  
  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  
  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  
  /**
   * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
   */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',
  
  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',
  
  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT',
  
  /**
   * Represents a 'user_blocked' event on a given user.
   */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT'
}

/**
 * The connection type for IssueTimelineItems.
 */
export interface GQLIssueTimelineItemsConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLIssueTimelineItemsEdge | null>;
  
  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: number;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLIssueTimelineItems | null>;
  
  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: number;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * An edge in a connection.
 */
export interface GQLIssueTimelineItemsEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLIssueTimelineItems;
}

/**
 * An item in an issue timeline
 */
export type GQLIssueTimelineItems =
GQLAddedToProjectEvent |
GQLAssignedEvent |
GQLClosedEvent |
GQLCommentDeletedEvent |
GQLConnectedEvent |
GQLConvertedNoteToIssueEvent |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLDisconnectedEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMarkedAsDuplicateEvent |
GQLMentionedEvent |
GQLMilestonedEvent |
GQLMovedColumnsInProjectEvent |
GQLPinnedEvent |
GQLReferencedEvent |
GQLRemovedFromProjectEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLSubscribedEvent |
GQLTransferredEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnmarkedAsDuplicateEvent |
GQLUnpinnedEvent |
GQLUnsubscribedEvent |
GQLUserBlockedEvent;

/** Use this to resolve union type IssueTimelineItems */
export type GQLPossibleIssueTimelineItemsTypeNames =
'AddedToProjectEvent' |
'AssignedEvent' |
'ClosedEvent' |
'CommentDeletedEvent' |
'ConnectedEvent' |
'ConvertedNoteToIssueEvent' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'DisconnectedEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MarkedAsDuplicateEvent' |
'MentionedEvent' |
'MilestonedEvent' |
'MovedColumnsInProjectEvent' |
'PinnedEvent' |
'ReferencedEvent' |
'RemovedFromProjectEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnmarkedAsDuplicateEvent' |
'UnpinnedEvent' |
'UnsubscribedEvent' |
'UserBlockedEvent';

export interface GQLIssueTimelineItemsNameMap {
  IssueTimelineItems: GQLIssueTimelineItems;
  AddedToProjectEvent: GQLAddedToProjectEvent;
  AssignedEvent: GQLAssignedEvent;
  ClosedEvent: GQLClosedEvent;
  CommentDeletedEvent: GQLCommentDeletedEvent;
  ConnectedEvent: GQLConnectedEvent;
  ConvertedNoteToIssueEvent: GQLConvertedNoteToIssueEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  DisconnectedEvent: GQLDisconnectedEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MarkedAsDuplicateEvent: GQLMarkedAsDuplicateEvent;
  MentionedEvent: GQLMentionedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  MovedColumnsInProjectEvent: GQLMovedColumnsInProjectEvent;
  PinnedEvent: GQLPinnedEvent;
  ReferencedEvent: GQLReferencedEvent;
  RemovedFromProjectEvent: GQLRemovedFromProjectEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnmarkedAsDuplicateEvent: GQLUnmarkedAsDuplicateEvent;
  UnpinnedEvent: GQLUnpinnedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
  UserBlockedEvent: GQLUserBlockedEvent;
}

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
export interface GQLAddedToProjectEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
export interface GQLCommentDeletedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'connected' event on a given issue or pull request.
 */
export interface GQLConnectedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;
  
  /**
   * Issue or pull request that made the reference.
   */
  source: GQLReferencedSubject;
  
  /**
   * Issue or pull request which was connected.
   */
  subject: GQLReferencedSubject;
}

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
export interface GQLConvertedNoteToIssueEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
export interface GQLDisconnectedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;
  
  /**
   * Issue or pull request from which the issue was disconnected.
   */
  source: GQLReferencedSubject;
  
  /**
   * Issue or pull request which was disconnected.
   */
  subject: GQLReferencedSubject;
}

/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
export interface GQLMarkedAsDuplicateEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
}

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
export interface GQLMentionedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
export interface GQLMovedColumnsInProjectEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
export interface GQLPinnedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the issue associated with the event.
   */
  issue: GQLIssue;
}

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
export interface GQLRemovedFromProjectEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
export interface GQLUnmarkedAsDuplicateEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
}

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
export interface GQLUnpinnedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the issue associated with the event.
   */
  issue: GQLIssue;
}

/**
 * The connection type for PullRequestCommit.
 */
export interface GQLPullRequestCommitConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestCommitEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestCommit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestCommitEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestCommit;
}

/**
 * Represents a Git commit part of a pull request.
 */
export interface GQLPullRequestCommit extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * The Git commit object
   */
  commit: GQLCommit;
  id: string;
  
  /**
   * The pull request this commit belongs to
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The HTTP path for this pull request commit
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this pull request commit
   */
  url: GQLURI;
}

/**
 * The connection type for PullRequestChangedFile.
 */
export interface GQLPullRequestChangedFileConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestChangedFileEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestChangedFile | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestChangedFileEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestChangedFile;
}

/**
 * A file changed in a pull request.
 */
export interface GQLPullRequestChangedFile {
  
  /**
   * The number of additions to the file.
   */
  additions: number;
  
  /**
   * The number of deletions to the file.
   */
  deletions: number;
  
  /**
   * The path of the file.
   */
  path: string;
}

/**
 * Whether or not a PullRequest can be merged.
 */
export enum GQLMergeableState {
  
  /**
   * The pull request cannot be merged due to merge conflicts.
   */
  CONFLICTING = 'CONFLICTING',
  
  /**
   * The pull request can be merged.
   */
  MERGEABLE = 'MERGEABLE',
  
  /**
   * The mergeability of the pull request is still being calculated.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * The review status of a pull request.
 */
export enum GQLPullRequestReviewDecision {
  
  /**
   * The pull request has received an approving review.
   */
  APPROVED = 'APPROVED',
  
  /**
   * Changes have been requested on the pull request.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',
  
  /**
   * A review is required before the pull request can be merged.
   */
  REVIEW_REQUIRED = 'REVIEW_REQUIRED'
}

/**
 * The connection type for ReviewRequest.
 */
export interface GQLReviewRequestConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLReviewRequestEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLReviewRequest | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLReviewRequestEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLReviewRequest;
}

/**
 * A request for a user to review a pull request.
 */
export interface GQLReviewRequest extends GQLNode {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * Identifies the pull request associated with this review request.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The reviewer that is requested.
   */
  requestedReviewer?: GQLRequestedReviewer;
}

/**
 * Types that can be requested reviewers.
 */
export type GQLRequestedReviewer = GQLMannequin | GQLTeam | GQLUser;

/** Use this to resolve union type RequestedReviewer */
export type GQLPossibleRequestedReviewerTypeNames =
'Mannequin' |
'Team' |
'User';

export interface GQLRequestedReviewerNameMap {
  RequestedReviewer: GQLRequestedReviewer;
  Mannequin: GQLMannequin;
  Team: GQLTeam;
  User: GQLUser;
}

/**
 * Review comment threads for a pull request review.
 */
export interface GQLPullRequestReviewThreadConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestReviewThreadEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestReviewThread | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestReviewThreadEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestReviewThread;
}

/**
 * A threaded list of comments for a given pull request.
 */
export interface GQLPullRequestReviewThread extends GQLNode {
  
  /**
   * A list of pull request comments associated with the thread.
   */
  comments: GQLPullRequestReviewCommentConnection;
  
  /**
   * The side of the diff on which this thread was placed.
   */
  diffSide: GQLDiffSide;
  id: string;
  
  /**
   * Whether this thread has been resolved
   */
  isResolved: boolean;
  
  /**
   * The line in the file to which this thread refers
   */
  line?: number;
  
  /**
   * The original line in the file to which this thread refers.
   */
  originalLine?: number;
  
  /**
   * The original start line in the file to which this thread refers (multi-line only).
   */
  originalStartLine?: number;
  
  /**
   * Identifies the pull request associated with this thread.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * Identifies the repository associated with this thread.
   */
  repository: GQLRepository;
  
  /**
   * The user who resolved this thread
   */
  resolvedBy?: GQLUser;
  
  /**
   * The side of the diff that the first line of the thread starts on (multi-line only)
   */
  startDiffSide?: GQLDiffSide;
  
  /**
   * The start line in the file to which this thread refers (multi-line only)
   */
  startLine?: number;
  
  /**
   * Whether or not the viewer can resolve this thread
   */
  viewerCanResolve: boolean;
  
  /**
   * Whether or not the viewer can unresolve this thread
   */
  viewerCanUnresolve: boolean;
}

/**
 * The connection type for PullRequestReviewComment.
 */
export interface GQLPullRequestReviewCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestReviewCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestReviewComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestReviewCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestReviewComment;
}

/**
 * A review comment associated with a given repository pull request.
 */
export interface GQLPullRequestReviewComment extends GQLComment, GQLDeletable, GQLMinimizable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * The comment body of this review comment.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The comment body of this review comment rendered as plain text.
   */
  bodyText: string;
  
  /**
   * Identifies the commit associated with the comment.
   */
  commit?: GQLCommit;
  
  /**
   * Identifies when the comment was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The diff hunk to which the comment applies.
   */
  diffHunk: string;
  
  /**
   * Identifies when the comment was created in a draft state.
   */
  draftedAt: GQLDateTime;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies the original commit associated with the comment.
   */
  originalCommit?: GQLCommit;
  
  /**
   * The original line index in the diff to which the comment applies.
   */
  originalPosition: number;
  
  /**
   * Identifies when the comment body is outdated
   */
  outdated: boolean;
  
  /**
   * The path to which the comment applies.
   */
  path: string;
  
  /**
   * The line index in the diff to which the comment applies.
   */
  position?: number;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * The pull request associated with this review comment.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The pull request review associated with this review comment.
   */
  pullRequestReview?: GQLPullRequestReview;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The comment this is a reply to.
   */
  replyTo?: GQLPullRequestReviewComment;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path permalink for this review comment.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the state of the comment.
   */
  state: GQLPullRequestReviewCommentState;
  
  /**
   * Identifies when the comment was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL permalink for this review comment.
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * A review object for a given pull request.
 */
export interface GQLPullRequestReview extends GQLComment, GQLDeletable, GQLNode, GQLReactable, GQLRepositoryNode, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * Identifies the pull request review body.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body of this review rendered as plain text.
   */
  bodyText: string;
  
  /**
   * A list of review comments for the current pull request review.
   */
  comments: GQLPullRequestReviewCommentConnection;
  
  /**
   * Identifies the commit associated with this pull request review.
   */
  commit?: GQLCommit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * A list of teams that this review was made on behalf of.
   */
  onBehalfOf: GQLTeamConnection;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * Identifies the pull request associated with this pull request review.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<GQLReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: GQLReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path permalink for this PullRequestReview.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the current state of the pull request review.
   */
  state: GQLPullRequestReviewState;
  
  /**
   * Identifies when the Pull Request Review was submitted
   */
  submittedAt?: GQLDateTime;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL permalink for this PullRequestReview.
   */
  url: GQLURI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * The possible states of a pull request review.
 */
export enum GQLPullRequestReviewState {
  
  /**
   * A review allowing the pull request to merge.
   */
  APPROVED = 'APPROVED',
  
  /**
   * A review blocking the pull request from merging.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',
  
  /**
   * An informational review.
   */
  COMMENTED = 'COMMENTED',
  
  /**
   * A review that has been dismissed.
   */
  DISMISSED = 'DISMISSED',
  
  /**
   * A review that has not yet been submitted.
   */
  PENDING = 'PENDING'
}

/**
 * The possible states of a pull request review comment.
 */
export enum GQLPullRequestReviewCommentState {
  
  /**
   * A comment that is part of a pending review
   */
  PENDING = 'PENDING',
  
  /**
   * A comment that is part of a submitted review
   */
  SUBMITTED = 'SUBMITTED'
}

/**
 * The possible sides of a diff.
 */
export enum GQLDiffSide {
  
  /**
   * The left side of the diff.
   */
  LEFT = 'LEFT',
  
  /**
   * The right side of the diff.
   */
  RIGHT = 'RIGHT'
}

/**
 * The connection type for PullRequestReview.
 */
export interface GQLPullRequestReviewConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestReviewEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestReview | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestReviewEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestReview;
}

/**
 * A suggestion to review a pull request based on a user's commit history and review comments.
 */
export interface GQLSuggestedReviewer {
  
  /**
   * Is this suggestion based on past commits?
   */
  isAuthor: boolean;
  
  /**
   * Is this suggestion based on past review comments?
   */
  isCommenter: boolean;
  
  /**
   * Identifies the user suggested to review the pull request.
   */
  reviewer: GQLUser;
}

/**
 * The connection type for PullRequestTimelineItem.
 */
export interface GQLPullRequestTimelineConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestTimelineItemEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestTimelineItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestTimelineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestTimelineItem;
}

/**
 * An item in an pull request timeline
 */
export type GQLPullRequestTimelineItem =
GQLAssignedEvent |
GQLBaseRefForcePushedEvent |
GQLClosedEvent |
GQLCommit |
GQLCommitCommentThread |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLDeployedEvent |
GQLDeploymentEnvironmentChangedEvent |
GQLHeadRefDeletedEvent |
GQLHeadRefForcePushedEvent |
GQLHeadRefRestoredEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMergedEvent |
GQLMilestonedEvent |
GQLPullRequestReview |
GQLPullRequestReviewComment |
GQLPullRequestReviewThread |
GQLReferencedEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLReviewDismissedEvent |
GQLReviewRequestRemovedEvent |
GQLReviewRequestedEvent |
GQLSubscribedEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnsubscribedEvent |
GQLUserBlockedEvent;

/** Use this to resolve union type PullRequestTimelineItem */
export type GQLPossiblePullRequestTimelineItemTypeNames =
'AssignedEvent' |
'BaseRefForcePushedEvent' |
'ClosedEvent' |
'Commit' |
'CommitCommentThread' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MergedEvent' |
'MilestonedEvent' |
'PullRequestReview' |
'PullRequestReviewComment' |
'PullRequestReviewThread' |
'ReferencedEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewRequestedEvent' |
'SubscribedEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnsubscribedEvent' |
'UserBlockedEvent';

export interface GQLPullRequestTimelineItemNameMap {
  PullRequestTimelineItem: GQLPullRequestTimelineItem;
  AssignedEvent: GQLAssignedEvent;
  BaseRefForcePushedEvent: GQLBaseRefForcePushedEvent;
  ClosedEvent: GQLClosedEvent;
  Commit: GQLCommit;
  CommitCommentThread: GQLCommitCommentThread;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  DeployedEvent: GQLDeployedEvent;
  DeploymentEnvironmentChangedEvent: GQLDeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: GQLHeadRefDeletedEvent;
  HeadRefForcePushedEvent: GQLHeadRefForcePushedEvent;
  HeadRefRestoredEvent: GQLHeadRefRestoredEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MergedEvent: GQLMergedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewComment: GQLPullRequestReviewComment;
  PullRequestReviewThread: GQLPullRequestReviewThread;
  ReferencedEvent: GQLReferencedEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ReviewRequestRemovedEvent: GQLReviewRequestRemovedEvent;
  ReviewRequestedEvent: GQLReviewRequestedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
  UserBlockedEvent: GQLUserBlockedEvent;
}

/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
export interface GQLBaseRefForcePushedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
   */
  afterCommit?: GQLCommit;
  
  /**
   * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
   */
  beforeCommit?: GQLCommit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
   */
  ref?: GQLRef;
}

/**
 * A thread of comments on a commit.
 */
export interface GQLCommitCommentThread extends GQLNode, GQLRepositoryNode {
  
  /**
   * The comments that exist in this thread.
   */
  comments: GQLCommitCommentConnection;
  
  /**
   * The commit the comments were made on.
   */
  commit?: GQLCommit;
  id: string;
  
  /**
   * The file the comments were made on.
   */
  path?: string;
  
  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position?: number;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
}

/**
 * Represents a 'deployed' event on a given pull request.
 */
export interface GQLDeployedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The deployment associated with the 'deployed' event.
   */
  deployment: GQLDeployment;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The ref associated with the 'deployed' event.
   */
  ref?: GQLRef;
}

/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
export interface GQLDeploymentEnvironmentChangedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The deployment status that updated the deployment environment.
   */
  deploymentStatus: GQLDeploymentStatus;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
}

/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
export interface GQLHeadRefDeletedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the Ref associated with the `head_ref_deleted` event.
   */
  headRef?: GQLRef;
  
  /**
   * Identifies the name of the Ref associated with the `head_ref_deleted` event.
   */
  headRefName: string;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
}

/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
export interface GQLHeadRefForcePushedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
   */
  afterCommit?: GQLCommit;
  
  /**
   * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
   */
  beforeCommit?: GQLCommit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
   */
  ref?: GQLRef;
}

/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
export interface GQLHeadRefRestoredEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
}

/**
 * Represents a 'merged' event on a given pull request.
 */
export interface GQLMergedEvent extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the commit associated with the `merge` event.
   */
  commit?: GQLCommit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Identifies the Ref associated with the `merge` event.
   */
  mergeRef?: GQLRef;
  
  /**
   * Identifies the name of the Ref associated with the `merge` event.
   */
  mergeRefName: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The HTTP path for this merged event.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this merged event.
   */
  url: GQLURI;
}

/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
export interface GQLReviewDismissedEvent extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * Identifies the optional message associated with the 'review_dismissed' event.
   */
  dismissalMessage?: string;
  
  /**
   * Identifies the optional message associated with the event, rendered to HTML.
   */
  dismissalMessageHTML?: string;
  id: string;
  
  /**
   * Identifies the previous state of the review with the 'review_dismissed' event.
   */
  previousReviewState: GQLPullRequestReviewState;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * Identifies the commit which caused the review to become stale.
   */
  pullRequestCommit?: GQLPullRequestCommit;
  
  /**
   * The HTTP path for this review dismissed event.
   */
  resourcePath: GQLURI;
  
  /**
   * Identifies the review associated with the 'review_dismissed' event.
   */
  review?: GQLPullRequestReview;
  
  /**
   * The HTTP URL for this review dismissed event.
   */
  url: GQLURI;
}

/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
export interface GQLReviewRequestRemovedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * Identifies the reviewer whose review request was removed.
   */
  requestedReviewer?: GQLRequestedReviewer;
}

/**
 * Represents an 'review_requested' event on a given pull request.
 */
export interface GQLReviewRequestedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * Identifies the reviewer whose review was requested.
   */
  requestedReviewer?: GQLRequestedReviewer;
}

/**
 * The possible item types found in a timeline.
 */
export enum GQLPullRequestTimelineItemsItemType {
  
  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  
  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  
  /**
   * Represents a 'automatic_base_change_failed' event on a given pull request.
   */
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',
  
  /**
   * Represents a 'automatic_base_change_succeeded' event on a given pull request.
   */
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',
  
  /**
   * Represents a 'base_ref_changed' event on a given issue or pull request.
   */
  BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT',
  
  /**
   * Represents a 'base_ref_force_pushed' event on a given pull request.
   */
  BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT',
  
  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',
  
  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  
  /**
   * Represents a 'connected' event on a given issue or pull request.
   */
  CONNECTED_EVENT = 'CONNECTED_EVENT',
  
  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  
  /**
   * Represents a 'convert_to_draft' event on a given pull request.
   */
  CONVERT_TO_DRAFT_EVENT = 'CONVERT_TO_DRAFT_EVENT',
  
  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  
  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  
  /**
   * Represents a 'deployed' event on a given pull request.
   */
  DEPLOYED_EVENT = 'DEPLOYED_EVENT',
  
  /**
   * Represents a 'deployment_environment_changed' event on a given pull request.
   */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',
  
  /**
   * Represents a 'disconnected' event on a given issue or pull request.
   */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',
  
  /**
   * Represents a 'head_ref_deleted' event on a given pull request.
   */
  HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT',
  
  /**
   * Represents a 'head_ref_force_pushed' event on a given pull request.
   */
  HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT',
  
  /**
   * Represents a 'head_ref_restored' event on a given pull request.
   */
  HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT',
  
  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  
  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',
  
  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',
  
  /**
   * Represents a 'marked_as_duplicate' event on a given issue or pull request.
   */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',
  
  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  
  /**
   * Represents a 'merged' event on a given pull request.
   */
  MERGED_EVENT = 'MERGED_EVENT',
  
  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  
  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  
  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',
  
  /**
   * Represents a Git commit part of a pull request.
   */
  PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT',
  
  /**
   * Represents a commit comment thread part of a pull request.
   */
  PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',
  
  /**
   * A review object for a given pull request.
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
  
  /**
   * A threaded list of comments for a given pull request.
   */
  PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD',
  
  /**
   * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
   */
  PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER',
  
  /**
   * Represents a 'ready_for_review' event on a given pull request.
   */
  READY_FOR_REVIEW_EVENT = 'READY_FOR_REVIEW_EVENT',
  
  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  
  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  
  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  
  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',
  
  /**
   * Represents a 'review_dismissed' event on a given issue or pull request.
   */
  REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT',
  
  /**
   * Represents an 'review_requested' event on a given pull request.
   */
  REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT',
  
  /**
   * Represents an 'review_request_removed' event on a given pull request.
   */
  REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT',
  
  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  
  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  
  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  
  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  
  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  
  /**
   * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
   */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',
  
  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',
  
  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT',
  
  /**
   * Represents a 'user_blocked' event on a given user.
   */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT'
}

/**
 * The connection type for PullRequestTimelineItems.
 */
export interface GQLPullRequestTimelineItemsConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPullRequestTimelineItemsEdge | null>;
  
  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: number;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPullRequestTimelineItems | null>;
  
  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: number;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * An edge in a connection.
 */
export interface GQLPullRequestTimelineItemsEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPullRequestTimelineItems;
}

/**
 * An item in a pull request timeline
 */
export type GQLPullRequestTimelineItems =
GQLAddedToProjectEvent |
GQLAssignedEvent |
GQLAutomaticBaseChangeFailedEvent |
GQLAutomaticBaseChangeSucceededEvent |
GQLBaseRefChangedEvent |
GQLBaseRefForcePushedEvent |
GQLClosedEvent |
GQLCommentDeletedEvent |
GQLConnectedEvent |
GQLConvertToDraftEvent |
GQLConvertedNoteToIssueEvent |
GQLCrossReferencedEvent |
GQLDemilestonedEvent |
GQLDeployedEvent |
GQLDeploymentEnvironmentChangedEvent |
GQLDisconnectedEvent |
GQLHeadRefDeletedEvent |
GQLHeadRefForcePushedEvent |
GQLHeadRefRestoredEvent |
GQLIssueComment |
GQLLabeledEvent |
GQLLockedEvent |
GQLMarkedAsDuplicateEvent |
GQLMentionedEvent |
GQLMergedEvent |
GQLMilestonedEvent |
GQLMovedColumnsInProjectEvent |
GQLPinnedEvent |
GQLPullRequestCommit |
GQLPullRequestCommitCommentThread |
GQLPullRequestReview |
GQLPullRequestReviewThread |
GQLPullRequestRevisionMarker |
GQLReadyForReviewEvent |
GQLReferencedEvent |
GQLRemovedFromProjectEvent |
GQLRenamedTitleEvent |
GQLReopenedEvent |
GQLReviewDismissedEvent |
GQLReviewRequestRemovedEvent |
GQLReviewRequestedEvent |
GQLSubscribedEvent |
GQLTransferredEvent |
GQLUnassignedEvent |
GQLUnlabeledEvent |
GQLUnlockedEvent |
GQLUnmarkedAsDuplicateEvent |
GQLUnpinnedEvent |
GQLUnsubscribedEvent |
GQLUserBlockedEvent;

/** Use this to resolve union type PullRequestTimelineItems */
export type GQLPossiblePullRequestTimelineItemsTypeNames =
'AddedToProjectEvent' |
'AssignedEvent' |
'AutomaticBaseChangeFailedEvent' |
'AutomaticBaseChangeSucceededEvent' |
'BaseRefChangedEvent' |
'BaseRefForcePushedEvent' |
'ClosedEvent' |
'CommentDeletedEvent' |
'ConnectedEvent' |
'ConvertToDraftEvent' |
'ConvertedNoteToIssueEvent' |
'CrossReferencedEvent' |
'DemilestonedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'DisconnectedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'IssueComment' |
'LabeledEvent' |
'LockedEvent' |
'MarkedAsDuplicateEvent' |
'MentionedEvent' |
'MergedEvent' |
'MilestonedEvent' |
'MovedColumnsInProjectEvent' |
'PinnedEvent' |
'PullRequestCommit' |
'PullRequestCommitCommentThread' |
'PullRequestReview' |
'PullRequestReviewThread' |
'PullRequestRevisionMarker' |
'ReadyForReviewEvent' |
'ReferencedEvent' |
'RemovedFromProjectEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewRequestedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnmarkedAsDuplicateEvent' |
'UnpinnedEvent' |
'UnsubscribedEvent' |
'UserBlockedEvent';

export interface GQLPullRequestTimelineItemsNameMap {
  PullRequestTimelineItems: GQLPullRequestTimelineItems;
  AddedToProjectEvent: GQLAddedToProjectEvent;
  AssignedEvent: GQLAssignedEvent;
  AutomaticBaseChangeFailedEvent: GQLAutomaticBaseChangeFailedEvent;
  AutomaticBaseChangeSucceededEvent: GQLAutomaticBaseChangeSucceededEvent;
  BaseRefChangedEvent: GQLBaseRefChangedEvent;
  BaseRefForcePushedEvent: GQLBaseRefForcePushedEvent;
  ClosedEvent: GQLClosedEvent;
  CommentDeletedEvent: GQLCommentDeletedEvent;
  ConnectedEvent: GQLConnectedEvent;
  ConvertToDraftEvent: GQLConvertToDraftEvent;
  ConvertedNoteToIssueEvent: GQLConvertedNoteToIssueEvent;
  CrossReferencedEvent: GQLCrossReferencedEvent;
  DemilestonedEvent: GQLDemilestonedEvent;
  DeployedEvent: GQLDeployedEvent;
  DeploymentEnvironmentChangedEvent: GQLDeploymentEnvironmentChangedEvent;
  DisconnectedEvent: GQLDisconnectedEvent;
  HeadRefDeletedEvent: GQLHeadRefDeletedEvent;
  HeadRefForcePushedEvent: GQLHeadRefForcePushedEvent;
  HeadRefRestoredEvent: GQLHeadRefRestoredEvent;
  IssueComment: GQLIssueComment;
  LabeledEvent: GQLLabeledEvent;
  LockedEvent: GQLLockedEvent;
  MarkedAsDuplicateEvent: GQLMarkedAsDuplicateEvent;
  MentionedEvent: GQLMentionedEvent;
  MergedEvent: GQLMergedEvent;
  MilestonedEvent: GQLMilestonedEvent;
  MovedColumnsInProjectEvent: GQLMovedColumnsInProjectEvent;
  PinnedEvent: GQLPinnedEvent;
  PullRequestCommit: GQLPullRequestCommit;
  PullRequestCommitCommentThread: GQLPullRequestCommitCommentThread;
  PullRequestReview: GQLPullRequestReview;
  PullRequestReviewThread: GQLPullRequestReviewThread;
  PullRequestRevisionMarker: GQLPullRequestRevisionMarker;
  ReadyForReviewEvent: GQLReadyForReviewEvent;
  ReferencedEvent: GQLReferencedEvent;
  RemovedFromProjectEvent: GQLRemovedFromProjectEvent;
  RenamedTitleEvent: GQLRenamedTitleEvent;
  ReopenedEvent: GQLReopenedEvent;
  ReviewDismissedEvent: GQLReviewDismissedEvent;
  ReviewRequestRemovedEvent: GQLReviewRequestRemovedEvent;
  ReviewRequestedEvent: GQLReviewRequestedEvent;
  SubscribedEvent: GQLSubscribedEvent;
  TransferredEvent: GQLTransferredEvent;
  UnassignedEvent: GQLUnassignedEvent;
  UnlabeledEvent: GQLUnlabeledEvent;
  UnlockedEvent: GQLUnlockedEvent;
  UnmarkedAsDuplicateEvent: GQLUnmarkedAsDuplicateEvent;
  UnpinnedEvent: GQLUnpinnedEvent;
  UnsubscribedEvent: GQLUnsubscribedEvent;
  UserBlockedEvent: GQLUserBlockedEvent;
}

/**
 * Represents a 'automatic_base_change_failed' event on a given pull request.
 */
export interface GQLAutomaticBaseChangeFailedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * The new base for this PR
   */
  newBase: string;
  
  /**
   * The old base for this PR
   */
  oldBase: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
}

/**
 * Represents a 'automatic_base_change_succeeded' event on a given pull request.
 */
export interface GQLAutomaticBaseChangeSucceededEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * The new base for this PR
   */
  newBase: string;
  
  /**
   * The old base for this PR
   */
  oldBase: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
}

/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
export interface GQLBaseRefChangedEvent extends GQLNode {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'convert_to_draft' event on a given pull request.
 */
export interface GQLConvertToDraftEvent extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The HTTP path for this convert to draft event.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this convert to draft event.
   */
  url: GQLURI;
}

/**
 * Represents a commit comment thread part of a pull request.
 */
export interface GQLPullRequestCommitCommentThread extends GQLNode, GQLRepositoryNode {
  
  /**
   * The comments that exist in this thread.
   */
  comments: GQLCommitCommentConnection;
  
  /**
   * The commit the comments were made on.
   */
  commit: GQLCommit;
  id: string;
  
  /**
   * The file the comments were made on.
   */
  path?: string;
  
  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position?: number;
  
  /**
   * The pull request this commit comment thread belongs to
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The repository associated with this node.
   */
  repository: GQLRepository;
}

/**
 * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 */
export interface GQLPullRequestRevisionMarker {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The last commit the viewer has seen.
   */
  lastSeenCommit: GQLCommit;
  
  /**
   * The pull request to which the marker belongs.
   */
  pullRequest: GQLPullRequest;
}

/**
 * Represents a 'ready_for_review' event on a given pull request.
 */
export interface GQLReadyForReviewEvent extends GQLNode, GQLUniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The HTTP path for this ready for review event.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this ready for review event.
   */
  url: GQLURI;
}

/**
 * Represents a object that contains package version activity statistics such as downloads.
 */
export interface GQLPackageVersionStatistics {
  
  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: number;
}

/**
 * Represents a object that contains package activity statistics such as downloads.
 */
export interface GQLPackageStatistics {
  
  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: number;
}

/**
 * Ways in which lists of package versions can be ordered upon return.
 */
export interface GQLPackageVersionOrder {
  
  /**
   * The direction in which to order package versions by the specified field.
   */
  direction?: GQLOrderDirection;
  
  /**
   * The field in which to order package versions by.
   */
  field?: GQLPackageVersionOrderField;
}

/**
 * Properties by which package version connections can be ordered.
 */
export enum GQLPackageVersionOrderField {
  
  /**
   * Order package versions by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for PackageVersion.
 */
export interface GQLPackageVersionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPackageVersionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPackageVersion | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPackageVersionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPackageVersion;
}

/**
 * Represents any entity on GitHub that has a profile page.
 */
export interface GQLProfileOwner {
  
  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;
  
  /**
   * The public profile email.
   */
  email?: string;
  id: string;
  
  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: GQLProfileItemShowcase;
  
  /**
   * The public profile location.
   */
  location?: string;
  
  /**
   * The username used to login.
   */
  login: string;
  
  /**
   * The public profile name.
   */
  name?: string;
  
  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: GQLPinnableItemConnection;
  
  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: GQLPinnableItemConnection;
  
  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;
  
  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;
  
  /**
   * The public profile website URL.
   */
  websiteUrl?: GQLURI;
}

/** Use this to resolve interface type ProfileOwner */
export type GQLPossibleProfileOwnerTypeNames = 'Organization' | 'User';

export interface GQLProfileOwnerNameMap {
  ProfileOwner: GQLProfileOwner;
  Organization: GQLOrganization;
  User: GQLUser;
}

/**
 * Represents items that can be pinned to a profile page or dashboard.
 */
export enum GQLPinnableItemType {
  
  /**
   * A gist.
   */
  GIST = 'GIST',
  
  /**
   * An issue.
   */
  ISSUE = 'ISSUE',
  
  /**
   * An organization.
   */
  ORGANIZATION = 'ORGANIZATION',
  
  /**
   * A project.
   */
  PROJECT = 'PROJECT',
  
  /**
   * A pull request.
   */
  PULL_REQUEST = 'PULL_REQUEST',
  
  /**
   * A repository.
   */
  REPOSITORY = 'REPOSITORY',
  
  /**
   * A team.
   */
  TEAM = 'TEAM',
  
  /**
   * A user.
   */
  USER = 'USER'
}

/**
 * A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
 */
export interface GQLProfileItemShowcase {
  
  /**
   * Whether or not the owner has pinned any repositories or gists.
   */
  hasPinnedItems: boolean;
  
  /**
   * The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
   */
  items: GQLPinnableItemConnection;
}

/**
 * The connection type for PinnableItem.
 */
export interface GQLPinnableItemConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPinnableItemEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPinnableItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPinnableItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPinnableItem;
}

/**
 * Types that can be pinned to a profile page.
 */
export type GQLPinnableItem = GQLGist | GQLRepository;

/** Use this to resolve union type PinnableItem */
export type GQLPossiblePinnableItemTypeNames = 'Gist' | 'Repository';

export interface GQLPinnableItemNameMap {
  PinnableItem: GQLPinnableItem;
  Gist: GQLGist;
  Repository: GQLRepository;
}

/**
 * A Gist.
 */
export interface GQLGist extends GQLNode, GQLStarrable, GQLUniformResourceLocatable {
  
  /**
   * A list of comments associated with the gist
   */
  comments: GQLGistCommentConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The gist description.
   */
  description?: string;
  
  /**
   * The files in this gist.
   */
  files?: Array<GQLGistFile | null>;
  
  /**
   * A list of forks associated with the gist
   */
  forks: GQLGistConnection;
  id: string;
  
  /**
   * Identifies if the gist is a fork.
   */
  isFork: boolean;
  
  /**
   * Whether the gist is public or not.
   */
  isPublic: boolean;
  
  /**
   * The gist name.
   */
  name: string;
  
  /**
   * The gist owner.
   */
  owner?: GQLRepositoryOwner;
  
  /**
   * Identifies when the gist was last pushed to.
   */
  pushedAt?: GQLDateTime;
  
  /**
   * The HTML path to this resource.
   */
  resourcePath: GQLURI;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: GQLStargazerConnection;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The HTTP URL for this Gist.
   */
  url: GQLURI;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

/**
 * The connection type for GistComment.
 */
export interface GQLGistCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLGistCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLGistComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLGistCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLGistComment;
}

/**
 * Represents a comment on an Gist.
 */
export interface GQLGistComment extends GQLComment, GQLDeletable, GQLMinimizable, GQLNode, GQLUpdatable, GQLUpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: GQLActor;
  
  /**
   * Author's association with the gist.
   */
  authorAssociation: GQLCommentAuthorAssociation;
  
  /**
   * Identifies the comment body.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: GQLActor;
  
  /**
   * The associated gist.
   */
  gist: GQLGist;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: GQLDateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: GQLDateTime;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: GQLUserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<GQLCommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * A file in a gist.
 */
export interface GQLGistFile {
  
  /**
   * The file name encoded to remove characters that are invalid in URL paths.
   */
  encodedName?: string;
  
  /**
   * The gist file encoding.
   */
  encoding?: string;
  
  /**
   * The file extension from the file name.
   */
  extension?: string;
  
  /**
   * Indicates if this file is an image.
   */
  isImage: boolean;
  
  /**
   * Whether the file's contents were truncated.
   */
  isTruncated: boolean;
  
  /**
   * The programming language this file is written in.
   */
  language?: GQLLanguage;
  
  /**
   * The gist file name.
   */
  name?: string;
  
  /**
   * The gist file size in bytes.
   */
  size?: number;
  
  /**
   * UTF8 text data or null if the file is binary
   */
  text?: string;
}

/**
 * Ordering options for gist connections
 */
export interface GQLGistOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order repositories by.
   */
  field: GQLGistOrderField;
}

/**
 * Properties by which gist connections can be ordered.
 */
export enum GQLGistOrderField {
  
  /**
   * Order gists by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order gists by push time
   */
  PUSHED_AT = 'PUSHED_AT',
  
  /**
   * Order gists by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for Gist.
 */
export interface GQLGistConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLGistEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLGist | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLGistEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLGist;
}

/**
 * Entities that can be sponsored through GitHub Sponsors
 */
export interface GQLSponsorable {
  
  /**
   * The GitHub Sponsors listing for this user.
   */
  sponsorsListing?: GQLSponsorsListing;
  
  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: GQLSponsorshipConnection;
  
  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: GQLSponsorshipConnection;
}

/** Use this to resolve interface type Sponsorable */
export type GQLPossibleSponsorableTypeNames = 'Organization' | 'User';

export interface GQLSponsorableNameMap {
  Sponsorable: GQLSponsorable;
  Organization: GQLOrganization;
  User: GQLUser;
}

/**
 * A GitHub Sponsors listing.
 */
export interface GQLSponsorsListing extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The full description of the listing.
   */
  fullDescription: string;
  
  /**
   * The full description of the listing rendered to HTML.
   */
  fullDescriptionHTML: GQLHTML;
  id: string;
  
  /**
   * The listing's full name.
   */
  name: string;
  
  /**
   * The short description of the listing.
   */
  shortDescription: string;
  
  /**
   * The short name of the listing.
   */
  slug: string;
  
  /**
   * The published tiers for this GitHub Sponsors listing.
   */
  tiers?: GQLSponsorsTierConnection;
}

/**
 * Ordering options for Sponsors tiers connections.
 */
export interface GQLSponsorsTierOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order tiers by.
   */
  field: GQLSponsorsTierOrderField;
}

/**
 * Properties by which Sponsors tiers connections can be ordered.
 */
export enum GQLSponsorsTierOrderField {
  
  /**
   * Order tiers by creation time.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order tiers by their monthly price in cents
   */
  MONTHLY_PRICE_IN_CENTS = 'MONTHLY_PRICE_IN_CENTS'
}

/**
 * The connection type for SponsorsTier.
 */
export interface GQLSponsorsTierConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSponsorsTierEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSponsorsTier | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSponsorsTierEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSponsorsTier;
}

/**
 * A GitHub Sponsors tier associated with a GitHub Sponsors listing.
 */
export interface GQLSponsorsTier extends GQLNode {
  
  /**
   * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
   */
  adminInfo?: GQLSponsorsTierAdminInfo;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The description of the tier.
   */
  description: string;
  
  /**
   * The tier description rendered to HTML
   */
  descriptionHTML: GQLHTML;
  id: string;
  
  /**
   * How much this tier costs per month in cents.
   */
  monthlyPriceInCents: number;
  
  /**
   * How much this tier costs per month in dollars.
   */
  monthlyPriceInDollars: number;
  
  /**
   * The name of the tier.
   */
  name: string;
  
  /**
   * The sponsors listing that this tier belongs to.
   */
  sponsorsListing: GQLSponsorsListing;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
export interface GQLSponsorsTierAdminInfo {
  
  /**
   * The sponsorships associated with this tier.
   */
  sponsorships: GQLSponsorshipConnection;
}

/**
 * Ordering options for sponsorship connections.
 */
export interface GQLSponsorshipOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order sponsorship by.
   */
  field: GQLSponsorshipOrderField;
}

/**
 * Properties by which sponsorship connections can be ordered.
 */
export enum GQLSponsorshipOrderField {
  
  /**
   * Order sponsorship by creation time.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for Sponsorship.
 */
export interface GQLSponsorshipConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSponsorshipEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSponsorship | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSponsorshipEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSponsorship;
}

/**
 * A sponsorship relationship between a sponsor and a maintainer
 */
export interface GQLSponsorship extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * The entity that is being sponsored
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   */
  maintainer: GQLUser;
  
  /**
   * The privacy level for this sponsorship.
   */
  privacyLevel: GQLSponsorshipPrivacy;
  
  /**
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   */
  sponsor?: GQLUser;
  
  /**
   * The user or organization that is sponsoring. Returns null if the sponsorship is private.
   */
  sponsorEntity?: GQLSponsor;
  
  /**
   * The entity that is being sponsored
   */
  sponsorable: GQLSponsorable;
  
  /**
   * The associated sponsorship tier
   */
  tier?: GQLSponsorsTier;
}

/**
 * The privacy of a sponsorship
 */
export enum GQLSponsorshipPrivacy {
  
  /**
   * Private
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * Public
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Entites that can sponsor others via GitHub Sponsors
 */
export type GQLSponsor = GQLOrganization | GQLUser;

/** Use this to resolve union type Sponsor */
export type GQLPossibleSponsorTypeNames = 'Organization' | 'User';

export interface GQLSponsorNameMap {
  Sponsor: GQLSponsor;
  Organization: GQLOrganization;
  User: GQLUser;
}

/**
 * A contributions collection aggregates contributions such as opened issues and commits created by a user.
 */
export interface GQLContributionsCollection {
  
  /**
   * Commit contributions made by the user, grouped by repository.
   */
  commitContributionsByRepository: Array<GQLCommitContributionsByRepository>;
  
  /**
   * A calendar of this user's contributions on GitHub.
   */
  contributionCalendar: GQLContributionCalendar;
  
  /**
   * The years the user has been making contributions with the most recent year first.
   */
  contributionYears: Array<number>;
  
  /**
   * Determine if this collection's time span ends in the current month.
   */
  doesEndInCurrentMonth: boolean;
  
  /**
   * The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
   */
  earliestRestrictedContributionDate?: GQLDate;
  
  /**
   * The ending date and time of this collection.
   */
  endedAt: GQLDateTime;
  
  /**
   * The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstIssueContribution?: GQLCreatedIssueOrRestrictedContribution;
  
  /**
   * The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstPullRequestContribution?: GQLCreatedPullRequestOrRestrictedContribution;
  
  /**
   * The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
   */
  firstRepositoryContribution?: GQLCreatedRepositoryOrRestrictedContribution;
  
  /**
   * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
   */
  hasActivityInThePast: boolean;
  
  /**
   * Determine if there are any contributions in this collection.
   */
  hasAnyContributions: boolean;
  
  /**
   * Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
   */
  hasAnyRestrictedContributions: boolean;
  
  /**
   * Whether or not the collector's time span is all within the same day.
   */
  isSingleDay: boolean;
  
  /**
   * A list of issues the user opened.
   */
  issueContributions: GQLCreatedIssueContributionConnection;
  
  /**
   * Issue contributions made by the user, grouped by repository.
   */
  issueContributionsByRepository: Array<GQLIssueContributionsByRepository>;
  
  /**
   * When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
   */
  joinedGitHubContribution?: GQLJoinedGitHubContribution;
  
  /**
   * The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
   */
  latestRestrictedContributionDate?: GQLDate;
  
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   */
  mostRecentCollectionWithActivity?: GQLContributionsCollection;
  
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   */
  mostRecentCollectionWithoutActivity?: GQLContributionsCollection;
  
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   */
  popularIssueContribution?: GQLCreatedIssueContribution;
  
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   */
  popularPullRequestContribution?: GQLCreatedPullRequestContribution;
  
  /**
   * Pull request contributions made by the user.
   */
  pullRequestContributions: GQLCreatedPullRequestContributionConnection;
  
  /**
   * Pull request contributions made by the user, grouped by repository.
   */
  pullRequestContributionsByRepository: Array<GQLPullRequestContributionsByRepository>;
  
  /**
   * Pull request review contributions made by the user.
   */
  pullRequestReviewContributions: GQLCreatedPullRequestReviewContributionConnection;
  
  /**
   * Pull request review contributions made by the user, grouped by repository.
   */
  pullRequestReviewContributionsByRepository: Array<GQLPullRequestReviewContributionsByRepository>;
  
  /**
   * A list of repositories owned by the user that the user created in this time range.
   */
  repositoryContributions: GQLCreatedRepositoryContributionConnection;
  
  /**
   * A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
   */
  restrictedContributionsCount: number;
  
  /**
   * The beginning date and time of this collection.
   */
  startedAt: GQLDateTime;
  
  /**
   * How many commits were made by the user in this time span.
   */
  totalCommitContributions: number;
  
  /**
   * How many issues the user opened.
   */
  totalIssueContributions: number;
  
  /**
   * How many pull requests the user opened.
   */
  totalPullRequestContributions: number;
  
  /**
   * How many pull request reviews the user left.
   */
  totalPullRequestReviewContributions: number;
  
  /**
   * How many different repositories the user committed to.
   */
  totalRepositoriesWithContributedCommits: number;
  
  /**
   * How many different repositories the user opened issues in.
   */
  totalRepositoriesWithContributedIssues: number;
  
  /**
   * How many different repositories the user left pull request reviews in.
   */
  totalRepositoriesWithContributedPullRequestReviews: number;
  
  /**
   * How many different repositories the user opened pull requests in.
   */
  totalRepositoriesWithContributedPullRequests: number;
  
  /**
   * How many repositories the user created.
   */
  totalRepositoryContributions: number;
  
  /**
   * The user who made the contributions in this collection.
   */
  user: GQLUser;
}

/**
 * This aggregates commits made by a user within one repository.
 */
export interface GQLCommitContributionsByRepository {
  
  /**
   * The commit contributions, each representing a day.
   */
  contributions: GQLCreatedCommitContributionConnection;
  
  /**
   * The repository in which the commits were made.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for the user's commits to the repository in this time range.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for the user's commits to the repository in this time range.
   */
  url: GQLURI;
}

/**
 * Ordering options for commit contribution connections.
 */
export interface GQLCommitContributionOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field by which to order commit contributions.
   */
  field: GQLCommitContributionOrderField;
}

/**
 * Properties by which commit contribution connections can be ordered.
 */
export enum GQLCommitContributionOrderField {
  
  /**
   * Order commit contributions by how many commits they represent.
   */
  COMMIT_COUNT = 'COMMIT_COUNT',
  
  /**
   * Order commit contributions by when they were made.
   */
  OCCURRED_AT = 'OCCURRED_AT'
}

/**
 * The connection type for CreatedCommitContribution.
 */
export interface GQLCreatedCommitContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCreatedCommitContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCreatedCommitContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of commits across days and repositories in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCreatedCommitContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCreatedCommitContribution;
}

/**
 * Represents the contribution a user made by committing to a repository.
 */
export interface GQLCreatedCommitContribution extends GQLContribution {
  
  /**
   * How many commits were made on this day to this repository by the user.
   */
  commitCount: number;
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The repository the user made a commit in.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export interface GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/** Use this to resolve interface type Contribution */
export type GQLPossibleContributionTypeNames =
'CreatedCommitContribution' |
'CreatedIssueContribution' |
'RestrictedContribution' |
'CreatedPullRequestContribution' |
'CreatedRepositoryContribution' |
'JoinedGitHubContribution' |
'CreatedPullRequestReviewContribution';

export interface GQLContributionNameMap {
  Contribution: GQLContribution;
  CreatedCommitContribution: GQLCreatedCommitContribution;
  CreatedIssueContribution: GQLCreatedIssueContribution;
  RestrictedContribution: GQLRestrictedContribution;
  CreatedPullRequestContribution: GQLCreatedPullRequestContribution;
  CreatedRepositoryContribution: GQLCreatedRepositoryContribution;
  JoinedGitHubContribution: GQLJoinedGitHubContribution;
  CreatedPullRequestReviewContribution: GQLCreatedPullRequestReviewContribution;
}

/**
 * A calendar of contributions made on GitHub by a user.
 */
export interface GQLContributionCalendar {
  
  /**
   * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
   */
  colors: Array<string>;
  
  /**
   * Determine if the color set was chosen because it's currently Halloween.
   */
  isHalloween: boolean;
  
  /**
   * A list of the months of contributions in this calendar.
   */
  months: Array<GQLContributionCalendarMonth>;
  
  /**
   * The count of total contributions in the calendar.
   */
  totalContributions: number;
  
  /**
   * A list of the weeks of contributions in this calendar.
   */
  weeks: Array<GQLContributionCalendarWeek>;
}

/**
 * A month of contributions in a user's contribution graph.
 */
export interface GQLContributionCalendarMonth {
  
  /**
   * The date of the first day of this month.
   */
  firstDay: GQLDate;
  
  /**
   * The name of the month.
   */
  name: string;
  
  /**
   * How many weeks started in this month.
   */
  totalWeeks: number;
  
  /**
   * The year the month occurred in.
   */
  year: number;
}

/**
 * An ISO-8601 encoded date string.
 */
export type GQLDate = any;

/**
 * A week of contributions in a user's contribution graph.
 */
export interface GQLContributionCalendarWeek {
  
  /**
   * The days of contributions in this week.
   */
  contributionDays: Array<GQLContributionCalendarDay>;
  
  /**
   * The date of the earliest square in this week.
   */
  firstDay: GQLDate;
}

/**
 * Represents a single day of contributions on GitHub by a user.
 */
export interface GQLContributionCalendarDay {
  
  /**
   * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
   */
  color: string;
  
  /**
   * How many contributions were made by the user on this day.
   */
  contributionCount: number;
  
  /**
   * The day this square represents.
   */
  date: GQLDate;
  
  /**
   * A number representing which day of the week this square represents, e.g., 1 is Monday.
   */
  weekday: number;
}

/**
 * Represents either a issue the viewer can access or a restricted contribution.
 */
export type GQLCreatedIssueOrRestrictedContribution =
GQLCreatedIssueContribution |
GQLRestrictedContribution;

/** Use this to resolve union type CreatedIssueOrRestrictedContribution */
export type GQLPossibleCreatedIssueOrRestrictedContributionTypeNames =
'CreatedIssueContribution' |
'RestrictedContribution';

export interface GQLCreatedIssueOrRestrictedContributionNameMap {
  CreatedIssueOrRestrictedContribution: GQLCreatedIssueOrRestrictedContribution;
  CreatedIssueContribution: GQLCreatedIssueContribution;
  RestrictedContribution: GQLRestrictedContribution;
}

/**
 * Represents the contribution a user made on GitHub by opening an issue.
 */
export interface GQLCreatedIssueContribution extends GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * The issue that was opened.
   */
  issue: GQLIssue;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * Represents a private contribution a user made on GitHub.
 */
export interface GQLRestrictedContribution extends GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * Represents either a pull request the viewer can access or a restricted contribution.
 */
export type GQLCreatedPullRequestOrRestrictedContribution =
GQLCreatedPullRequestContribution |
GQLRestrictedContribution;

/** Use this to resolve union type CreatedPullRequestOrRestrictedContribution */
export type GQLPossibleCreatedPullRequestOrRestrictedContributionTypeNames =
'CreatedPullRequestContribution' |
'RestrictedContribution';

export interface GQLCreatedPullRequestOrRestrictedContributionNameMap {
  CreatedPullRequestOrRestrictedContribution: GQLCreatedPullRequestOrRestrictedContribution;
  CreatedPullRequestContribution: GQLCreatedPullRequestContribution;
  RestrictedContribution: GQLRestrictedContribution;
}

/**
 * Represents the contribution a user made on GitHub by opening a pull request.
 */
export interface GQLCreatedPullRequestContribution extends GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The pull request that was opened.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * Represents either a repository the viewer can access or a restricted contribution.
 */
export type GQLCreatedRepositoryOrRestrictedContribution =
GQLCreatedRepositoryContribution |
GQLRestrictedContribution;

/** Use this to resolve union type CreatedRepositoryOrRestrictedContribution */
export type GQLPossibleCreatedRepositoryOrRestrictedContributionTypeNames =
'CreatedRepositoryContribution' |
'RestrictedContribution';

export interface GQLCreatedRepositoryOrRestrictedContributionNameMap {
  CreatedRepositoryOrRestrictedContribution: GQLCreatedRepositoryOrRestrictedContribution;
  CreatedRepositoryContribution: GQLCreatedRepositoryContribution;
  RestrictedContribution: GQLRestrictedContribution;
}

/**
 * Represents the contribution a user made on GitHub by creating a repository.
 */
export interface GQLCreatedRepositoryContribution extends GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The repository that was created.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * Ordering options for contribution connections.
 */
export interface GQLContributionOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
}

/**
 * The connection type for CreatedIssueContribution.
 */
export interface GQLCreatedIssueContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCreatedIssueContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCreatedIssueContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCreatedIssueContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCreatedIssueContribution;
}

/**
 * This aggregates issues opened by a user within one repository.
 */
export interface GQLIssueContributionsByRepository {
  
  /**
   * The issue contributions.
   */
  contributions: GQLCreatedIssueContributionConnection;
  
  /**
   * The repository in which the issues were opened.
   */
  repository: GQLRepository;
}

/**
 * Represents a user signing up for a GitHub account.
 */
export interface GQLJoinedGitHubContribution extends GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * The connection type for CreatedPullRequestContribution.
 */
export interface GQLCreatedPullRequestContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCreatedPullRequestContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCreatedPullRequestContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCreatedPullRequestContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCreatedPullRequestContribution;
}

/**
 * This aggregates pull requests opened by a user within one repository.
 */
export interface GQLPullRequestContributionsByRepository {
  
  /**
   * The pull request contributions.
   */
  contributions: GQLCreatedPullRequestContributionConnection;
  
  /**
   * The repository in which the pull requests were opened.
   */
  repository: GQLRepository;
}

/**
 * The connection type for CreatedPullRequestReviewContribution.
 */
export interface GQLCreatedPullRequestReviewContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCreatedPullRequestReviewContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCreatedPullRequestReviewContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCreatedPullRequestReviewContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCreatedPullRequestReviewContribution;
}

/**
 * Represents the contribution a user made by leaving a review on a pull request.
 */
export interface GQLCreatedPullRequestReviewContribution extends GQLContribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: GQLDateTime;
  
  /**
   * The pull request the user reviewed.
   */
  pullRequest: GQLPullRequest;
  
  /**
   * The review the user left on the pull request.
   */
  pullRequestReview: GQLPullRequestReview;
  
  /**
   * The repository containing the pull request that the user reviewed.
   */
  repository: GQLRepository;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: GQLURI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: GQLURI;
  
  /**
   * The user who made this contribution.
   */
  user: GQLUser;
}

/**
 * This aggregates pull request reviews made by a user within one repository.
 */
export interface GQLPullRequestReviewContributionsByRepository {
  
  /**
   * The pull request review contributions.
   */
  contributions: GQLCreatedPullRequestReviewContributionConnection;
  
  /**
   * The repository in which the pull request reviews were made.
   */
  repository: GQLRepository;
}

/**
 * The connection type for CreatedRepositoryContribution.
 */
export interface GQLCreatedRepositoryContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLCreatedRepositoryContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLCreatedRepositoryContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLCreatedRepositoryContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLCreatedRepositoryContribution;
}

/**
 * The connection type for User.
 */
export interface GQLFollowerConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLUserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The connection type for User.
 */
export interface GQLFollowingConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLUserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The privacy of a Gist
 */
export enum GQLGistPrivacy {
  
  /**
   * Gists that are public and secret
   */
  ALL = 'ALL',
  
  /**
   * Public
   */
  PUBLIC = 'PUBLIC',
  
  /**
   * Secret
   */
  SECRET = 'SECRET'
}

/**
 * The connection type for Organization.
 */
export interface GQLOrganizationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLOrganizationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLOrganization | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLOrganizationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLOrganization;
}

/**
 * The connection type for PublicKey.
 */
export interface GQLPublicKeyConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLPublicKeyEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLPublicKey | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLPublicKeyEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLPublicKey;
}

/**
 * A user's public key.
 */
export interface GQLPublicKey extends GQLNode {
  
  /**
   * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
   */
  accessedAt?: GQLDateTime;
  
  /**
   * Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
   */
  createdAt?: GQLDateTime;
  
  /**
   * The fingerprint for this PublicKey.
   */
  fingerprint: string;
  id: string;
  
  /**
   * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
   */
  isReadOnly?: boolean;
  
  /**
   * The public key string.
   */
  key: string;
  
  /**
   * Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
   */
  updatedAt?: GQLDateTime;
}

/**
 * The reason a repository is listed as 'contributed'.
 */
export enum GQLRepositoryContributionType {
  
  /**
   * Created a commit
   */
  COMMIT = 'COMMIT',
  
  /**
   * Created an issue
   */
  ISSUE = 'ISSUE',
  
  /**
   * Created a pull request
   */
  PULL_REQUEST = 'PULL_REQUEST',
  
  /**
   * Reviewed a pull request
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
  
  /**
   * Created the repository
   */
  REPOSITORY = 'REPOSITORY'
}

/**
 * Ordering options for saved reply connections.
 */
export interface GQLSavedReplyOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order saved replies by.
   */
  field: GQLSavedReplyOrderField;
}

/**
 * Properties by which saved reply connections can be ordered.
 */
export enum GQLSavedReplyOrderField {
  
  /**
   * Order saved reply by when they were updated.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for SavedReply.
 */
export interface GQLSavedReplyConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSavedReplyEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSavedReply | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSavedReplyEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSavedReply;
}

/**
 * A Saved Reply is text a user can use to reply quickly.
 */
export interface GQLSavedReply extends GQLNode {
  
  /**
   * The body of the saved reply.
   */
  body: string;
  
  /**
   * The saved reply body rendered to HTML.
   */
  bodyHTML: GQLHTML;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The title of the saved reply.
   */
  title: string;
  
  /**
   * The user that saved this reply.
   */
  user?: GQLActor;
}

/**
 * The connection type for Repository.
 */
export interface GQLStarredRepositoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLStarredRepositoryEdge | null>;
  
  /**
   * Is the list of stars for this user truncated? This is true for users that have many stars.
   */
  isOverLimit: boolean;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRepository | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a starred repository.
 */
export interface GQLStarredRepositoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: GQLRepository;
  
  /**
   * Identifies when the item was starred.
   */
  starredAt: GQLDateTime;
}

/**
 * Ordering options for Audit Log connections.
 */
export interface GQLAuditLogOrder {
  
  /**
   * The ordering direction.
   */
  direction?: GQLOrderDirection;
  
  /**
   * The field to order Audit Logs by.
   */
  field?: GQLAuditLogOrderField;
}

/**
 * Properties by which Audit Log connections can be ordered.
 */
export enum GQLAuditLogOrderField {
  
  /**
   * Order audit log entries by timestamp
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for OrganizationAuditEntry.
 */
export interface GQLOrganizationAuditEntryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLOrganizationAuditEntryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLOrganizationAuditEntry | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLOrganizationAuditEntryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLOrganizationAuditEntry;
}

/**
 * An audit entry in an organization audit log.
 */
export type GQLOrganizationAuditEntry =
GQLMembersCanDeleteReposClearAuditEntry |
GQLMembersCanDeleteReposDisableAuditEntry |
GQLMembersCanDeleteReposEnableAuditEntry |
GQLOauthApplicationCreateAuditEntry |
GQLOrgAddBillingManagerAuditEntry |
GQLOrgAddMemberAuditEntry |
GQLOrgBlockUserAuditEntry |
GQLOrgConfigDisableCollaboratorsOnlyAuditEntry |
GQLOrgConfigEnableCollaboratorsOnlyAuditEntry |
GQLOrgCreateAuditEntry |
GQLOrgDisableOauthAppRestrictionsAuditEntry |
GQLOrgDisableSamlAuditEntry |
GQLOrgDisableTwoFactorRequirementAuditEntry |
GQLOrgEnableOauthAppRestrictionsAuditEntry |
GQLOrgEnableSamlAuditEntry |
GQLOrgEnableTwoFactorRequirementAuditEntry |
GQLOrgInviteMemberAuditEntry |
GQLOrgInviteToBusinessAuditEntry |
GQLOrgOauthAppAccessApprovedAuditEntry |
GQLOrgOauthAppAccessDeniedAuditEntry |
GQLOrgOauthAppAccessRequestedAuditEntry |
GQLOrgRemoveBillingManagerAuditEntry |
GQLOrgRemoveMemberAuditEntry |
GQLOrgRemoveOutsideCollaboratorAuditEntry |
GQLOrgRestoreMemberAuditEntry |
GQLOrgUnblockUserAuditEntry |
GQLOrgUpdateDefaultRepositoryPermissionAuditEntry |
GQLOrgUpdateMemberAuditEntry |
GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry |
GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry |
GQLPrivateRepositoryForkingDisableAuditEntry |
GQLPrivateRepositoryForkingEnableAuditEntry |
GQLRepoAccessAuditEntry |
GQLRepoAddMemberAuditEntry |
GQLRepoAddTopicAuditEntry |
GQLRepoArchivedAuditEntry |
GQLRepoChangeMergeSettingAuditEntry |
GQLRepoConfigDisableAnonymousGitAccessAuditEntry |
GQLRepoConfigDisableCollaboratorsOnlyAuditEntry |
GQLRepoConfigDisableContributorsOnlyAuditEntry |
GQLRepoConfigDisableSockpuppetDisallowedAuditEntry |
GQLRepoConfigEnableAnonymousGitAccessAuditEntry |
GQLRepoConfigEnableCollaboratorsOnlyAuditEntry |
GQLRepoConfigEnableContributorsOnlyAuditEntry |
GQLRepoConfigEnableSockpuppetDisallowedAuditEntry |
GQLRepoConfigLockAnonymousGitAccessAuditEntry |
GQLRepoConfigUnlockAnonymousGitAccessAuditEntry |
GQLRepoCreateAuditEntry |
GQLRepoDestroyAuditEntry |
GQLRepoRemoveMemberAuditEntry |
GQLRepoRemoveTopicAuditEntry |
GQLRepositoryVisibilityChangeDisableAuditEntry |
GQLRepositoryVisibilityChangeEnableAuditEntry |
GQLTeamAddMemberAuditEntry |
GQLTeamAddRepositoryAuditEntry |
GQLTeamChangeParentTeamAuditEntry |
GQLTeamRemoveMemberAuditEntry |
GQLTeamRemoveRepositoryAuditEntry;

/** Use this to resolve union type OrganizationAuditEntry */
export type GQLPossibleOrganizationAuditEntryTypeNames =
'MembersCanDeleteReposClearAuditEntry' |
'MembersCanDeleteReposDisableAuditEntry' |
'MembersCanDeleteReposEnableAuditEntry' |
'OauthApplicationCreateAuditEntry' |
'OrgAddBillingManagerAuditEntry' |
'OrgAddMemberAuditEntry' |
'OrgBlockUserAuditEntry' |
'OrgConfigDisableCollaboratorsOnlyAuditEntry' |
'OrgConfigEnableCollaboratorsOnlyAuditEntry' |
'OrgCreateAuditEntry' |
'OrgDisableOauthAppRestrictionsAuditEntry' |
'OrgDisableSamlAuditEntry' |
'OrgDisableTwoFactorRequirementAuditEntry' |
'OrgEnableOauthAppRestrictionsAuditEntry' |
'OrgEnableSamlAuditEntry' |
'OrgEnableTwoFactorRequirementAuditEntry' |
'OrgInviteMemberAuditEntry' |
'OrgInviteToBusinessAuditEntry' |
'OrgOauthAppAccessApprovedAuditEntry' |
'OrgOauthAppAccessDeniedAuditEntry' |
'OrgOauthAppAccessRequestedAuditEntry' |
'OrgRemoveBillingManagerAuditEntry' |
'OrgRemoveMemberAuditEntry' |
'OrgRemoveOutsideCollaboratorAuditEntry' |
'OrgRestoreMemberAuditEntry' |
'OrgUnblockUserAuditEntry' |
'OrgUpdateDefaultRepositoryPermissionAuditEntry' |
'OrgUpdateMemberAuditEntry' |
'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' |
'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' |
'PrivateRepositoryForkingDisableAuditEntry' |
'PrivateRepositoryForkingEnableAuditEntry' |
'RepoAccessAuditEntry' |
'RepoAddMemberAuditEntry' |
'RepoAddTopicAuditEntry' |
'RepoArchivedAuditEntry' |
'RepoChangeMergeSettingAuditEntry' |
'RepoConfigDisableAnonymousGitAccessAuditEntry' |
'RepoConfigDisableCollaboratorsOnlyAuditEntry' |
'RepoConfigDisableContributorsOnlyAuditEntry' |
'RepoConfigDisableSockpuppetDisallowedAuditEntry' |
'RepoConfigEnableAnonymousGitAccessAuditEntry' |
'RepoConfigEnableCollaboratorsOnlyAuditEntry' |
'RepoConfigEnableContributorsOnlyAuditEntry' |
'RepoConfigEnableSockpuppetDisallowedAuditEntry' |
'RepoConfigLockAnonymousGitAccessAuditEntry' |
'RepoConfigUnlockAnonymousGitAccessAuditEntry' |
'RepoCreateAuditEntry' |
'RepoDestroyAuditEntry' |
'RepoRemoveMemberAuditEntry' |
'RepoRemoveTopicAuditEntry' |
'RepositoryVisibilityChangeDisableAuditEntry' |
'RepositoryVisibilityChangeEnableAuditEntry' |
'TeamAddMemberAuditEntry' |
'TeamAddRepositoryAuditEntry' |
'TeamChangeParentTeamAuditEntry' |
'TeamRemoveMemberAuditEntry' |
'TeamRemoveRepositoryAuditEntry';

export interface GQLOrganizationAuditEntryNameMap {
  OrganizationAuditEntry: GQLOrganizationAuditEntry;
  MembersCanDeleteReposClearAuditEntry: GQLMembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry: GQLMembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry: GQLMembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry: GQLOauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry: GQLOrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry: GQLOrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry: GQLOrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry: GQLOrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry: GQLOrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry: GQLOrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry: GQLOrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry: GQLOrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry: GQLOrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry: GQLOrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry: GQLOrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry: GQLOrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry: GQLOrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry: GQLOrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry: GQLOrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry: GQLOrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry: GQLOrgOauthAppAccessRequestedAuditEntry;
  OrgRemoveBillingManagerAuditEntry: GQLOrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry: GQLOrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry: GQLOrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry: GQLOrgRestoreMemberAuditEntry;
  OrgUnblockUserAuditEntry: GQLOrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry: GQLOrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry: GQLOrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry: GQLPrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry: GQLPrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry: GQLRepoAccessAuditEntry;
  RepoAddMemberAuditEntry: GQLRepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry: GQLRepoAddTopicAuditEntry;
  RepoArchivedAuditEntry: GQLRepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry: GQLRepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry: GQLRepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry: GQLRepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry: GQLRepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry: GQLRepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry: GQLRepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry: GQLRepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry: GQLRepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry: GQLRepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry: GQLRepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry: GQLRepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry: GQLRepoCreateAuditEntry;
  RepoDestroyAuditEntry: GQLRepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry: GQLRepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry: GQLRepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry: GQLRepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry: GQLRepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry: GQLTeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry: GQLTeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry: GQLTeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry: GQLTeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry: GQLTeamRemoveRepositoryAuditEntry;
}

/**
 * Audit log entry for a members_can_delete_repos.clear event.
 */
export interface GQLMembersCanDeleteReposClearAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * An entry in the audit log.
 */
export interface GQLAuditEntry {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/** Use this to resolve interface type AuditEntry */
export type GQLPossibleAuditEntryTypeNames =
'MembersCanDeleteReposClearAuditEntry' |
'MembersCanDeleteReposDisableAuditEntry' |
'MembersCanDeleteReposEnableAuditEntry' |
'OauthApplicationCreateAuditEntry' |
'OrgAddBillingManagerAuditEntry' |
'OrgAddMemberAuditEntry' |
'OrgBlockUserAuditEntry' |
'OrgConfigDisableCollaboratorsOnlyAuditEntry' |
'OrgConfigEnableCollaboratorsOnlyAuditEntry' |
'OrgCreateAuditEntry' |
'OrgDisableOauthAppRestrictionsAuditEntry' |
'OrgDisableSamlAuditEntry' |
'OrgDisableTwoFactorRequirementAuditEntry' |
'OrgEnableOauthAppRestrictionsAuditEntry' |
'OrgEnableSamlAuditEntry' |
'OrgEnableTwoFactorRequirementAuditEntry' |
'OrgInviteMemberAuditEntry' |
'OrgInviteToBusinessAuditEntry' |
'OrgOauthAppAccessApprovedAuditEntry' |
'OrgOauthAppAccessDeniedAuditEntry' |
'OrgOauthAppAccessRequestedAuditEntry' |
'OrgRemoveBillingManagerAuditEntry' |
'OrgRemoveMemberAuditEntry' |
'OrgRemoveOutsideCollaboratorAuditEntry' |
'OrgRestoreMemberAuditEntry' |
'OrgUnblockUserAuditEntry' |
'OrgUpdateDefaultRepositoryPermissionAuditEntry' |
'OrgUpdateMemberAuditEntry' |
'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' |
'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' |
'PrivateRepositoryForkingDisableAuditEntry' |
'PrivateRepositoryForkingEnableAuditEntry' |
'RepoAccessAuditEntry' |
'RepoAddMemberAuditEntry' |
'RepoAddTopicAuditEntry' |
'RepoArchivedAuditEntry' |
'RepoChangeMergeSettingAuditEntry' |
'RepoConfigDisableAnonymousGitAccessAuditEntry' |
'RepoConfigDisableCollaboratorsOnlyAuditEntry' |
'RepoConfigDisableContributorsOnlyAuditEntry' |
'RepoConfigDisableSockpuppetDisallowedAuditEntry' |
'RepoConfigEnableAnonymousGitAccessAuditEntry' |
'RepoConfigEnableCollaboratorsOnlyAuditEntry' |
'RepoConfigEnableContributorsOnlyAuditEntry' |
'RepoConfigEnableSockpuppetDisallowedAuditEntry' |
'RepoConfigLockAnonymousGitAccessAuditEntry' |
'RepoConfigUnlockAnonymousGitAccessAuditEntry' |
'RepoCreateAuditEntry' |
'RepoDestroyAuditEntry' |
'RepoRemoveMemberAuditEntry' |
'RepoRemoveTopicAuditEntry' |
'RepositoryVisibilityChangeDisableAuditEntry' |
'RepositoryVisibilityChangeEnableAuditEntry' |
'TeamAddMemberAuditEntry' |
'TeamAddRepositoryAuditEntry' |
'TeamChangeParentTeamAuditEntry' |
'TeamRemoveMemberAuditEntry' |
'TeamRemoveRepositoryAuditEntry';

export interface GQLAuditEntryNameMap {
  AuditEntry: GQLAuditEntry;
  MembersCanDeleteReposClearAuditEntry: GQLMembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry: GQLMembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry: GQLMembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry: GQLOauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry: GQLOrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry: GQLOrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry: GQLOrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry: GQLOrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry: GQLOrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry: GQLOrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry: GQLOrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry: GQLOrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry: GQLOrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry: GQLOrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry: GQLOrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry: GQLOrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry: GQLOrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry: GQLOrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry: GQLOrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry: GQLOrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry: GQLOrgOauthAppAccessRequestedAuditEntry;
  OrgRemoveBillingManagerAuditEntry: GQLOrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry: GQLOrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry: GQLOrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry: GQLOrgRestoreMemberAuditEntry;
  OrgUnblockUserAuditEntry: GQLOrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry: GQLOrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry: GQLOrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry: GQLPrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry: GQLPrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry: GQLRepoAccessAuditEntry;
  RepoAddMemberAuditEntry: GQLRepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry: GQLRepoAddTopicAuditEntry;
  RepoArchivedAuditEntry: GQLRepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry: GQLRepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry: GQLRepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry: GQLRepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry: GQLRepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry: GQLRepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry: GQLRepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry: GQLRepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry: GQLRepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry: GQLRepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry: GQLRepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry: GQLRepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry: GQLRepoCreateAuditEntry;
  RepoDestroyAuditEntry: GQLRepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry: GQLRepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry: GQLRepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry: GQLRepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry: GQLRepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry: GQLTeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry: GQLTeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry: GQLTeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry: GQLTeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry: GQLTeamRemoveRepositoryAuditEntry;
}

/**
 * Types that can initiate an audit log event.
 */
export type GQLAuditEntryActor = GQLBot | GQLOrganization | GQLUser;

/** Use this to resolve union type AuditEntryActor */
export type GQLPossibleAuditEntryActorTypeNames =
'Bot' |
'Organization' |
'User';

export interface GQLAuditEntryActorNameMap {
  AuditEntryActor: GQLAuditEntryActor;
  Bot: GQLBot;
  Organization: GQLOrganization;
  User: GQLUser;
}

/**
 * Location information for an actor
 */
export interface GQLActorLocation {
  
  /**
   * City
   */
  city?: string;
  
  /**
   * Country name
   */
  country?: string;
  
  /**
   * Country code
   */
  countryCode?: string;
  
  /**
   * Region name
   */
  region?: string;
  
  /**
   * Region or state code
   */
  regionCode?: string;
}

/**
 * An ISO-8601 encoded UTC date string with millisecond precison.
 */
export type GQLPreciseDateTime = any;

/**
 * The corresponding operation type for the action
 */
export enum GQLOperationType {
  
  /**
   * An existing resource was accessed
   */
  ACCESS = 'ACCESS',
  
  /**
   * A resource performed an authentication event
   */
  AUTHENTICATION = 'AUTHENTICATION',
  
  /**
   * A new resource was created
   */
  CREATE = 'CREATE',
  
  /**
   * An existing resource was modified
   */
  MODIFY = 'MODIFY',
  
  /**
   * An existing resource was removed
   */
  REMOVE = 'REMOVE',
  
  /**
   * An existing resource was restored
   */
  RESTORE = 'RESTORE',
  
  /**
   * An existing resource was transferred between multiple resources
   */
  TRANSFER = 'TRANSFER'
}

/**
 * Metadata for an audit entry containing enterprise account information.
 */
export interface GQLEnterpriseAuditEntryData {
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
}

/** Use this to resolve interface type EnterpriseAuditEntryData */
export type GQLPossibleEnterpriseAuditEntryDataTypeNames =
'MembersCanDeleteReposClearAuditEntry' |
'MembersCanDeleteReposDisableAuditEntry' |
'MembersCanDeleteReposEnableAuditEntry' |
'OrgInviteToBusinessAuditEntry' |
'PrivateRepositoryForkingDisableAuditEntry' |
'PrivateRepositoryForkingEnableAuditEntry' |
'RepositoryVisibilityChangeDisableAuditEntry' |
'RepositoryVisibilityChangeEnableAuditEntry';

export interface GQLEnterpriseAuditEntryDataNameMap {
  EnterpriseAuditEntryData: GQLEnterpriseAuditEntryData;
  MembersCanDeleteReposClearAuditEntry: GQLMembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry: GQLMembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry: GQLMembersCanDeleteReposEnableAuditEntry;
  OrgInviteToBusinessAuditEntry: GQLOrgInviteToBusinessAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry: GQLPrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry: GQLPrivateRepositoryForkingEnableAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry: GQLRepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry: GQLRepositoryVisibilityChangeEnableAuditEntry;
}

/**
 * Metadata for an audit entry with action org.*
 */
export interface GQLOrganizationAuditEntryData {
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
}

/** Use this to resolve interface type OrganizationAuditEntryData */
export type GQLPossibleOrganizationAuditEntryDataTypeNames =
'MembersCanDeleteReposClearAuditEntry' |
'MembersCanDeleteReposDisableAuditEntry' |
'MembersCanDeleteReposEnableAuditEntry' |
'OauthApplicationCreateAuditEntry' |
'OrgAddBillingManagerAuditEntry' |
'OrgAddMemberAuditEntry' |
'OrgBlockUserAuditEntry' |
'OrgConfigDisableCollaboratorsOnlyAuditEntry' |
'OrgConfigEnableCollaboratorsOnlyAuditEntry' |
'OrgCreateAuditEntry' |
'OrgDisableOauthAppRestrictionsAuditEntry' |
'OrgDisableSamlAuditEntry' |
'OrgDisableTwoFactorRequirementAuditEntry' |
'OrgEnableOauthAppRestrictionsAuditEntry' |
'OrgEnableSamlAuditEntry' |
'OrgEnableTwoFactorRequirementAuditEntry' |
'OrgInviteMemberAuditEntry' |
'OrgInviteToBusinessAuditEntry' |
'OrgOauthAppAccessApprovedAuditEntry' |
'OrgOauthAppAccessDeniedAuditEntry' |
'OrgOauthAppAccessRequestedAuditEntry' |
'OrgRemoveBillingManagerAuditEntry' |
'OrgRemoveMemberAuditEntry' |
'OrgRemoveOutsideCollaboratorAuditEntry' |
'OrgRestoreMemberAuditEntry' |
'OrgRestoreMemberMembershipOrganizationAuditEntryData' |
'OrgUnblockUserAuditEntry' |
'OrgUpdateDefaultRepositoryPermissionAuditEntry' |
'OrgUpdateMemberAuditEntry' |
'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' |
'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' |
'PrivateRepositoryForkingDisableAuditEntry' |
'PrivateRepositoryForkingEnableAuditEntry' |
'RepoAccessAuditEntry' |
'RepoAddMemberAuditEntry' |
'RepoAddTopicAuditEntry' |
'RepoArchivedAuditEntry' |
'RepoChangeMergeSettingAuditEntry' |
'RepoConfigDisableAnonymousGitAccessAuditEntry' |
'RepoConfigDisableCollaboratorsOnlyAuditEntry' |
'RepoConfigDisableContributorsOnlyAuditEntry' |
'RepoConfigDisableSockpuppetDisallowedAuditEntry' |
'RepoConfigEnableAnonymousGitAccessAuditEntry' |
'RepoConfigEnableCollaboratorsOnlyAuditEntry' |
'RepoConfigEnableContributorsOnlyAuditEntry' |
'RepoConfigEnableSockpuppetDisallowedAuditEntry' |
'RepoConfigLockAnonymousGitAccessAuditEntry' |
'RepoConfigUnlockAnonymousGitAccessAuditEntry' |
'RepoCreateAuditEntry' |
'RepoDestroyAuditEntry' |
'RepoRemoveMemberAuditEntry' |
'RepoRemoveTopicAuditEntry' |
'RepositoryVisibilityChangeDisableAuditEntry' |
'RepositoryVisibilityChangeEnableAuditEntry' |
'TeamAddMemberAuditEntry' |
'TeamAddRepositoryAuditEntry' |
'TeamChangeParentTeamAuditEntry' |
'TeamRemoveMemberAuditEntry' |
'TeamRemoveRepositoryAuditEntry';

export interface GQLOrganizationAuditEntryDataNameMap {
  OrganizationAuditEntryData: GQLOrganizationAuditEntryData;
  MembersCanDeleteReposClearAuditEntry: GQLMembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry: GQLMembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry: GQLMembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry: GQLOauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry: GQLOrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry: GQLOrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry: GQLOrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry: GQLOrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry: GQLOrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry: GQLOrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry: GQLOrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry: GQLOrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry: GQLOrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry: GQLOrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry: GQLOrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry: GQLOrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry: GQLOrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry: GQLOrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry: GQLOrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry: GQLOrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry: GQLOrgOauthAppAccessRequestedAuditEntry;
  OrgRemoveBillingManagerAuditEntry: GQLOrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry: GQLOrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry: GQLOrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry: GQLOrgRestoreMemberAuditEntry;
  OrgRestoreMemberMembershipOrganizationAuditEntryData: GQLOrgRestoreMemberMembershipOrganizationAuditEntryData;
  OrgUnblockUserAuditEntry: GQLOrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry: GQLOrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry: GQLOrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry: GQLPrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry: GQLPrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry: GQLRepoAccessAuditEntry;
  RepoAddMemberAuditEntry: GQLRepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry: GQLRepoAddTopicAuditEntry;
  RepoArchivedAuditEntry: GQLRepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry: GQLRepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry: GQLRepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry: GQLRepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry: GQLRepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry: GQLRepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry: GQLRepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry: GQLRepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry: GQLRepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry: GQLRepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry: GQLRepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry: GQLRepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry: GQLRepoCreateAuditEntry;
  RepoDestroyAuditEntry: GQLRepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry: GQLRepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry: GQLRepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry: GQLRepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry: GQLRepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry: GQLTeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry: GQLTeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry: GQLTeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry: GQLTeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry: GQLTeamRemoveRepositoryAuditEntry;
}

/**
 * Audit log entry for a members_can_delete_repos.disable event.
 */
export interface GQLMembersCanDeleteReposDisableAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a members_can_delete_repos.enable event.
 */
export interface GQLMembersCanDeleteReposEnableAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a oauth_application.create event.
 */
export interface GQLOauthApplicationCreateAuditEntry extends GQLAuditEntry, GQLNode, GQLOauthApplicationAuditEntryData, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The application URL of the OAuth Application.
   */
  applicationUrl?: GQLURI;
  
  /**
   * The callback URL of the OAuth Application.
   */
  callbackUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName?: string;
  
  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl?: GQLURI;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The rate limit of the OAuth Application.
   */
  rateLimit?: number;
  
  /**
   * The state of the OAuth Application.
   */
  state?: GQLOauthApplicationCreateAuditEntryState;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Metadata for an audit entry with action oauth_application.*
 */
export interface GQLOauthApplicationAuditEntryData {
  
  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName?: string;
  
  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl?: GQLURI;
}

/** Use this to resolve interface type OauthApplicationAuditEntryData */
export type GQLPossibleOauthApplicationAuditEntryDataTypeNames =
'OauthApplicationCreateAuditEntry' |
'OrgOauthAppAccessApprovedAuditEntry' |
'OrgOauthAppAccessDeniedAuditEntry' |
'OrgOauthAppAccessRequestedAuditEntry';

export interface GQLOauthApplicationAuditEntryDataNameMap {
  OauthApplicationAuditEntryData: GQLOauthApplicationAuditEntryData;
  OauthApplicationCreateAuditEntry: GQLOauthApplicationCreateAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry: GQLOrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry: GQLOrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry: GQLOrgOauthAppAccessRequestedAuditEntry;
}

/**
 * The state of an OAuth Application when it was created.
 */
export enum GQLOauthApplicationCreateAuditEntryState {
  
  /**
   * The OAuth Application was active and allowed to have OAuth Accesses.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * The OAuth Application was in the process of being deleted.
   */
  PENDING_DELETION = 'PENDING_DELETION',
  
  /**
   * The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
   */
  SUSPENDED = 'SUSPENDED'
}

/**
 * Audit log entry for a org.add_billing_manager
 */
export interface GQLOrgAddBillingManagerAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The email address used to invite a billing manager for the organization.
   */
  invitationEmail?: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.add_member
 */
export interface GQLOrgAddMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The permission level of the member added to the organization.
   */
  permission?: GQLOrgAddMemberAuditEntryPermission;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The permissions available to members on an Organization.
 */
export enum GQLOrgAddMemberAuditEntryPermission {
  
  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',
  
  /**
   * Can read and clone repositories.
   */
  READ = 'READ'
}

/**
 * Audit log entry for a org.block_user
 */
export interface GQLOrgBlockUserAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The blocked user.
   */
  blockedUser?: GQLUser;
  
  /**
   * The username of the blocked user.
   */
  blockedUserName?: string;
  
  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.config.disable_collaborators_only event.
 */
export interface GQLOrgConfigDisableCollaboratorsOnlyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.config.enable_collaborators_only event.
 */
export interface GQLOrgConfigEnableCollaboratorsOnlyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.create event.
 */
export interface GQLOrgCreateAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The billing plan for the Organization.
   */
  billingPlan?: GQLOrgCreateAuditEntryBillingPlan;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The billing plans available for organizations.
 */
export enum GQLOrgCreateAuditEntryBillingPlan {
  
  /**
   * Team Plan
   */
  BUSINESS = 'BUSINESS',
  
  /**
   * Enterprise Cloud Plan
   */
  BUSINESS_PLUS = 'BUSINESS_PLUS',
  
  /**
   * Free Plan
   */
  FREE = 'FREE',
  
  /**
   * Tiered Per Seat Plan
   */
  TIERED_PER_SEAT = 'TIERED_PER_SEAT',
  
  /**
   * Legacy Unlimited Plan
   */
  UNLIMITED = 'UNLIMITED'
}

/**
 * Audit log entry for a org.disable_oauth_app_restrictions event.
 */
export interface GQLOrgDisableOauthAppRestrictionsAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.disable_saml event.
 */
export interface GQLOrgDisableSamlAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl?: GQLURI;
  id: string;
  
  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl?: GQLURI;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl?: GQLURI;
  
  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.disable_two_factor_requirement event.
 */
export interface GQLOrgDisableTwoFactorRequirementAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.enable_oauth_app_restrictions event.
 */
export interface GQLOrgEnableOauthAppRestrictionsAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.enable_saml event.
 */
export interface GQLOrgEnableSamlAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl?: GQLURI;
  id: string;
  
  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl?: GQLURI;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl?: GQLURI;
  
  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.enable_two_factor_requirement event.
 */
export interface GQLOrgEnableTwoFactorRequirementAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.invite_member event.
 */
export interface GQLOrgInviteMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The email address of the organization invitation.
   */
  email?: string;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The organization invitation.
   */
  organizationInvitation?: GQLOrganizationInvitation;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.invite_to_business event.
 */
export interface GQLOrgInviteToBusinessAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.oauth_app_access_approved event.
 */
export interface GQLOrgOauthAppAccessApprovedAuditEntry extends GQLAuditEntry, GQLNode, GQLOauthApplicationAuditEntryData, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName?: string;
  
  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl?: GQLURI;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.oauth_app_access_denied event.
 */
export interface GQLOrgOauthAppAccessDeniedAuditEntry extends GQLAuditEntry, GQLNode, GQLOauthApplicationAuditEntryData, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName?: string;
  
  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl?: GQLURI;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.oauth_app_access_requested event.
 */
export interface GQLOrgOauthAppAccessRequestedAuditEntry extends GQLAuditEntry, GQLNode, GQLOauthApplicationAuditEntryData, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName?: string;
  
  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl?: GQLURI;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.remove_billing_manager event.
 */
export interface GQLOrgRemoveBillingManagerAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The reason for the billing manager being removed.
   */
  reason?: GQLOrgRemoveBillingManagerAuditEntryReason;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The reason a billing manager was removed from an Organization.
 */
export enum GQLOrgRemoveBillingManagerAuditEntryReason {
  
  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',
  
  /**
   * SAML SSO enforcement requires an external identity
   */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',
  
  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
}

/**
 * Audit log entry for a org.remove_member event.
 */
export interface GQLOrgRemoveMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The types of membership the member has with the organization.
   */
  membershipTypes?: Array<GQLOrgRemoveMemberAuditEntryMembershipType>;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The reason for the member being removed.
   */
  reason?: GQLOrgRemoveMemberAuditEntryReason;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The type of membership a user has with an Organization.
 */
export enum GQLOrgRemoveMemberAuditEntryMembershipType {
  
  /**
   * Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
   */
  ADMIN = 'ADMIN',
  
  /**
   * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
  
  /**
   * A direct member is a user that is a member of the Organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  
  /**
   * An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
   */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',
  
  /**
   * An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
   */
  UNAFFILIATED = 'UNAFFILIATED'
}

/**
 * The reason a member was removed from an Organization.
 */
export enum GQLOrgRemoveMemberAuditEntryReason {
  
  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',
  
  /**
   * SAML SSO enforcement requires an external identity
   */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',
  
  /**
   * User was removed from organization during account recovery
   */
  TWO_FACTOR_ACCOUNT_RECOVERY = 'TWO_FACTOR_ACCOUNT_RECOVERY',
  
  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',
  
  /**
   * User account has been deleted
   */
  USER_ACCOUNT_DELETED = 'USER_ACCOUNT_DELETED'
}

/**
 * Audit log entry for a org.remove_outside_collaborator event.
 */
export interface GQLOrgRemoveOutsideCollaboratorAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The types of membership the outside collaborator has with the organization.
   */
  membershipTypes?: Array<GQLOrgRemoveOutsideCollaboratorAuditEntryMembershipType>;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The reason for the outside collaborator being removed from the Organization.
   */
  reason?: GQLOrgRemoveOutsideCollaboratorAuditEntryReason;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The type of membership a user has with an Organization.
 */
export enum GQLOrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  
  /**
   * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
  
  /**
   * An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
   */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',
  
  /**
   * An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
   */
  UNAFFILIATED = 'UNAFFILIATED'
}

/**
 * The reason an outside collaborator was removed from an Organization.
 */
export enum GQLOrgRemoveOutsideCollaboratorAuditEntryReason {
  
  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',
  
  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
}

/**
 * Audit log entry for a org.restore_member event.
 */
export interface GQLOrgRestoreMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The number of custom email routings for the restored member.
   */
  restoredCustomEmailRoutingsCount?: number;
  
  /**
   * The number of issue assignemnts for the restored member.
   */
  restoredIssueAssignmentsCount?: number;
  
  /**
   * Restored organization membership objects.
   */
  restoredMemberships?: Array<GQLOrgRestoreMemberAuditEntryMembership>;
  
  /**
   * The number of restored memberships.
   */
  restoredMembershipsCount?: number;
  
  /**
   * The number of repositories of the restored member.
   */
  restoredRepositoriesCount?: number;
  
  /**
   * The number of starred repositories for the restored member.
   */
  restoredRepositoryStarsCount?: number;
  
  /**
   * The number of watched repositories for the restored member.
   */
  restoredRepositoryWatchesCount?: number;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Types of memberships that can be restored for an Organization member.
 */
export type GQLOrgRestoreMemberAuditEntryMembership =
GQLOrgRestoreMemberMembershipOrganizationAuditEntryData |
GQLOrgRestoreMemberMembershipRepositoryAuditEntryData |
GQLOrgRestoreMemberMembershipTeamAuditEntryData;

/** Use this to resolve union type OrgRestoreMemberAuditEntryMembership */
export type GQLPossibleOrgRestoreMemberAuditEntryMembershipTypeNames =
'OrgRestoreMemberMembershipOrganizationAuditEntryData' |
'OrgRestoreMemberMembershipRepositoryAuditEntryData' |
'OrgRestoreMemberMembershipTeamAuditEntryData';

export interface GQLOrgRestoreMemberAuditEntryMembershipNameMap {
  OrgRestoreMemberAuditEntryMembership: GQLOrgRestoreMemberAuditEntryMembership;
  OrgRestoreMemberMembershipOrganizationAuditEntryData: GQLOrgRestoreMemberMembershipOrganizationAuditEntryData;
  OrgRestoreMemberMembershipRepositoryAuditEntryData: GQLOrgRestoreMemberMembershipRepositoryAuditEntryData;
  OrgRestoreMemberMembershipTeamAuditEntryData: GQLOrgRestoreMemberMembershipTeamAuditEntryData;
}

/**
 * Metadata for an organization membership for org.restore_member actions
 */
export interface GQLOrgRestoreMemberMembershipOrganizationAuditEntryData extends GQLOrganizationAuditEntryData {
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
}

/**
 * Metadata for a repository membership for org.restore_member actions
 */
export interface GQLOrgRestoreMemberMembershipRepositoryAuditEntryData extends GQLRepositoryAuditEntryData {
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
}

/**
 * Metadata for an audit entry with action repo.*
 */
export interface GQLRepositoryAuditEntryData {
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
}

/** Use this to resolve interface type RepositoryAuditEntryData */
export type GQLPossibleRepositoryAuditEntryDataTypeNames =
'OrgRestoreMemberMembershipRepositoryAuditEntryData' |
'PrivateRepositoryForkingDisableAuditEntry' |
'PrivateRepositoryForkingEnableAuditEntry' |
'RepoAccessAuditEntry' |
'RepoAddMemberAuditEntry' |
'RepoAddTopicAuditEntry' |
'RepoArchivedAuditEntry' |
'RepoChangeMergeSettingAuditEntry' |
'RepoConfigDisableAnonymousGitAccessAuditEntry' |
'RepoConfigDisableCollaboratorsOnlyAuditEntry' |
'RepoConfigDisableContributorsOnlyAuditEntry' |
'RepoConfigDisableSockpuppetDisallowedAuditEntry' |
'RepoConfigEnableAnonymousGitAccessAuditEntry' |
'RepoConfigEnableCollaboratorsOnlyAuditEntry' |
'RepoConfigEnableContributorsOnlyAuditEntry' |
'RepoConfigEnableSockpuppetDisallowedAuditEntry' |
'RepoConfigLockAnonymousGitAccessAuditEntry' |
'RepoConfigUnlockAnonymousGitAccessAuditEntry' |
'RepoCreateAuditEntry' |
'RepoDestroyAuditEntry' |
'RepoRemoveMemberAuditEntry' |
'RepoRemoveTopicAuditEntry' |
'TeamAddRepositoryAuditEntry' |
'TeamRemoveRepositoryAuditEntry';

export interface GQLRepositoryAuditEntryDataNameMap {
  RepositoryAuditEntryData: GQLRepositoryAuditEntryData;
  OrgRestoreMemberMembershipRepositoryAuditEntryData: GQLOrgRestoreMemberMembershipRepositoryAuditEntryData;
  PrivateRepositoryForkingDisableAuditEntry: GQLPrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry: GQLPrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry: GQLRepoAccessAuditEntry;
  RepoAddMemberAuditEntry: GQLRepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry: GQLRepoAddTopicAuditEntry;
  RepoArchivedAuditEntry: GQLRepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry: GQLRepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry: GQLRepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry: GQLRepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry: GQLRepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry: GQLRepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry: GQLRepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry: GQLRepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry: GQLRepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry: GQLRepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry: GQLRepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry: GQLRepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry: GQLRepoCreateAuditEntry;
  RepoDestroyAuditEntry: GQLRepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry: GQLRepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry: GQLRepoRemoveTopicAuditEntry;
  TeamAddRepositoryAuditEntry: GQLTeamAddRepositoryAuditEntry;
  TeamRemoveRepositoryAuditEntry: GQLTeamRemoveRepositoryAuditEntry;
}

/**
 * Metadata for a team membership for org.restore_member actions
 */
export interface GQLOrgRestoreMemberMembershipTeamAuditEntryData extends GQLTeamAuditEntryData {
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
}

/**
 * Metadata for an audit entry with action team.*
 */
export interface GQLTeamAuditEntryData {
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
}

/** Use this to resolve interface type TeamAuditEntryData */
export type GQLPossibleTeamAuditEntryDataTypeNames =
'OrgRestoreMemberMembershipTeamAuditEntryData' |
'TeamAddMemberAuditEntry' |
'TeamAddRepositoryAuditEntry' |
'TeamChangeParentTeamAuditEntry' |
'TeamRemoveMemberAuditEntry' |
'TeamRemoveRepositoryAuditEntry';

export interface GQLTeamAuditEntryDataNameMap {
  TeamAuditEntryData: GQLTeamAuditEntryData;
  OrgRestoreMemberMembershipTeamAuditEntryData: GQLOrgRestoreMemberMembershipTeamAuditEntryData;
  TeamAddMemberAuditEntry: GQLTeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry: GQLTeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry: GQLTeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry: GQLTeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry: GQLTeamRemoveRepositoryAuditEntry;
}

/**
 * Audit log entry for a org.unblock_user
 */
export interface GQLOrgUnblockUserAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The user being unblocked by the organization.
   */
  blockedUser?: GQLUser;
  
  /**
   * The username of the blocked user.
   */
  blockedUserName?: string;
  
  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a org.update_default_repository_permission
 */
export interface GQLOrgUpdateDefaultRepositoryPermissionAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The new default repository permission level for the organization.
   */
  permission?: GQLOrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
  
  /**
   * The former default repository permission level for the organization.
   */
  permissionWas?: GQLOrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The default permission a repository can have in an Organization.
 */
export enum GQLOrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  
  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',
  
  /**
   * No default permission value.
   */
  NONE = 'NONE',
  
  /**
   * Can read and clone repositories.
   */
  READ = 'READ',
  
  /**
   * Can read, clone and push to repositories.
   */
  WRITE = 'WRITE'
}

/**
 * Audit log entry for a org.update_member event.
 */
export interface GQLOrgUpdateMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The new member permission level for the organization.
   */
  permission?: GQLOrgUpdateMemberAuditEntryPermission;
  
  /**
   * The former member permission level for the organization.
   */
  permissionWas?: GQLOrgUpdateMemberAuditEntryPermission;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The permissions available to members on an Organization.
 */
export enum GQLOrgUpdateMemberAuditEntryPermission {
  
  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',
  
  /**
   * Can read and clone repositories.
   */
  READ = 'READ'
}

/**
 * Audit log entry for a org.update_member_repository_creation_permission event.
 */
export interface GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * Can members create repositories in the organization.
   */
  canCreateRepositories?: boolean;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The permission for visibility level of repositories for this organization.
   */
  visibility?: GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
}

/**
 * The permissions available for repository creation on an Organization.
 */
export enum GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  
  /**
   * All organization members are restricted from creating any repositories.
   */
  ALL = 'ALL',
  
  /**
   * All organization members are restricted from creating public repositories.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a org.update_member_repository_invitation_permission event.
 */
export interface GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * Can outside collaborators be invited to repositories in the organization.
   */
  canInviteOutsideCollaboratorsToRepositories?: boolean;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a private_repository_forking.disable event.
 */
export interface GQLPrivateRepositoryForkingDisableAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a private_repository_forking.enable event.
 */
export interface GQLPrivateRepositoryForkingEnableAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.access event.
 */
export interface GQLRepoAccessAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The visibility of the repository
   */
  visibility?: GQLRepoAccessAuditEntryVisibility;
}

/**
 * The privacy of a repository
 */
export enum GQLRepoAccessAuditEntryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.add_member event.
 */
export interface GQLRepoAddMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The visibility of the repository
   */
  visibility?: GQLRepoAddMemberAuditEntryVisibility;
}

/**
 * The privacy of a repository
 */
export enum GQLRepoAddMemberAuditEntryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.add_topic event.
 */
export interface GQLRepoAddTopicAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData, GQLTopicAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The name of the topic added to the repository
   */
  topic?: GQLTopic;
  
  /**
   * The name of the topic added to the repository
   */
  topicName?: string;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Metadata for an audit entry with a topic.
 */
export interface GQLTopicAuditEntryData {
  
  /**
   * The name of the topic added to the repository
   */
  topic?: GQLTopic;
  
  /**
   * The name of the topic added to the repository
   */
  topicName?: string;
}

/** Use this to resolve interface type TopicAuditEntryData */
export type GQLPossibleTopicAuditEntryDataTypeNames =
'RepoAddTopicAuditEntry' |
'RepoRemoveTopicAuditEntry';

export interface GQLTopicAuditEntryDataNameMap {
  TopicAuditEntryData: GQLTopicAuditEntryData;
  RepoAddTopicAuditEntry: GQLRepoAddTopicAuditEntry;
  RepoRemoveTopicAuditEntry: GQLRepoRemoveTopicAuditEntry;
}

/**
 * Audit log entry for a repo.archived event.
 */
export interface GQLRepoArchivedAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The visibility of the repository
   */
  visibility?: GQLRepoArchivedAuditEntryVisibility;
}

/**
 * The privacy of a repository
 */
export enum GQLRepoArchivedAuditEntryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.change_merge_setting event.
 */
export interface GQLRepoChangeMergeSettingAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * Whether the change was to enable (true) or disable (false) the merge type
   */
  isEnabled?: boolean;
  
  /**
   * The merge method affected by the change
   */
  mergeType?: GQLRepoChangeMergeSettingAuditEntryMergeType;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The merge options available for pull requests to this repository.
 */
export enum GQLRepoChangeMergeSettingAuditEntryMergeType {
  
  /**
   * The pull request is added to the base branch in a merge commit.
   */
  MERGE = 'MERGE',
  
  /**
   * Commits from the pull request are added onto the base branch individually without a merge commit.
   */
  REBASE = 'REBASE',
  
  /**
   * The pull request's commits are squashed into a single commit before they are merged to the base branch.
   */
  SQUASH = 'SQUASH'
}

/**
 * Audit log entry for a repo.config.disable_anonymous_git_access event.
 */
export interface GQLRepoConfigDisableAnonymousGitAccessAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.disable_collaborators_only event.
 */
export interface GQLRepoConfigDisableCollaboratorsOnlyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.disable_contributors_only event.
 */
export interface GQLRepoConfigDisableContributorsOnlyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
 */
export interface GQLRepoConfigDisableSockpuppetDisallowedAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.enable_anonymous_git_access event.
 */
export interface GQLRepoConfigEnableAnonymousGitAccessAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.enable_collaborators_only event.
 */
export interface GQLRepoConfigEnableCollaboratorsOnlyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.enable_contributors_only event.
 */
export interface GQLRepoConfigEnableContributorsOnlyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
 */
export interface GQLRepoConfigEnableSockpuppetDisallowedAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.lock_anonymous_git_access event.
 */
export interface GQLRepoConfigLockAnonymousGitAccessAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.config.unlock_anonymous_git_access event.
 */
export interface GQLRepoConfigUnlockAnonymousGitAccessAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repo.create event.
 */
export interface GQLRepoCreateAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The name of the parent repository for this forked repository.
   */
  forkParentName?: string;
  
  /**
   * The name of the root repository for this netork.
   */
  forkSourceName?: string;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The visibility of the repository
   */
  visibility?: GQLRepoCreateAuditEntryVisibility;
}

/**
 * The privacy of a repository
 */
export enum GQLRepoCreateAuditEntryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.destroy event.
 */
export interface GQLRepoDestroyAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The visibility of the repository
   */
  visibility?: GQLRepoDestroyAuditEntryVisibility;
}

/**
 * The privacy of a repository
 */
export enum GQLRepoDestroyAuditEntryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.remove_member event.
 */
export interface GQLRepoRemoveMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
  
  /**
   * The visibility of the repository
   */
  visibility?: GQLRepoRemoveMemberAuditEntryVisibility;
}

/**
 * The privacy of a repository
 */
export enum GQLRepoRemoveMemberAuditEntryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.remove_topic event.
 */
export interface GQLRepoRemoveTopicAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData, GQLTopicAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The name of the topic added to the repository
   */
  topic?: GQLTopic;
  
  /**
   * The name of the topic added to the repository
   */
  topicName?: string;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repository_visibility_change.disable event.
 */
export interface GQLRepositoryVisibilityChangeDisableAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a repository_visibility_change.enable event.
 */
export interface GQLRepositoryVisibilityChangeEnableAuditEntry extends GQLAuditEntry, GQLEnterpriseAuditEntryData, GQLNode, GQLOrganizationAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: GQLURI;
  
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: string;
  
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: GQLURI;
  id: string;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a team.add_member event.
 */
export interface GQLTeamAddMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLTeamAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: boolean;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a team.add_repository event.
 */
export interface GQLTeamAddRepositoryAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData, GQLTeamAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: boolean;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a team.change_parent_team event.
 */
export interface GQLTeamChangeParentTeamAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLTeamAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: boolean;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The new parent team.
   */
  parentTeam?: GQLTeam;
  
  /**
   * The name of the new parent team
   */
  parentTeamName?: string;
  
  /**
   * The name of the former parent team
   */
  parentTeamNameWas?: string;
  
  /**
   * The HTTP path for the parent team
   */
  parentTeamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the parent team
   */
  parentTeamUrl?: GQLURI;
  
  /**
   * The former parent team.
   */
  parentTeamWas?: GQLTeam;
  
  /**
   * The HTTP path for the previous parent team
   */
  parentTeamWasResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the previous parent team
   */
  parentTeamWasUrl?: GQLURI;
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a team.remove_member event.
 */
export interface GQLTeamRemoveMemberAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLTeamAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: boolean;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * Audit log entry for a team.remove_repository event.
 */
export interface GQLTeamRemoveRepositoryAuditEntry extends GQLAuditEntry, GQLNode, GQLOrganizationAuditEntryData, GQLRepositoryAuditEntryData, GQLTeamAuditEntryData {
  
  /**
   * The action name
   */
  action: string;
  
  /**
   * The user who initiated the action
   */
  actor?: GQLAuditEntryActor;
  
  /**
   * The IP address of the actor
   */
  actorIp?: string;
  
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: GQLActorLocation;
  
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: string;
  
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: GQLURI;
  
  /**
   * The time the action was initiated
   */
  createdAt: GQLPreciseDateTime;
  id: string;
  
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: boolean;
  
  /**
   * The corresponding operation type for the action
   */
  operationType?: GQLOperationType;
  
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: GQLOrganization;
  
  /**
   * The name of the Organization.
   */
  organizationName?: string;
  
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: GQLURI;
  
  /**
   * The repository associated with the action
   */
  repository?: GQLRepository;
  
  /**
   * The name of the repository
   */
  repositoryName?: string;
  
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: GQLURI;
  
  /**
   * The team associated with the action
   */
  team?: GQLTeam;
  
  /**
   * The name of the team
   */
  teamName?: string;
  
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for this team
   */
  teamUrl?: GQLURI;
  
  /**
   * The user affected by the action
   */
  user?: GQLUser;
  
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: string;
  
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: GQLURI;
  
  /**
   * The HTTP URL for the user.
   */
  userUrl?: GQLURI;
}

/**
 * The possible values for the IP allow list enabled setting.
 */
export enum GQLIpAllowListEnabledSettingValue {
  
  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',
  
  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED'
}

/**
 * Ordering options for IP allow list entry connections.
 */
export interface GQLIpAllowListEntryOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order IP allow list entries by.
   */
  field: GQLIpAllowListEntryOrderField;
}

/**
 * Properties by which IP allow list entry connections can be ordered.
 */
export enum GQLIpAllowListEntryOrderField {
  
  /**
   * Order IP allow list entries by the allow list value.
   */
  ALLOW_LIST_VALUE = 'ALLOW_LIST_VALUE',
  
  /**
   * Order IP allow list entries by creation time.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for IpAllowListEntry.
 */
export interface GQLIpAllowListEntryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLIpAllowListEntryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLIpAllowListEntry | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLIpAllowListEntryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLIpAllowListEntry;
}

/**
 * An IP address or range of addresses that is allowed to access an owner's resources.
 */
export interface GQLIpAllowListEntry extends GQLNode {
  
  /**
   * A single IP address or range of IP addresses in CIDR notation.
   */
  allowListValue: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  id: string;
  
  /**
   * Whether the entry is currently active.
   */
  isActive: boolean;
  
  /**
   * The name of the IP allow list entry.
   */
  name?: string;
  
  /**
   * The owner of the IP allow list entry.
   */
  owner: GQLIpAllowListOwner;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * Types that can own an IP allow list.
 */
export type GQLIpAllowListOwner = GQLEnterprise | GQLOrganization;

/** Use this to resolve union type IpAllowListOwner */
export type GQLPossibleIpAllowListOwnerTypeNames =
'Enterprise' |
'Organization';

export interface GQLIpAllowListOwnerNameMap {
  IpAllowListOwner: GQLIpAllowListOwner;
  Enterprise: GQLEnterprise;
  Organization: GQLOrganization;
}

/**
 * The connection type for User.
 */
export interface GQLOrganizationMemberConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLOrganizationMemberEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user within an organization.
 */
export interface GQLOrganizationMemberEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
   */
  hasTwoFactorEnabled?: boolean;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUser;
  
  /**
   * The role this user has in the organization.
   */
  role?: GQLOrganizationMemberRole;
}

/**
 * The possible roles within an organization for its members.
 */
export enum GQLOrganizationMemberRole {
  
  /**
   * The user is an administrator of the organization.
   */
  ADMIN = 'ADMIN',
  
  /**
   * The user is a member of the organization.
   */
  MEMBER = 'MEMBER'
}

/**
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations
 */
export interface GQLOrganizationIdentityProvider extends GQLNode {
  
  /**
   * The digest algorithm used to sign SAML requests for the Identity Provider.
   */
  digestMethod?: GQLURI;
  
  /**
   * External Identities provisioned by this Identity Provider
   */
  externalIdentities: GQLExternalIdentityConnection;
  id: string;
  
  /**
   * The x509 certificate used by the Identity Provder to sign assertions and responses.
   */
  idpCertificate?: GQLX509Certificate;
  
  /**
   * The Issuer Entity ID for the SAML Identity Provider
   */
  issuer?: string;
  
  /**
   * Organization this Identity Provider belongs to
   */
  organization?: GQLOrganization;
  
  /**
   * The signature algorithm used to sign SAML requests for the Identity Provider.
   */
  signatureMethod?: GQLURI;
  
  /**
   * The URL endpoint for the Identity Provider's SAML SSO.
   */
  ssoUrl?: GQLURI;
}

/**
 * The connection type for ExternalIdentity.
 */
export interface GQLExternalIdentityConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLExternalIdentityEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLExternalIdentity | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLExternalIdentityEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLExternalIdentity;
}

/**
 * An external identity provisioned by SAML SSO or SCIM.
 */
export interface GQLExternalIdentity extends GQLNode {
  
  /**
   * The GUID for this identity
   */
  guid: string;
  id: string;
  
  /**
   * Organization invitation for this SCIM-provisioned external identity
   */
  organizationInvitation?: GQLOrganizationInvitation;
  
  /**
   * SAML Identity attributes
   */
  samlIdentity?: GQLExternalIdentitySamlAttributes;
  
  /**
   * SCIM Identity attributes
   */
  scimIdentity?: GQLExternalIdentityScimAttributes;
  
  /**
   * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
   */
  user?: GQLUser;
}

/**
 * SAML attributes for the External Identity
 */
export interface GQLExternalIdentitySamlAttributes {
  
  /**
   * The NameID of the SAML identity
   */
  nameId?: string;
}

/**
 * SCIM attributes for the External Identity
 */
export interface GQLExternalIdentityScimAttributes {
  
  /**
   * The userName of the SCIM identity
   */
  username?: string;
}

/**
 * A valid x509 certificate string
 */
export type GQLX509Certificate = any;

/**
 * The role of a user on a team.
 */
export enum GQLTeamRole {
  
  /**
   * User has admin rights on the team.
   */
  ADMIN = 'ADMIN',
  
  /**
   * User is a member of the team.
   */
  MEMBER = 'MEMBER'
}

/**
 * Enterprise information only visible to enterprise owners.
 */
export interface GQLEnterpriseOwnerInfo {
  
  /**
   * A list of enterprise organizations configured with the provided action execution capabilities setting value.
   */
  actionExecutionCapabilitySettingOrganizations: GQLOrganizationConnection;
  
  /**
   * A list of all of the administrators for this enterprise.
   */
  admins: GQLEnterpriseAdministratorConnection;
  
  /**
   * A list of users in the enterprise who currently have two-factor authentication disabled.
   */
  affiliatedUsersWithTwoFactorDisabled: GQLUserConnection;
  
  /**
   * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
   */
  affiliatedUsersWithTwoFactorDisabledExist: boolean;
  
  /**
   * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
   */
  allowPrivateRepositoryForkingSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided private repository forking setting value.
   */
  allowPrivateRepositoryForkingSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for base repository permissions for organizations in this enterprise.
   */
  defaultRepositoryPermissionSetting: GQLEnterpriseDefaultRepositoryPermissionSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided default repository permission.
   */
  defaultRepositoryPermissionSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * Enterprise Server installations owned by the enterprise.
   */
  enterpriseServerInstallations: GQLEnterpriseServerInstallationConnection;
  
  /**
   * The setting value for whether the enterprise has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: GQLIpAllowListEnabledSettingValue;
  
  /**
   * The IP addresses that are allowed to access resources owned by the enterprise.
   */
  ipAllowListEntries: GQLIpAllowListEntryConnection;
  
  /**
   * Whether or not the default repository permission is currently being updated.
   */
  isUpdatingDefaultRepositoryPermission: boolean;
  
  /**
   * Whether the two-factor authentication requirement is currently being enforced.
   */
  isUpdatingTwoFactorRequirement: boolean;
  
  /**
   * The setting value for whether organization members with admin permissions on a repository can change repository visibility.
   */
  membersCanChangeRepositoryVisibilitySetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided can change repository visibility setting value.
   */
  membersCanChangeRepositoryVisibilitySettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether members of organizations in the enterprise can create internal repositories.
   */
  membersCanCreateInternalRepositoriesSetting?: boolean;
  
  /**
   * The setting value for whether members of organizations in the enterprise can create private repositories.
   */
  membersCanCreatePrivateRepositoriesSetting?: boolean;
  
  /**
   * The setting value for whether members of organizations in the enterprise can create public repositories.
   */
  membersCanCreatePublicRepositoriesSetting?: boolean;
  
  /**
   * The setting value for whether members of organizations in the enterprise can create repositories.
   */
  membersCanCreateRepositoriesSetting?: GQLEnterpriseMembersCanCreateRepositoriesSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided repository creation setting value.
   */
  membersCanCreateRepositoriesSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether members with admin permissions for repositories can delete issues.
   */
  membersCanDeleteIssuesSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided members can delete issues setting value.
   */
  membersCanDeleteIssuesSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
   */
  membersCanDeleteRepositoriesSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided members can delete repositories setting value.
   */
  membersCanDeleteRepositoriesSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
   */
  membersCanInviteCollaboratorsSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
   */
  membersCanInviteCollaboratorsSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
   */
  membersCanMakePurchasesSetting: GQLEnterpriseMembersCanMakePurchasesSettingValue;
  
  /**
   * The setting value for whether members with admin permissions for repositories can update protected branches.
   */
  membersCanUpdateProtectedBranchesSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided members can update protected branches setting value.
   */
  membersCanUpdateProtectedBranchesSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether members can view dependency insights.
   */
  membersCanViewDependencyInsightsSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
   */
  membersCanViewDependencyInsightsSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether organization projects are enabled for organizations in this enterprise.
   */
  organizationProjectsSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided organization projects setting value.
   */
  organizationProjectsSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * A list of outside collaborators across the repositories in the enterprise.
   */
  outsideCollaborators: GQLEnterpriseOutsideCollaboratorConnection;
  
  /**
   * A list of pending administrator invitations for the enterprise.
   */
  pendingAdminInvitations: GQLEnterpriseAdministratorInvitationConnection;
  
  /**
   * A list of pending collaborator invitations across the repositories in the enterprise.
   */
  pendingCollaboratorInvitations: GQLRepositoryInvitationConnection;
  
  /**
   * A list of pending collaborators across the repositories in the enterprise.
   * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
   */
  pendingCollaborators: GQLEnterprisePendingCollaboratorConnection;
  
  /**
   * A list of pending member invitations for organizations in the enterprise.
   */
  pendingMemberInvitations: GQLEnterprisePendingMemberInvitationConnection;
  
  /**
   * The setting value for whether repository projects are enabled in this enterprise.
   */
  repositoryProjectsSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided repository projects setting value.
   */
  repositoryProjectsSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The SAML Identity Provider for the enterprise.
   */
  samlIdentityProvider?: GQLEnterpriseIdentityProvider;
  
  /**
   * A list of enterprise organizations configured with the SAML single sign-on setting value.
   */
  samlIdentityProviderSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether team discussions are enabled for organizations in this enterprise.
   */
  teamDiscussionsSetting: GQLEnterpriseEnabledDisabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the provided team discussions setting value.
   */
  teamDiscussionsSettingOrganizations: GQLOrganizationConnection;
  
  /**
   * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
   */
  twoFactorRequiredSetting: GQLEnterpriseEnabledSettingValue;
  
  /**
   * A list of enterprise organizations configured with the two-factor authentication setting value.
   */
  twoFactorRequiredSettingOrganizations: GQLOrganizationConnection;
}

/**
 * The possible administrator roles in an enterprise account.
 */
export enum GQLEnterpriseAdministratorRole {
  
  /**
   * Represents a billing manager of the enterprise account.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
  
  /**
   * Represents an owner of the enterprise account.
   */
  OWNER = 'OWNER'
}

/**
 * The connection type for User.
 */
export interface GQLEnterpriseAdministratorConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseAdministratorEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is an administrator of an enterprise.
 */
export interface GQLEnterpriseAdministratorEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUser;
  
  /**
   * The role of the administrator.
   */
  role: GQLEnterpriseAdministratorRole;
}

/**
 * The possible values for an enabled/disabled enterprise setting.
 */
export enum GQLEnterpriseEnabledDisabledSettingValue {
  
  /**
   * The setting is disabled for organizations in the enterprise.
   */
  DISABLED = 'DISABLED',
  
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',
  
  /**
   * There is no policy set for organizations in the enterprise.
   */
  NO_POLICY = 'NO_POLICY'
}

/**
 * The possible values for the enterprise default repository permission setting.
 */
export enum GQLEnterpriseDefaultRepositoryPermissionSettingValue {
  
  /**
   * Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
   */
  ADMIN = 'ADMIN',
  
  /**
   * Organization members will only be able to clone and pull public repositories.
   */
  NONE = 'NONE',
  
  /**
   * Organizations in the enterprise choose default repository permissions for their members.
   */
  NO_POLICY = 'NO_POLICY',
  
  /**
   * Organization members will be able to clone and pull all organization repositories.
   */
  READ = 'READ',
  
  /**
   * Organization members will be able to clone, pull, and push all organization repositories.
   */
  WRITE = 'WRITE'
}

/**
 * Ordering options for Enterprise Server installation connections.
 */
export interface GQLEnterpriseServerInstallationOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order Enterprise Server installations by.
   */
  field: GQLEnterpriseServerInstallationOrderField;
}

/**
 * Properties by which Enterprise Server installation connections can be ordered.
 */
export enum GQLEnterpriseServerInstallationOrderField {
  
  /**
   * Order Enterprise Server installations by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order Enterprise Server installations by customer name
   */
  CUSTOMER_NAME = 'CUSTOMER_NAME',
  
  /**
   * Order Enterprise Server installations by host name
   */
  HOST_NAME = 'HOST_NAME'
}

/**
 * The connection type for EnterpriseServerInstallation.
 */
export interface GQLEnterpriseServerInstallationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseServerInstallationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseServerInstallation | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseServerInstallationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseServerInstallation;
}

/**
 * An Enterprise Server installation.
 */
export interface GQLEnterpriseServerInstallation extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The customer name to which the Enterprise Server installation belongs.
   */
  customerName: string;
  
  /**
   * The host name of the Enterprise Server installation.
   */
  hostName: string;
  id: string;
  
  /**
   * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
   */
  isConnected: boolean;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * User accounts on this Enterprise Server installation.
   */
  userAccounts: GQLEnterpriseServerUserAccountConnection;
  
  /**
   * User accounts uploads for the Enterprise Server installation.
   */
  userAccountsUploads: GQLEnterpriseServerUserAccountsUploadConnection;
}

/**
 * Ordering options for Enterprise Server user account connections.
 */
export interface GQLEnterpriseServerUserAccountOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order user accounts by.
   */
  field: GQLEnterpriseServerUserAccountOrderField;
}

/**
 * Properties by which Enterprise Server user account connections can be ordered.
 */
export enum GQLEnterpriseServerUserAccountOrderField {
  
  /**
   * Order user accounts by login
   */
  LOGIN = 'LOGIN',
  
  /**
   * Order user accounts by creation time on the Enterprise Server installation
   */
  REMOTE_CREATED_AT = 'REMOTE_CREATED_AT'
}

/**
 * The connection type for EnterpriseServerUserAccount.
 */
export interface GQLEnterpriseServerUserAccountConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseServerUserAccountEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseServerUserAccount | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseServerUserAccountEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseServerUserAccount;
}

/**
 * A user account on an Enterprise Server installation.
 */
export interface GQLEnterpriseServerUserAccount extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * User emails belonging to this user account.
   */
  emails: GQLEnterpriseServerUserAccountEmailConnection;
  
  /**
   * The Enterprise Server installation on which this user account exists.
   */
  enterpriseServerInstallation: GQLEnterpriseServerInstallation;
  id: string;
  
  /**
   * Whether the user account is a site administrator on the Enterprise Server installation.
   */
  isSiteAdmin: boolean;
  
  /**
   * The login of the user account on the Enterprise Server installation.
   */
  login: string;
  
  /**
   * The profile name of the user account on the Enterprise Server installation.
   */
  profileName?: string;
  
  /**
   * The date and time when the user account was created on the Enterprise Server installation.
   */
  remoteCreatedAt: GQLDateTime;
  
  /**
   * The ID of the user account on the Enterprise Server installation.
   */
  remoteUserId: number;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * Ordering options for Enterprise Server user account email connections.
 */
export interface GQLEnterpriseServerUserAccountEmailOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order emails by.
   */
  field: GQLEnterpriseServerUserAccountEmailOrderField;
}

/**
 * Properties by which Enterprise Server user account email connections can be ordered.
 */
export enum GQLEnterpriseServerUserAccountEmailOrderField {
  
  /**
   * Order emails by email
   */
  EMAIL = 'EMAIL'
}

/**
 * The connection type for EnterpriseServerUserAccountEmail.
 */
export interface GQLEnterpriseServerUserAccountEmailConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseServerUserAccountEmailEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseServerUserAccountEmail | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseServerUserAccountEmailEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseServerUserAccountEmail;
}

/**
 * An email belonging to a user account on an Enterprise Server installation.
 */
export interface GQLEnterpriseServerUserAccountEmail extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The email address.
   */
  email: string;
  id: string;
  
  /**
   * Indicates whether this is the primary email of the associated user account.
   */
  isPrimary: boolean;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
  
  /**
   * The user account to which the email belongs.
   */
  userAccount: GQLEnterpriseServerUserAccount;
}

/**
 * Ordering options for Enterprise Server user accounts upload connections.
 */
export interface GQLEnterpriseServerUserAccountsUploadOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order user accounts uploads by.
   */
  field: GQLEnterpriseServerUserAccountsUploadOrderField;
}

/**
 * Properties by which Enterprise Server user accounts upload connections can be ordered.
 */
export enum GQLEnterpriseServerUserAccountsUploadOrderField {
  
  /**
   * Order user accounts uploads by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for EnterpriseServerUserAccountsUpload.
 */
export interface GQLEnterpriseServerUserAccountsUploadConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseServerUserAccountsUploadEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseServerUserAccountsUpload | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseServerUserAccountsUploadEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseServerUserAccountsUpload;
}

/**
 * A user accounts upload from an Enterprise Server installation.
 */
export interface GQLEnterpriseServerUserAccountsUpload extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The enterprise to which this upload belongs.
   */
  enterprise: GQLEnterprise;
  
  /**
   * The Enterprise Server installation for which this upload was generated.
   */
  enterpriseServerInstallation: GQLEnterpriseServerInstallation;
  id: string;
  
  /**
   * The name of the file uploaded.
   */
  name: string;
  
  /**
   * The synchronization state of the upload
   */
  syncState: GQLEnterpriseServerUserAccountsUploadSyncState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: GQLDateTime;
}

/**
 * Synchronization state of the Enterprise Server user accounts upload
 */
export enum GQLEnterpriseServerUserAccountsUploadSyncState {
  
  /**
   * The synchronization of the upload failed.
   */
  FAILURE = 'FAILURE',
  
  /**
   * The synchronization of the upload is pending.
   */
  PENDING = 'PENDING',
  
  /**
   * The synchronization of the upload succeeded.
   */
  SUCCESS = 'SUCCESS'
}

/**
 * The possible values for the enterprise members can create repositories setting.
 */
export enum GQLEnterpriseMembersCanCreateRepositoriesSettingValue {
  
  /**
   * Members will be able to create public and private repositories.
   */
  ALL = 'ALL',
  
  /**
   * Members will not be able to create public or private repositories.
   */
  DISABLED = 'DISABLED',
  
  /**
   * Organization administrators choose whether to allow members to create repositories.
   */
  NO_POLICY = 'NO_POLICY',
  
  /**
   * Members will be able to create only private repositories.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * Members will be able to create only public repositories.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * The possible values for the members can create repositories setting on an organization.
 */
export enum GQLOrganizationMembersCanCreateRepositoriesSettingValue {
  
  /**
   * Members will be able to create public and private repositories.
   */
  ALL = 'ALL',
  
  /**
   * Members will not be able to create public or private repositories.
   */
  DISABLED = 'DISABLED',
  
  /**
   * Members will be able to create only private repositories.
   */
  PRIVATE = 'PRIVATE'
}

/**
 * The possible values for the members can make purchases setting.
 */
export enum GQLEnterpriseMembersCanMakePurchasesSettingValue {
  
  /**
   * The setting is disabled for organizations in the enterprise.
   */
  DISABLED = 'DISABLED',
  
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED'
}

/**
 * The repository's visibility level.
 */
export enum GQLRepositoryVisibility {
  
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
  
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * The connection type for User.
 */
export interface GQLEnterpriseOutsideCollaboratorConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseOutsideCollaboratorEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is an outside collaborator of an enterprise through one or more organizations.
 */
export interface GQLEnterpriseOutsideCollaboratorEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * Whether the outside collaborator does not have a license for the enterprise.
   * @deprecated All outside collaborators consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: boolean;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUser;
  
  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: GQLEnterpriseRepositoryInfoConnection;
}

/**
 * The connection type for EnterpriseRepositoryInfo.
 */
export interface GQLEnterpriseRepositoryInfoConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseRepositoryInfoEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseRepositoryInfo | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseRepositoryInfoEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseRepositoryInfo;
}

/**
 * A subset of repository information queryable from an enterprise.
 */
export interface GQLEnterpriseRepositoryInfo extends GQLNode {
  id: string;
  
  /**
   * Identifies if the repository is private.
   */
  isPrivate: boolean;
  
  /**
   * The repository's name.
   */
  name: string;
  
  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
}

/**
 * Ordering options for enterprise administrator invitation connections
 */
export interface GQLEnterpriseAdministratorInvitationOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order enterprise administrator invitations by.
   */
  field: GQLEnterpriseAdministratorInvitationOrderField;
}

/**
 * Properties by which enterprise administrator invitation connections can be ordered.
 */
export enum GQLEnterpriseAdministratorInvitationOrderField {
  
  /**
   * Order enterprise administrator member invitations by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for EnterpriseAdministratorInvitation.
 */
export interface GQLEnterpriseAdministratorInvitationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseAdministratorInvitationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseAdministratorInvitation | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseAdministratorInvitationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseAdministratorInvitation;
}

/**
 * An invitation for a user to become an owner or billing manager of an enterprise.
 */
export interface GQLEnterpriseAdministratorInvitation extends GQLNode {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: GQLDateTime;
  
  /**
   * The email of the person who was invited to the enterprise.
   */
  email?: string;
  
  /**
   * The enterprise the invitation is for.
   */
  enterprise: GQLEnterprise;
  id: string;
  
  /**
   * The user who was invited to the enterprise.
   */
  invitee?: GQLUser;
  
  /**
   * The user who created the invitation.
   */
  inviter?: GQLUser;
  
  /**
   * The invitee's pending role in the enterprise (owner or billing_manager).
   */
  role: GQLEnterpriseAdministratorRole;
}

/**
 * Ordering options for repository invitation connections.
 */
export interface GQLRepositoryInvitationOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order repository invitations by.
   */
  field: GQLRepositoryInvitationOrderField;
}

/**
 * Properties by which repository invitation connections can be ordered.
 */
export enum GQLRepositoryInvitationOrderField {
  
  /**
   * Order repository invitations by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order repository invitations by invitee login
   * @deprecated `INVITEE_LOGIN` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC.
   */
  INVITEE_LOGIN = 'INVITEE_LOGIN'
}

/**
 * The connection type for RepositoryInvitation.
 */
export interface GQLRepositoryInvitationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLRepositoryInvitationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLRepositoryInvitation | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLRepositoryInvitationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLRepositoryInvitation;
}

/**
 * An invitation for a user to be added to a repository.
 */
export interface GQLRepositoryInvitation extends GQLNode {
  
  /**
   * The email address that received the invitation.
   */
  email?: string;
  id: string;
  
  /**
   * The user who received the invitation.
   */
  invitee?: GQLUser;
  
  /**
   * The user who created the invitation.
   */
  inviter: GQLUser;
  
  /**
   * The permission granted on this repository by this invitation.
   * 
   * **Upcoming Change on 2020-10-01 UTC**
   * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
   * **Reason:** This field may return additional values
   */
  permission: GQLRepositoryPermission;
  
  /**
   * The Repository the user is invited to.
   */
  repository?: GQLRepositoryInfo;
}

/**
 * The connection type for User.
 */
export interface GQLEnterprisePendingCollaboratorConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterprisePendingCollaboratorEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLUser | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
 */
export interface GQLEnterprisePendingCollaboratorEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * Whether the invited collaborator does not have a license for the enterprise.
   * @deprecated All pending collaborators consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: boolean;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLUser;
  
  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: GQLEnterpriseRepositoryInfoConnection;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface GQLEnterprisePendingMemberInvitationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterprisePendingMemberInvitationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLOrganizationInvitation | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * Identifies the total count of unique users in the connection.
   */
  totalUniqueUserCount: number;
}

/**
 * An invitation to be a member in an enterprise organization.
 */
export interface GQLEnterprisePendingMemberInvitationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * Whether the invitation has a license for the enterprise.
   * @deprecated All pending members consume a license Removal on 2020-07-01 UTC.
   */
  isUnlicensed: boolean;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLOrganizationInvitation;
}

/**
 * An identity provider configured to provision identities for an enterprise.
 */
export interface GQLEnterpriseIdentityProvider extends GQLNode {
  
  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod?: GQLSamlDigestAlgorithm;
  
  /**
   * The enterprise this identity provider belongs to.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * ExternalIdentities provisioned by this identity provider.
   */
  externalIdentities: GQLExternalIdentityConnection;
  id: string;
  
  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate?: GQLX509Certificate;
  
  /**
   * The Issuer Entity ID for the SAML identity provider.
   */
  issuer?: string;
  
  /**
   * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
   */
  recoveryCodes?: Array<string>;
  
  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod?: GQLSamlSignatureAlgorithm;
  
  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl?: GQLURI;
}

/**
 * The possible digest algorithms used to sign SAML requests for an identity provider.
 */
export enum GQLSamlDigestAlgorithm {
  
  /**
   * SHA1
   */
  SHA1 = 'SHA1',
  
  /**
   * SHA256
   */
  SHA256 = 'SHA256',
  
  /**
   * SHA384
   */
  SHA384 = 'SHA384',
  
  /**
   * SHA512
   */
  SHA512 = 'SHA512'
}

/**
 * The possible signature algorithms used to sign SAML requests for a Identity Provider.
 */
export enum GQLSamlSignatureAlgorithm {
  
  /**
   * RSA-SHA1
   */
  RSA_SHA1 = 'RSA_SHA1',
  
  /**
   * RSA-SHA256
   */
  RSA_SHA256 = 'RSA_SHA256',
  
  /**
   * RSA-SHA384
   */
  RSA_SHA384 = 'RSA_SHA384',
  
  /**
   * RSA-SHA512
   */
  RSA_SHA512 = 'RSA_SHA512'
}

/**
 * The possible states in which authentication can be configured with an identity provider.
 */
export enum GQLIdentityProviderConfigurationState {
  
  /**
   * Authentication with an identity provider is configured but not enforced.
   */
  CONFIGURED = 'CONFIGURED',
  
  /**
   * Authentication with an identity provider is configured and enforced.
   */
  ENFORCED = 'ENFORCED',
  
  /**
   * Authentication with an identity provider is not configured.
   */
  UNCONFIGURED = 'UNCONFIGURED'
}

/**
 * The possible values for an enabled/no policy enterprise setting.
 */
export enum GQLEnterpriseEnabledSettingValue {
  
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',
  
  /**
   * There is no policy set for organizations in the enterprise.
   */
  NO_POLICY = 'NO_POLICY'
}

/**
 * The connection type for EnterpriseUserAccount.
 */
export interface GQLEnterpriseUserAccountConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLEnterpriseUserAccountEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLEnterpriseUserAccount | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLEnterpriseUserAccountEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLEnterpriseUserAccount;
}

/**
 * A public description of a Marketplace category.
 */
export interface GQLMarketplaceCategory extends GQLNode {
  
  /**
   * The category's description.
   */
  description?: string;
  
  /**
   * The technical description of how apps listed in this category work with GitHub.
   */
  howItWorks?: string;
  id: string;
  
  /**
   * The category's name.
   */
  name: string;
  
  /**
   * How many Marketplace listings have this as their primary category.
   */
  primaryListingCount: number;
  
  /**
   * The HTTP path for this Marketplace category.
   */
  resourcePath: GQLURI;
  
  /**
   * How many Marketplace listings have this as their secondary category.
   */
  secondaryListingCount: number;
  
  /**
   * The short name of the category used in its URL.
   */
  slug: string;
  
  /**
   * The HTTP URL for this Marketplace category.
   */
  url: GQLURI;
}

/**
 * A listing in the GitHub integration marketplace.
 */
export interface GQLMarketplaceListing extends GQLNode {
  
  /**
   * The GitHub App this listing represents.
   */
  app?: GQLApp;
  
  /**
   * URL to the listing owner's company site.
   */
  companyUrl?: GQLURI;
  
  /**
   * The HTTP path for configuring access to the listing's integration or OAuth app
   */
  configurationResourcePath: GQLURI;
  
  /**
   * The HTTP URL for configuring access to the listing's integration or OAuth app
   */
  configurationUrl: GQLURI;
  
  /**
   * URL to the listing's documentation.
   */
  documentationUrl?: GQLURI;
  
  /**
   * The listing's detailed description.
   */
  extendedDescription?: string;
  
  /**
   * The listing's detailed description rendered to HTML.
   */
  extendedDescriptionHTML: GQLHTML;
  
  /**
   * The listing's introductory description.
   */
  fullDescription: string;
  
  /**
   * The listing's introductory description rendered to HTML.
   */
  fullDescriptionHTML: GQLHTML;
  
  /**
   * Does this listing have any plans with a free trial?
   */
  hasPublishedFreeTrialPlans: boolean;
  
  /**
   * Does this listing have a terms of service link?
   */
  hasTermsOfService: boolean;
  
  /**
   * A technical description of how this app works with GitHub.
   */
  howItWorks?: string;
  
  /**
   * The listing's technical description rendered to HTML.
   */
  howItWorksHTML: GQLHTML;
  id: string;
  
  /**
   * URL to install the product to the viewer's account or organization.
   */
  installationUrl?: GQLURI;
  
  /**
   * Whether this listing's app has been installed for the current viewer
   */
  installedForViewer: boolean;
  
  /**
   * Whether this listing has been removed from the Marketplace.
   */
  isArchived: boolean;
  
  /**
   * Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
   */
  isDraft: boolean;
  
  /**
   * Whether the product this listing represents is available as part of a paid plan.
   */
  isPaid: boolean;
  
  /**
   * Whether this listing has been approved for display in the Marketplace.
   */
  isPublic: boolean;
  
  /**
   * Whether this listing has been rejected by GitHub for display in the Marketplace.
   */
  isRejected: boolean;
  
  /**
   * Whether this listing has been approved for unverified display in the Marketplace.
   */
  isUnverified: boolean;
  
  /**
   * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
   */
  isUnverifiedPending: boolean;
  
  /**
   * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromDraft: boolean;
  
  /**
   * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromUnverified: boolean;
  
  /**
   * Whether this listing has been approved for verified display in the Marketplace.
   */
  isVerified: boolean;
  
  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;
  
  /**
   * URL for the listing's logo image.
   */
  logoUrl?: GQLURI;
  
  /**
   * The listing's full name.
   */
  name: string;
  
  /**
   * The listing's very short description without a trailing period or ampersands.
   */
  normalizedShortDescription: string;
  
  /**
   * URL to the listing's detailed pricing.
   */
  pricingUrl?: GQLURI;
  
  /**
   * The category that best describes the listing.
   */
  primaryCategory: GQLMarketplaceCategory;
  
  /**
   * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
   */
  privacyPolicyUrl: GQLURI;
  
  /**
   * The HTTP path for the Marketplace listing.
   */
  resourcePath: GQLURI;
  
  /**
   * The URLs for the listing's screenshots.
   */
  screenshotUrls: Array<string | null>;
  
  /**
   * An alternate category that describes the listing.
   */
  secondaryCategory?: GQLMarketplaceCategory;
  
  /**
   * The listing's very short description.
   */
  shortDescription: string;
  
  /**
   * The short name of the listing used in its URL.
   */
  slug: string;
  
  /**
   * URL to the listing's status page.
   */
  statusUrl?: GQLURI;
  
  /**
   * An email address for support for this listing's app.
   */
  supportEmail?: string;
  
  /**
   * Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
   */
  supportUrl: GQLURI;
  
  /**
   * URL to the listing's terms of service.
   */
  termsOfServiceUrl?: GQLURI;
  
  /**
   * The HTTP URL for the Marketplace listing.
   */
  url: GQLURI;
  
  /**
   * Can the current viewer add plans for this Marketplace listing.
   */
  viewerCanAddPlans: boolean;
  
  /**
   * Can the current viewer approve this Marketplace listing.
   */
  viewerCanApprove: boolean;
  
  /**
   * Can the current viewer delist this Marketplace listing.
   */
  viewerCanDelist: boolean;
  
  /**
   * Can the current viewer edit this Marketplace listing.
   */
  viewerCanEdit: boolean;
  
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   */
  viewerCanEditCategories: boolean;
  
  /**
   * Can the current viewer edit the plans for this Marketplace listing.
   */
  viewerCanEditPlans: boolean;
  
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   */
  viewerCanRedraft: boolean;
  
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   */
  viewerCanReject: boolean;
  
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   */
  viewerCanRequestApproval: boolean;
  
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   */
  viewerHasPurchased: boolean;
  
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   */
  viewerHasPurchasedForAllOrganizations: boolean;
  
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   */
  viewerIsListingAdmin: boolean;
}

/**
 * Look up Marketplace Listings
 */
export interface GQLMarketplaceListingConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLMarketplaceListingEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLMarketplaceListing | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLMarketplaceListingEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLMarketplaceListing;
}

/**
 * Represents information about the GitHub instance.
 */
export interface GQLGitHubMetadata {
  
  /**
   * Returns a String that's a SHA of `github-services`
   */
  gitHubServicesSha: GQLGitObjectID;
  
  /**
   * IP addresses that users connect to for git operations
   */
  gitIpAddresses?: Array<string>;
  
  /**
   * IP addresses that service hooks are sent from
   */
  hookIpAddresses?: Array<string>;
  
  /**
   * IP addresses that the importer connects from
   */
  importerIpAddresses?: Array<string>;
  
  /**
   * Whether or not users are verified
   */
  isPasswordAuthenticationVerifiable: boolean;
  
  /**
   * IP addresses for GitHub Pages' A records
   */
  pagesIpAddresses?: Array<string>;
}

/**
 * Represents the client's rate limit.
 */
export interface GQLRateLimit {
  
  /**
   * The point cost for the current query counting against the rate limit.
   */
  cost: number;
  
  /**
   * The maximum number of points the client is permitted to consume in a 60 minute window.
   */
  limit: number;
  
  /**
   * The maximum number of nodes this query may return
   */
  nodeCount: number;
  
  /**
   * The number of points remaining in the current rate limit window.
   */
  remaining: number;
  
  /**
   * The time at which the current rate limit window resets in UTC epoch seconds.
   */
  resetAt: GQLDateTime;
}

/**
 * Represents the individual results of a search.
 */
export enum GQLSearchType {
  
  /**
   * Returns results matching issues in repositories.
   */
  ISSUE = 'ISSUE',
  
  /**
   * Returns results matching repositories.
   */
  REPOSITORY = 'REPOSITORY',
  
  /**
   * Returns results matching users and organizations on GitHub.
   */
  USER = 'USER'
}

/**
 * A list of results that matched against a search query.
 */
export interface GQLSearchResultItemConnection {
  
  /**
   * The number of pieces of code that matched the search query.
   */
  codeCount: number;
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSearchResultItemEdge | null>;
  
  /**
   * The number of issues that matched the search query.
   */
  issueCount: number;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSearchResultItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * The number of repositories that matched the search query.
   */
  repositoryCount: number;
  
  /**
   * The number of users that matched the search query.
   */
  userCount: number;
  
  /**
   * The number of wiki pages that matched the search query.
   */
  wikiCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSearchResultItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSearchResultItem;
  
  /**
   * Text matches on the result found.
   */
  textMatches?: Array<GQLTextMatch | null>;
}

/**
 * The results of a search.
 */
export type GQLSearchResultItem =
GQLApp |
GQLIssue |
GQLMarketplaceListing |
GQLOrganization |
GQLPullRequest |
GQLRepository |
GQLUser;

/** Use this to resolve union type SearchResultItem */
export type GQLPossibleSearchResultItemTypeNames =
'App' |
'Issue' |
'MarketplaceListing' |
'Organization' |
'PullRequest' |
'Repository' |
'User';

export interface GQLSearchResultItemNameMap {
  SearchResultItem: GQLSearchResultItem;
  App: GQLApp;
  Issue: GQLIssue;
  MarketplaceListing: GQLMarketplaceListing;
  Organization: GQLOrganization;
  PullRequest: GQLPullRequest;
  Repository: GQLRepository;
  User: GQLUser;
}

/**
 * A text match within a search result.
 */
export interface GQLTextMatch {
  
  /**
   * The specific text fragment within the property matched on.
   */
  fragment: string;
  
  /**
   * Highlights within the matched fragment.
   */
  highlights: Array<GQLTextMatchHighlight>;
  
  /**
   * The property matched on.
   */
  property: string;
}

/**
 * Represents a single highlight in a search result match.
 */
export interface GQLTextMatchHighlight {
  
  /**
   * The indice in the fragment where the matched text begins.
   */
  beginIndice: number;
  
  /**
   * The indice in the fragment where the matched text ends.
   */
  endIndice: number;
  
  /**
   * The text matched.
   */
  text: string;
}

/**
 * An advisory identifier to filter results on.
 */
export interface GQLSecurityAdvisoryIdentifierFilter {
  
  /**
   * The identifier type.
   */
  type: GQLSecurityAdvisoryIdentifierType;
  
  /**
   * The identifier string. Supports exact or partial matching.
   */
  value: string;
}

/**
 * Identifier formats available for advisories.
 */
export enum GQLSecurityAdvisoryIdentifierType {
  
  /**
   * Common Vulnerabilities and Exposures Identifier.
   */
  CVE = 'CVE',
  
  /**
   * GitHub Security Advisory ID.
   */
  GHSA = 'GHSA'
}

/**
 * Ordering options for security advisory connections
 */
export interface GQLSecurityAdvisoryOrder {
  
  /**
   * The ordering direction.
   */
  direction: GQLOrderDirection;
  
  /**
   * The field to order security advisories by.
   */
  field: GQLSecurityAdvisoryOrderField;
}

/**
 * Properties by which security advisory connections can be ordered.
 */
export enum GQLSecurityAdvisoryOrderField {
  
  /**
   * Order advisories by publication time
   */
  PUBLISHED_AT = 'PUBLISHED_AT',
  
  /**
   * Order advisories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for SecurityAdvisory.
 */
export interface GQLSecurityAdvisoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GQLSecurityAdvisoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GQLSecurityAdvisory | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: GQLPageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GQLSecurityAdvisoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GQLSecurityAdvisory;
}

/**
 * The root query for implementing GraphQL mutations.
 */
export interface GQLMutation {
  
  /**
   * Accepts a pending invitation for a user to become an administrator of an enterprise.
   */
  acceptEnterpriseAdministratorInvitation?: GQLAcceptEnterpriseAdministratorInvitationPayload;
  
  /**
   * Applies a suggested topic to the repository.
   */
  acceptTopicSuggestion?: GQLAcceptTopicSuggestionPayload;
  
  /**
   * Adds assignees to an assignable object.
   */
  addAssigneesToAssignable?: GQLAddAssigneesToAssignablePayload;
  
  /**
   * Adds a comment to an Issue or Pull Request.
   */
  addComment?: GQLAddCommentPayload;
  
  /**
   * Adds labels to a labelable object.
   */
  addLabelsToLabelable?: GQLAddLabelsToLabelablePayload;
  
  /**
   * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
   */
  addProjectCard?: GQLAddProjectCardPayload;
  
  /**
   * Adds a column to a Project.
   */
  addProjectColumn?: GQLAddProjectColumnPayload;
  
  /**
   * Adds a review to a Pull Request.
   */
  addPullRequestReview?: GQLAddPullRequestReviewPayload;
  
  /**
   * Adds a comment to a review.
   */
  addPullRequestReviewComment?: GQLAddPullRequestReviewCommentPayload;
  
  /**
   * Adds a new thread to a pending Pull Request Review.
   */
  addPullRequestReviewThread?: GQLAddPullRequestReviewThreadPayload;
  
  /**
   * Adds a reaction to a subject.
   */
  addReaction?: GQLAddReactionPayload;
  
  /**
   * Adds a star to a Starrable.
   */
  addStar?: GQLAddStarPayload;
  
  /**
   * Marks a repository as archived.
   */
  archiveRepository?: GQLArchiveRepositoryPayload;
  
  /**
   * Cancels a pending invitation for an administrator to join an enterprise.
   */
  cancelEnterpriseAdminInvitation?: GQLCancelEnterpriseAdminInvitationPayload;
  
  /**
   * Update your status on GitHub.
   */
  changeUserStatus?: GQLChangeUserStatusPayload;
  
  /**
   * Clears all labels from a labelable object.
   */
  clearLabelsFromLabelable?: GQLClearLabelsFromLabelablePayload;
  
  /**
   * Creates a new project by cloning configuration from an existing project.
   */
  cloneProject?: GQLCloneProjectPayload;
  
  /**
   * Create a new repository with the same files and directory structure as a template repository.
   */
  cloneTemplateRepository?: GQLCloneTemplateRepositoryPayload;
  
  /**
   * Close an issue.
   */
  closeIssue?: GQLCloseIssuePayload;
  
  /**
   * Close a pull request.
   */
  closePullRequest?: GQLClosePullRequestPayload;
  
  /**
   * Convert a project note card to one associated with a newly created issue.
   */
  convertProjectCardNoteToIssue?: GQLConvertProjectCardNoteToIssuePayload;
  
  /**
   * Create a new branch protection rule
   */
  createBranchProtectionRule?: GQLCreateBranchProtectionRulePayload;
  
  /**
   * Creates an organization as part of an enterprise account.
   */
  createEnterpriseOrganization?: GQLCreateEnterpriseOrganizationPayload;
  
  /**
   * Creates a new IP allow list entry.
   */
  createIpAllowListEntry?: GQLCreateIpAllowListEntryPayload;
  
  /**
   * Creates a new issue.
   */
  createIssue?: GQLCreateIssuePayload;
  
  /**
   * Creates a new project.
   */
  createProject?: GQLCreateProjectPayload;
  
  /**
   * Create a new pull request
   */
  createPullRequest?: GQLCreatePullRequestPayload;
  
  /**
   * Create a new Git Ref.
   */
  createRef?: GQLCreateRefPayload;
  
  /**
   * Create a new repository.
   */
  createRepository?: GQLCreateRepositoryPayload;
  
  /**
   * Creates a new team discussion.
   */
  createTeamDiscussion?: GQLCreateTeamDiscussionPayload;
  
  /**
   * Creates a new team discussion comment.
   */
  createTeamDiscussionComment?: GQLCreateTeamDiscussionCommentPayload;
  
  /**
   * Rejects a suggested topic for the repository.
   */
  declineTopicSuggestion?: GQLDeclineTopicSuggestionPayload;
  
  /**
   * Delete a branch protection rule
   */
  deleteBranchProtectionRule?: GQLDeleteBranchProtectionRulePayload;
  
  /**
   * Deletes a deployment.
   */
  deleteDeployment?: GQLDeleteDeploymentPayload;
  
  /**
   * Deletes an IP allow list entry.
   */
  deleteIpAllowListEntry?: GQLDeleteIpAllowListEntryPayload;
  
  /**
   * Deletes an Issue object.
   */
  deleteIssue?: GQLDeleteIssuePayload;
  
  /**
   * Deletes an IssueComment object.
   */
  deleteIssueComment?: GQLDeleteIssueCommentPayload;
  
  /**
   * Deletes a project.
   */
  deleteProject?: GQLDeleteProjectPayload;
  
  /**
   * Deletes a project card.
   */
  deleteProjectCard?: GQLDeleteProjectCardPayload;
  
  /**
   * Deletes a project column.
   */
  deleteProjectColumn?: GQLDeleteProjectColumnPayload;
  
  /**
   * Deletes a pull request review.
   */
  deletePullRequestReview?: GQLDeletePullRequestReviewPayload;
  
  /**
   * Deletes a pull request review comment.
   */
  deletePullRequestReviewComment?: GQLDeletePullRequestReviewCommentPayload;
  
  /**
   * Delete a Git Ref.
   */
  deleteRef?: GQLDeleteRefPayload;
  
  /**
   * Deletes a team discussion.
   */
  deleteTeamDiscussion?: GQLDeleteTeamDiscussionPayload;
  
  /**
   * Deletes a team discussion comment.
   */
  deleteTeamDiscussionComment?: GQLDeleteTeamDiscussionCommentPayload;
  
  /**
   * Dismisses an approved or rejected pull request review.
   */
  dismissPullRequestReview?: GQLDismissPullRequestReviewPayload;
  
  /**
   * Follow a user.
   */
  followUser?: GQLFollowUserPayload;
  
  /**
   * Invite someone to become an administrator of the enterprise.
   */
  inviteEnterpriseAdmin?: GQLInviteEnterpriseAdminPayload;
  
  /**
   * Creates a repository link for a project.
   */
  linkRepositoryToProject?: GQLLinkRepositoryToProjectPayload;
  
  /**
   * Lock a lockable object
   */
  lockLockable?: GQLLockLockablePayload;
  
  /**
   * Marks a pull request ready for review.
   */
  markPullRequestReadyForReview?: GQLMarkPullRequestReadyForReviewPayload;
  
  /**
   * Merge a head into a branch.
   */
  mergeBranch?: GQLMergeBranchPayload;
  
  /**
   * Merge a pull request.
   */
  mergePullRequest?: GQLMergePullRequestPayload;
  
  /**
   * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  minimizeComment?: GQLMinimizeCommentPayload;
  
  /**
   * Moves a project card to another place.
   */
  moveProjectCard?: GQLMoveProjectCardPayload;
  
  /**
   * Moves a project column to another place.
   */
  moveProjectColumn?: GQLMoveProjectColumnPayload;
  
  /**
   * Regenerates the identity provider recovery codes for an enterprise
   */
  regenerateEnterpriseIdentityProviderRecoveryCodes?: GQLRegenerateEnterpriseIdentityProviderRecoveryCodesPayload;
  
  /**
   * Removes assignees from an assignable object.
   */
  removeAssigneesFromAssignable?: GQLRemoveAssigneesFromAssignablePayload;
  
  /**
   * Removes an administrator from the enterprise.
   */
  removeEnterpriseAdmin?: GQLRemoveEnterpriseAdminPayload;
  
  /**
   * Removes the identity provider from an enterprise
   */
  removeEnterpriseIdentityProvider?: GQLRemoveEnterpriseIdentityProviderPayload;
  
  /**
   * Removes an organization from the enterprise
   */
  removeEnterpriseOrganization?: GQLRemoveEnterpriseOrganizationPayload;
  
  /**
   * Removes labels from a Labelable object.
   */
  removeLabelsFromLabelable?: GQLRemoveLabelsFromLabelablePayload;
  
  /**
   * Removes outside collaborator from all repositories in an organization.
   */
  removeOutsideCollaborator?: GQLRemoveOutsideCollaboratorPayload;
  
  /**
   * Removes a reaction from a subject.
   */
  removeReaction?: GQLRemoveReactionPayload;
  
  /**
   * Removes a star from a Starrable.
   */
  removeStar?: GQLRemoveStarPayload;
  
  /**
   * Reopen a issue.
   */
  reopenIssue?: GQLReopenIssuePayload;
  
  /**
   * Reopen a pull request.
   */
  reopenPullRequest?: GQLReopenPullRequestPayload;
  
  /**
   * Set review requests on a pull request.
   */
  requestReviews?: GQLRequestReviewsPayload;
  
  /**
   * Marks a review thread as resolved.
   */
  resolveReviewThread?: GQLResolveReviewThreadPayload;
  
  /**
   * Creates or updates the identity provider for an enterprise.
   */
  setEnterpriseIdentityProvider?: GQLSetEnterpriseIdentityProviderPayload;
  
  /**
   * Submits a pending pull request review.
   */
  submitPullRequestReview?: GQLSubmitPullRequestReviewPayload;
  
  /**
   * Transfer an issue to a different repository
   */
  transferIssue?: GQLTransferIssuePayload;
  
  /**
   * Unarchives a repository.
   */
  unarchiveRepository?: GQLUnarchiveRepositoryPayload;
  
  /**
   * Unfollow a user.
   */
  unfollowUser?: GQLUnfollowUserPayload;
  
  /**
   * Deletes a repository link from a project.
   */
  unlinkRepositoryFromProject?: GQLUnlinkRepositoryFromProjectPayload;
  
  /**
   * Unlock a lockable object
   */
  unlockLockable?: GQLUnlockLockablePayload;
  
  /**
   * Unmark an issue as a duplicate of another issue.
   */
  unmarkIssueAsDuplicate?: GQLUnmarkIssueAsDuplicatePayload;
  
  /**
   * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  unminimizeComment?: GQLUnminimizeCommentPayload;
  
  /**
   * Marks a review thread as unresolved.
   */
  unresolveReviewThread?: GQLUnresolveReviewThreadPayload;
  
  /**
   * Create a new branch protection rule
   */
  updateBranchProtectionRule?: GQLUpdateBranchProtectionRulePayload;
  
  /**
   * Sets the action execution capability setting for an enterprise.
   */
  updateEnterpriseActionExecutionCapabilitySetting?: GQLUpdateEnterpriseActionExecutionCapabilitySettingPayload;
  
  /**
   * Updates the role of an enterprise administrator.
   */
  updateEnterpriseAdministratorRole?: GQLUpdateEnterpriseAdministratorRolePayload;
  
  /**
   * Sets whether private repository forks are enabled for an enterprise.
   */
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: GQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload;
  
  /**
   * Sets the default repository permission for organizations in an enterprise.
   */
  updateEnterpriseDefaultRepositoryPermissionSetting?: GQLUpdateEnterpriseDefaultRepositoryPermissionSettingPayload;
  
  /**
   * Sets whether organization members with admin permissions on a repository can change repository visibility.
   */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: GQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload;
  
  /**
   * Sets the members can create repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanCreateRepositoriesSetting?: GQLUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload;
  
  /**
   * Sets the members can delete issues setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteIssuesSetting?: GQLUpdateEnterpriseMembersCanDeleteIssuesSettingPayload;
  
  /**
   * Sets the members can delete repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: GQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload;
  
  /**
   * Sets whether members can invite collaborators are enabled for an enterprise.
   */
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: GQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload;
  
  /**
   * Sets whether or not an organization admin can make purchases.
   */
  updateEnterpriseMembersCanMakePurchasesSetting?: GQLUpdateEnterpriseMembersCanMakePurchasesSettingPayload;
  
  /**
   * Sets the members can update protected branches setting for an enterprise.
   */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: GQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload;
  
  /**
   * Sets the members can view dependency insights for an enterprise.
   */
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: GQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload;
  
  /**
   * Sets whether organization projects are enabled for an enterprise.
   */
  updateEnterpriseOrganizationProjectsSetting?: GQLUpdateEnterpriseOrganizationProjectsSettingPayload;
  
  /**
   * Updates an enterprise's profile.
   */
  updateEnterpriseProfile?: GQLUpdateEnterpriseProfilePayload;
  
  /**
   * Sets whether repository projects are enabled for a enterprise.
   */
  updateEnterpriseRepositoryProjectsSetting?: GQLUpdateEnterpriseRepositoryProjectsSettingPayload;
  
  /**
   * Sets whether team discussions are enabled for an enterprise.
   */
  updateEnterpriseTeamDiscussionsSetting?: GQLUpdateEnterpriseTeamDiscussionsSettingPayload;
  
  /**
   * Sets whether two factor authentication is required for all users in an enterprise.
   */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: GQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload;
  
  /**
   * Sets whether an IP allow list is enabled on an owner.
   */
  updateIpAllowListEnabledSetting?: GQLUpdateIpAllowListEnabledSettingPayload;
  
  /**
   * Updates an IP allow list entry.
   */
  updateIpAllowListEntry?: GQLUpdateIpAllowListEntryPayload;
  
  /**
   * Updates an Issue.
   */
  updateIssue?: GQLUpdateIssuePayload;
  
  /**
   * Updates an IssueComment object.
   */
  updateIssueComment?: GQLUpdateIssueCommentPayload;
  
  /**
   * Updates an existing project.
   */
  updateProject?: GQLUpdateProjectPayload;
  
  /**
   * Updates an existing project card.
   */
  updateProjectCard?: GQLUpdateProjectCardPayload;
  
  /**
   * Updates an existing project column.
   */
  updateProjectColumn?: GQLUpdateProjectColumnPayload;
  
  /**
   * Update a pull request
   */
  updatePullRequest?: GQLUpdatePullRequestPayload;
  
  /**
   * Updates the body of a pull request review.
   */
  updatePullRequestReview?: GQLUpdatePullRequestReviewPayload;
  
  /**
   * Updates a pull request review comment.
   */
  updatePullRequestReviewComment?: GQLUpdatePullRequestReviewCommentPayload;
  
  /**
   * Update a Git Ref.
   */
  updateRef?: GQLUpdateRefPayload;
  
  /**
   * Update information about a repository.
   */
  updateRepository?: GQLUpdateRepositoryPayload;
  
  /**
   * Updates the state for subscribable subjects.
   */
  updateSubscription?: GQLUpdateSubscriptionPayload;
  
  /**
   * Updates a team discussion.
   */
  updateTeamDiscussion?: GQLUpdateTeamDiscussionPayload;
  
  /**
   * Updates a discussion comment.
   */
  updateTeamDiscussionComment?: GQLUpdateTeamDiscussionCommentPayload;
  
  /**
   * Replaces the repository's topics with the given topics.
   */
  updateTopics?: GQLUpdateTopicsPayload;
}

/**
 * Autogenerated input type of AcceptEnterpriseAdministratorInvitation
 */
export interface GQLAcceptEnterpriseAdministratorInvitationInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The id of the invitation being accepted
   */
  invitationId: string;
}

/**
 * Autogenerated return type of AcceptEnterpriseAdministratorInvitation
 */
export interface GQLAcceptEnterpriseAdministratorInvitationPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The invitation that was accepted.
   */
  invitation?: GQLEnterpriseAdministratorInvitation;
  
  /**
   * A message confirming the result of accepting an administrator invitation.
   */
  message?: string;
}

/**
 * Autogenerated input type of AcceptTopicSuggestion
 */
export interface GQLAcceptTopicSuggestionInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of the suggested topic.
   */
  name: string;
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of AcceptTopicSuggestion
 */
export interface GQLAcceptTopicSuggestionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The accepted topic.
   */
  topic?: GQLTopic;
}

/**
 * Autogenerated input type of AddAssigneesToAssignable
 */
export interface GQLAddAssigneesToAssignableInput {
  
  /**
   * The id of the assignable object to add assignees to.
   */
  assignableId: string;
  
  /**
   * The id of users to add as assignees.
   */
  assigneeIds: Array<string>;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddAssigneesToAssignable
 */
export interface GQLAddAssigneesToAssignablePayload {
  
  /**
   * The item that was assigned.
   */
  assignable?: GQLAssignable;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of AddComment
 */
export interface GQLAddCommentInput {
  
  /**
   * The contents of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of AddComment
 */
export interface GQLAddCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The edge from the subject's comment connection.
   */
  commentEdge?: GQLIssueCommentEdge;
  
  /**
   * The subject
   */
  subject?: GQLNode;
  
  /**
   * The edge from the subject's timeline connection.
   */
  timelineEdge?: GQLIssueTimelineItemEdge;
}

/**
 * Autogenerated input type of AddLabelsToLabelable
 */
export interface GQLAddLabelsToLabelableInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ids of the labels to add.
   */
  labelIds: Array<string>;
  
  /**
   * The id of the labelable object to add labels to.
   */
  labelableId: string;
}

/**
 * Autogenerated return type of AddLabelsToLabelable
 */
export interface GQLAddLabelsToLabelablePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The item that was labeled.
   */
  labelable?: GQLLabelable;
}

/**
 * Autogenerated input type of AddProjectCard
 */
export interface GQLAddProjectCardInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The content of the card. Must be a member of the ProjectCardItem union
   */
  contentId?: string;
  
  /**
   * The note on the card.
   */
  note?: string;
  
  /**
   * The Node ID of the ProjectColumn.
   */
  projectColumnId: string;
}

/**
 * Autogenerated return type of AddProjectCard
 */
export interface GQLAddProjectCardPayload {
  
  /**
   * The edge from the ProjectColumn's card connection.
   */
  cardEdge?: GQLProjectCardEdge;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ProjectColumn
   */
  projectColumn?: GQLProjectColumn;
}

/**
 * Autogenerated input type of AddProjectColumn
 */
export interface GQLAddProjectColumnInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of the column.
   */
  name: string;
  
  /**
   * The Node ID of the project.
   */
  projectId: string;
}

/**
 * Autogenerated return type of AddProjectColumn
 */
export interface GQLAddProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The edge from the project's column connection.
   */
  columnEdge?: GQLProjectColumnEdge;
  
  /**
   * The project
   */
  project?: GQLProject;
}

/**
 * Autogenerated input type of AddPullRequestReview
 */
export interface GQLAddPullRequestReviewInput {
  
  /**
   * The contents of the review body comment.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The review line comments.
   */
  comments?: Array<GQLDraftPullRequestReviewComment | null>;
  
  /**
   * The commit OID the review pertains to.
   */
  commitOID?: GQLGitObjectID;
  
  /**
   * The event to perform on the pull request review.
   */
  event?: GQLPullRequestReviewEvent;
  
  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;
  
  /**
   * The review line comment threads.
   */
  threads?: Array<GQLDraftPullRequestReviewThread | null>;
}

/**
 * Specifies a review comment to be left with a Pull Request Review.
 */
export interface GQLDraftPullRequestReviewComment {
  
  /**
   * Body of the comment to leave.
   */
  body: string;
  
  /**
   * Path to the file being commented on.
   */
  path: string;
  
  /**
   * Position in the file to leave a comment on.
   */
  position: number;
}

/**
 * The possible events to perform on a pull request review.
 */
export enum GQLPullRequestReviewEvent {
  
  /**
   * Submit feedback and approve merging these changes.
   */
  APPROVE = 'APPROVE',
  
  /**
   * Submit general feedback without explicit approval.
   */
  COMMENT = 'COMMENT',
  
  /**
   * Dismiss review so it now longer effects merging.
   */
  DISMISS = 'DISMISS',
  
  /**
   * Submit feedback that must be addressed before merging.
   */
  REQUEST_CHANGES = 'REQUEST_CHANGES'
}

/**
 * Specifies a review comment thread to be left with a Pull Request Review.
 */
export interface GQLDraftPullRequestReviewThread {
  
  /**
   * Body of the comment to leave.
   */
  body: string;
  
  /**
   * The line of the blob to which the thread refers. The end of the line range for multi-line comments.
   */
  line: number;
  
  /**
   * Path to the file being commented on.
   */
  path: string;
  
  /**
   * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   */
  side?: GQLDiffSide;
  
  /**
   * The first line of the range to which the comment refers.
   */
  startLine?: number;
  
  /**
   * The side of the diff on which the start line resides.
   */
  startSide?: GQLDiffSide;
}

/**
 * Autogenerated return type of AddPullRequestReview
 */
export interface GQLAddPullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The newly created pull request review.
   */
  pullRequestReview?: GQLPullRequestReview;
  
  /**
   * The edge from the pull request's review connection.
   */
  reviewEdge?: GQLPullRequestReviewEdge;
}

/**
 * Autogenerated input type of AddPullRequestReviewComment
 */
export interface GQLAddPullRequestReviewCommentInput {
  
  /**
   * The text of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The SHA of the commit to comment on.
   */
  commitOID?: GQLGitObjectID;
  
  /**
   * The comment id to reply to.
   */
  inReplyTo?: string;
  
  /**
   * The relative path of the file to comment on.
   */
  path?: string;
  
  /**
   * The line index in the diff to comment on.
   */
  position?: number;
  
  /**
   * The node ID of the pull request reviewing
   */
  pullRequestId?: string;
  
  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId?: string;
}

/**
 * Autogenerated return type of AddPullRequestReviewComment
 */
export interface GQLAddPullRequestReviewCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The newly created comment.
   */
  comment?: GQLPullRequestReviewComment;
  
  /**
   * The edge from the review's comment connection.
   */
  commentEdge?: GQLPullRequestReviewCommentEdge;
}

/**
 * Autogenerated input type of AddPullRequestReviewThread
 */
export interface GQLAddPullRequestReviewThreadInput {
  
  /**
   * Body of the thread's first comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The line of the blob to which the thread refers. The end of the line range for multi-line comments.
   */
  line: number;
  
  /**
   * Path to the file being commented on.
   */
  path: string;
  
  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId: string;
  
  /**
   * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   */
  side?: GQLDiffSide;
  
  /**
   * The first line of the range to which the comment refers.
   */
  startLine?: number;
  
  /**
   * The side of the diff on which the start line resides.
   */
  startSide?: GQLDiffSide;
}

/**
 * Autogenerated return type of AddPullRequestReviewThread
 */
export interface GQLAddPullRequestReviewThreadPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The newly created thread.
   */
  thread?: GQLPullRequestReviewThread;
}

/**
 * Autogenerated input type of AddReaction
 */
export interface GQLAddReactionInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of the emoji to react with.
   */
  content: GQLReactionContent;
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of AddReaction
 */
export interface GQLAddReactionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The reaction object.
   */
  reaction?: GQLReaction;
  
  /**
   * The reactable subject.
   */
  subject?: GQLReactable;
}

/**
 * Autogenerated input type of AddStar
 */
export interface GQLAddStarInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Starrable ID to star.
   */
  starrableId: string;
}

/**
 * Autogenerated return type of AddStar
 */
export interface GQLAddStarPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The starrable.
   */
  starrable?: GQLStarrable;
}

/**
 * Autogenerated input type of ArchiveRepository
 */
export interface GQLArchiveRepositoryInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the repository to mark as archived.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of ArchiveRepository
 */
export interface GQLArchiveRepositoryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The repository that was marked as archived.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of CancelEnterpriseAdminInvitation
 */
export interface GQLCancelEnterpriseAdminInvitationInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the pending enterprise administrator invitation.
   */
  invitationId: string;
}

/**
 * Autogenerated return type of CancelEnterpriseAdminInvitation
 */
export interface GQLCancelEnterpriseAdminInvitationPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The invitation that was canceled.
   */
  invitation?: GQLEnterpriseAdministratorInvitation;
  
  /**
   * A message confirming the result of canceling an administrator invitation.
   */
  message?: string;
}

/**
 * Autogenerated input type of ChangeUserStatus
 */
export interface GQLChangeUserStatusInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
   */
  emoji?: string;
  
  /**
   * If set, the user status will not be shown after this date.
   */
  expiresAt?: GQLDateTime;
  
  /**
   * Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
   */
  limitedAvailability?: boolean;
  
  /**
   * A short description of your current status.
   */
  message?: string;
  
  /**
   * The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
   */
  organizationId?: string;
}

/**
 * Autogenerated return type of ChangeUserStatus
 */
export interface GQLChangeUserStatusPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Your updated status.
   */
  status?: GQLUserStatus;
}

/**
 * Autogenerated input type of ClearLabelsFromLabelable
 */
export interface GQLClearLabelsFromLabelableInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The id of the labelable object to clear the labels from.
   */
  labelableId: string;
}

/**
 * Autogenerated return type of ClearLabelsFromLabelable
 */
export interface GQLClearLabelsFromLabelablePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The item that was unlabeled.
   */
  labelable?: GQLLabelable;
}

/**
 * Autogenerated input type of CloneProject
 */
export interface GQLCloneProjectInput {
  
  /**
   * The description of the project.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Whether or not to clone the source project's workflows.
   */
  includeWorkflows: boolean;
  
  /**
   * The name of the project.
   */
  name: string;
  
  /**
   * The visibility of the project, defaults to false (private).
   */
  public?: boolean;
  
  /**
   * The source project to clone.
   */
  sourceId: string;
  
  /**
   * The owner ID to create the project under.
   */
  targetOwnerId: string;
}

/**
 * Autogenerated return type of CloneProject
 */
export interface GQLCloneProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The id of the JobStatus for populating cloned fields.
   */
  jobStatusId?: string;
  
  /**
   * The new cloned project.
   */
  project?: GQLProject;
}

/**
 * Autogenerated input type of CloneTemplateRepository
 */
export interface GQLCloneTemplateRepositoryInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * A short description of the new repository.
   */
  description?: string;
  
  /**
   * Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
   */
  includeAllBranches?: boolean;
  
  /**
   * The name of the new repository.
   */
  name: string;
  
  /**
   * The ID of the owner for the new repository.
   */
  ownerId: string;
  
  /**
   * The Node ID of the template repository.
   */
  repositoryId: string;
  
  /**
   * Indicates the repository's visibility level.
   */
  visibility: GQLRepositoryVisibility;
}

/**
 * Autogenerated return type of CloneTemplateRepository
 */
export interface GQLCloneTemplateRepositoryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new repository.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of CloseIssue
 */
export interface GQLCloseIssueInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the issue to be closed.
   */
  issueId: string;
}

/**
 * Autogenerated return type of CloseIssue
 */
export interface GQLCloseIssuePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The issue that was closed.
   */
  issue?: GQLIssue;
}

/**
 * Autogenerated input type of ClosePullRequest
 */
export interface GQLClosePullRequestInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the pull request to be closed.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of ClosePullRequest
 */
export interface GQLClosePullRequestPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request that was closed.
   */
  pullRequest?: GQLPullRequest;
}

/**
 * Autogenerated input type of ConvertProjectCardNoteToIssue
 */
export interface GQLConvertProjectCardNoteToIssueInput {
  
  /**
   * The body of the newly created issue.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ProjectCard ID to convert.
   */
  projectCardId: string;
  
  /**
   * The ID of the repository to create the issue in.
   */
  repositoryId: string;
  
  /**
   * The title of the newly created issue. Defaults to the card's note text.
   */
  title?: string;
}

/**
 * Autogenerated return type of ConvertProjectCardNoteToIssue
 */
export interface GQLConvertProjectCardNoteToIssuePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated ProjectCard.
   */
  projectCard?: GQLProjectCard;
}

/**
 * Autogenerated input type of CreateBranchProtectionRule
 */
export interface GQLCreateBranchProtectionRuleInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean;
  
  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern: string;
  
  /**
   * A list of User, Team or App IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string>;
  
  /**
   * The global relay id of the repository in which a new branch protection rule should be created in.
   */
  repositoryId: string;
  
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string>;
  
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean;
  
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean;
  
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean;
  
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean;
  
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean;
  
  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string>;
}

/**
 * Autogenerated return type of CreateBranchProtectionRule
 */
export interface GQLCreateBranchProtectionRulePayload {
  
  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule?: GQLBranchProtectionRule;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of CreateEnterpriseOrganization
 */
export interface GQLCreateEnterpriseOrganizationInput {
  
  /**
   * The logins for the administrators of the new organization.
   */
  adminLogins: Array<string>;
  
  /**
   * The email used for sending billing receipts.
   */
  billingEmail: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise owning the new organization.
   */
  enterpriseId: string;
  
  /**
   * The login of the new organization.
   */
  login: string;
  
  /**
   * The profile name of the new organization.
   */
  profileName: string;
}

/**
 * Autogenerated return type of CreateEnterpriseOrganization
 */
export interface GQLCreateEnterpriseOrganizationPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise that owns the created organization.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * The organization that was created.
   */
  organization?: GQLOrganization;
}

/**
 * Autogenerated input type of CreateIpAllowListEntry
 */
export interface GQLCreateIpAllowListEntryInput {
  
  /**
   * An IP address or range of addresses in CIDR notation.
   */
  allowListValue: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Whether the IP allow list entry is active when an IP allow list is enabled.
   */
  isActive: boolean;
  
  /**
   * An optional name for the IP allow list entry.
   */
  name?: string;
  
  /**
   * The ID of the owner for which to create the new IP allow list entry.
   */
  ownerId: string;
}

/**
 * Autogenerated return type of CreateIpAllowListEntry
 */
export interface GQLCreateIpAllowListEntryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The IP allow list entry that was created.
   */
  ipAllowListEntry?: GQLIpAllowListEntry;
}

/**
 * Autogenerated input type of CreateIssue
 */
export interface GQLCreateIssueInput {
  
  /**
   * The Node ID for the user assignee for this issue.
   */
  assigneeIds?: Array<string>;
  
  /**
   * The body for the issue description.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * An array of Node IDs of labels for this issue.
   */
  labelIds?: Array<string>;
  
  /**
   * The Node ID of the milestone for this issue.
   */
  milestoneId?: string;
  
  /**
   * An array of Node IDs for projects associated with this issue.
   */
  projectIds?: Array<string>;
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
  
  /**
   * The title for the issue.
   */
  title: string;
}

/**
 * Autogenerated return type of CreateIssue
 */
export interface GQLCreateIssuePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new issue.
   */
  issue?: GQLIssue;
}

/**
 * Autogenerated input type of CreateProject
 */
export interface GQLCreateProjectInput {
  
  /**
   * The description of project.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of project.
   */
  name: string;
  
  /**
   * The owner ID to create the project under.
   */
  ownerId: string;
  
  /**
   * A list of repository IDs to create as linked repositories for the project
   */
  repositoryIds?: Array<string>;
  
  /**
   * The name of the GitHub-provided template.
   */
  template?: GQLProjectTemplate;
}

/**
 * GitHub-provided templates for Projects
 */
export enum GQLProjectTemplate {
  
  /**
   * Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
   */
  AUTOMATED_KANBAN_V2 = 'AUTOMATED_KANBAN_V2',
  
  /**
   * Create a board with triggers to automatically move cards across columns with review automation.
   */
  AUTOMATED_REVIEWS_KANBAN = 'AUTOMATED_REVIEWS_KANBAN',
  
  /**
   * Create a board with columns for To do, In progress and Done.
   */
  BASIC_KANBAN = 'BASIC_KANBAN',
  
  /**
   * Create a board to triage and prioritize bugs with To do, priority, and Done columns.
   */
  BUG_TRIAGE = 'BUG_TRIAGE'
}

/**
 * Autogenerated return type of CreateProject
 */
export interface GQLCreateProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new project.
   */
  project?: GQLProject;
}

/**
 * Autogenerated input type of CreatePullRequest
 */
export interface GQLCreatePullRequestInput {
  
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   */
  baseRefName: string;
  
  /**
   * The contents of the pull request.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Indicates whether this pull request should be a draft.
   */
  draft?: boolean;
  
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   */
  headRefName: string;
  
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify?: boolean;
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
  
  /**
   * The title of the pull request.
   */
  title: string;
}

/**
 * Autogenerated return type of CreatePullRequest
 */
export interface GQLCreatePullRequestPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new pull request.
   */
  pullRequest?: GQLPullRequest;
}

/**
 * Autogenerated input type of CreateRef
 */
export interface GQLCreateRefInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
   */
  name: string;
  
  /**
   * The GitObjectID that the new Ref shall target. Must point to a commit.
   */
  oid: GQLGitObjectID;
  
  /**
   * The Node ID of the Repository to create the Ref in.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of CreateRef
 */
export interface GQLCreateRefPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The newly created ref.
   */
  ref?: GQLRef;
}

/**
 * Autogenerated input type of CreateRepository
 */
export interface GQLCreateRepositoryInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * A short description of the new repository.
   */
  description?: string;
  
  /**
   * Indicates if the repository should have the issues feature enabled.
   */
  hasIssuesEnabled?: boolean;
  
  /**
   * Indicates if the repository should have the wiki feature enabled.
   */
  hasWikiEnabled?: boolean;
  
  /**
   * The URL for a web page about this repository.
   */
  homepageUrl?: GQLURI;
  
  /**
   * The name of the new repository.
   */
  name: string;
  
  /**
   * The ID of the owner for the new repository.
   */
  ownerId?: string;
  
  /**
   * When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
   */
  teamId?: string;
  
  /**
   * Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
   */
  template?: boolean;
  
  /**
   * Indicates the repository's visibility level.
   */
  visibility: GQLRepositoryVisibility;
}

/**
 * Autogenerated return type of CreateRepository
 */
export interface GQLCreateRepositoryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new repository.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of CreateTeamDiscussion
 */
export interface GQLCreateTeamDiscussionInput {
  
  /**
   * The content of the discussion.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * If true, restricts the visiblity of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
   */
  private?: boolean;
  
  /**
   * The ID of the team to which the discussion belongs.
   */
  teamId: string;
  
  /**
   * The title of the discussion.
   */
  title: string;
}

/**
 * Autogenerated return type of CreateTeamDiscussion
 */
export interface GQLCreateTeamDiscussionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new discussion.
   */
  teamDiscussion?: GQLTeamDiscussion;
}

/**
 * Autogenerated input type of CreateTeamDiscussionComment
 */
export interface GQLCreateTeamDiscussionCommentInput {
  
  /**
   * The content of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the discussion to which the comment belongs.
   */
  discussionId: string;
}

/**
 * Autogenerated return type of CreateTeamDiscussionComment
 */
export interface GQLCreateTeamDiscussionCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new comment.
   */
  teamDiscussionComment?: GQLTeamDiscussionComment;
}

/**
 * Autogenerated input type of DeclineTopicSuggestion
 */
export interface GQLDeclineTopicSuggestionInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of the suggested topic.
   */
  name: string;
  
  /**
   * The reason why the suggested topic is declined.
   */
  reason: GQLTopicSuggestionDeclineReason;
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Reason that the suggested topic is declined.
 */
export enum GQLTopicSuggestionDeclineReason {
  
  /**
   * The suggested topic is not relevant to the repository.
   */
  NOT_RELEVANT = 'NOT_RELEVANT',
  
  /**
   * The viewer does not like the suggested topic.
   */
  PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE',
  
  /**
   * The suggested topic is too general for the repository.
   */
  TOO_GENERAL = 'TOO_GENERAL',
  
  /**
   * The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
   */
  TOO_SPECIFIC = 'TOO_SPECIFIC'
}

/**
 * Autogenerated return type of DeclineTopicSuggestion
 */
export interface GQLDeclineTopicSuggestionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The declined topic.
   */
  topic?: GQLTopic;
}

/**
 * Autogenerated input type of DeleteBranchProtectionRule
 */
export interface GQLDeleteBranchProtectionRuleInput {
  
  /**
   * The global relay id of the branch protection rule to be deleted.
   */
  branchProtectionRuleId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeleteBranchProtectionRule
 */
export interface GQLDeleteBranchProtectionRulePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DeleteDeployment
 */
export interface GQLDeleteDeploymentInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the deployment to be deleted.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteDeployment
 */
export interface GQLDeleteDeploymentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DeleteIpAllowListEntry
 */
export interface GQLDeleteIpAllowListEntryInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the IP allow list entry to delete.
   */
  ipAllowListEntryId: string;
}

/**
 * Autogenerated return type of DeleteIpAllowListEntry
 */
export interface GQLDeleteIpAllowListEntryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The IP allow list entry that was deleted.
   */
  ipAllowListEntry?: GQLIpAllowListEntry;
}

/**
 * Autogenerated input type of DeleteIssue
 */
export interface GQLDeleteIssueInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the issue to delete.
   */
  issueId: string;
}

/**
 * Autogenerated return type of DeleteIssue
 */
export interface GQLDeleteIssuePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The repository the issue belonged to
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of DeleteIssueComment
 */
export interface GQLDeleteIssueCommentInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteIssueComment
 */
export interface GQLDeleteIssueCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DeleteProject
 */
export interface GQLDeleteProjectInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Project ID to update.
   */
  projectId: string;
}

/**
 * Autogenerated return type of DeleteProject
 */
export interface GQLDeleteProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The repository or organization the project was removed from.
   */
  owner?: GQLProjectOwner;
}

/**
 * Autogenerated input type of DeleteProjectCard
 */
export interface GQLDeleteProjectCardInput {
  
  /**
   * The id of the card to delete.
   */
  cardId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeleteProjectCard
 */
export interface GQLDeleteProjectCardPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The column the deleted card was in.
   */
  column?: GQLProjectColumn;
  
  /**
   * The deleted card ID.
   */
  deletedCardId?: string;
}

/**
 * Autogenerated input type of DeleteProjectColumn
 */
export interface GQLDeleteProjectColumnInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The id of the column to delete.
   */
  columnId: string;
}

/**
 * Autogenerated return type of DeleteProjectColumn
 */
export interface GQLDeleteProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The deleted column ID.
   */
  deletedColumnId?: string;
  
  /**
   * The project the deleted column was in.
   */
  project?: GQLProject;
}

/**
 * Autogenerated input type of DeletePullRequestReview
 */
export interface GQLDeletePullRequestReviewInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the pull request review to delete.
   */
  pullRequestReviewId: string;
}

/**
 * Autogenerated return type of DeletePullRequestReview
 */
export interface GQLDeletePullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The deleted pull request review.
   */
  pullRequestReview?: GQLPullRequestReview;
}

/**
 * Autogenerated input type of DeletePullRequestReviewComment
 */
export interface GQLDeletePullRequestReviewCommentInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeletePullRequestReviewComment
 */
export interface GQLDeletePullRequestReviewCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request review the deleted comment belonged to.
   */
  pullRequestReview?: GQLPullRequestReview;
}

/**
 * Autogenerated input type of DeleteRef
 */
export interface GQLDeleteRefInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the Ref to be deleted.
   */
  refId: string;
}

/**
 * Autogenerated return type of DeleteRef
 */
export interface GQLDeleteRefPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DeleteTeamDiscussion
 */
export interface GQLDeleteTeamDiscussionInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The discussion ID to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteTeamDiscussion
 */
export interface GQLDeleteTeamDiscussionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DeleteTeamDiscussionComment
 */
export interface GQLDeleteTeamDiscussionCommentInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteTeamDiscussionComment
 */
export interface GQLDeleteTeamDiscussionCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DismissPullRequestReview
 */
export interface GQLDismissPullRequestReviewInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The contents of the pull request review dismissal message.
   */
  message: string;
  
  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;
}

/**
 * Autogenerated return type of DismissPullRequestReview
 */
export interface GQLDismissPullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The dismissed pull request review.
   */
  pullRequestReview?: GQLPullRequestReview;
}

/**
 * Autogenerated input type of FollowUser
 */
export interface GQLFollowUserInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the user to follow.
   */
  userId: string;
}

/**
 * Autogenerated return type of FollowUser
 */
export interface GQLFollowUserPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The user that was followed.
   */
  user?: GQLUser;
}

/**
 * Autogenerated input type of InviteEnterpriseAdmin
 */
export interface GQLInviteEnterpriseAdminInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The email of the person to invite as an administrator.
   */
  email?: string;
  
  /**
   * The ID of the enterprise to which you want to invite an administrator.
   */
  enterpriseId: string;
  
  /**
   * The login of a user to invite as an administrator.
   */
  invitee?: string;
  
  /**
   * The role of the administrator.
   */
  role?: GQLEnterpriseAdministratorRole;
}

/**
 * Autogenerated return type of InviteEnterpriseAdmin
 */
export interface GQLInviteEnterpriseAdminPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The created enterprise administrator invitation.
   */
  invitation?: GQLEnterpriseAdministratorInvitation;
}

/**
 * Autogenerated input type of LinkRepositoryToProject
 */
export interface GQLLinkRepositoryToProjectInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the Project to link to a Repository
   */
  projectId: string;
  
  /**
   * The ID of the Repository to link to a Project.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of LinkRepositoryToProject
 */
export interface GQLLinkRepositoryToProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The linked Project.
   */
  project?: GQLProject;
  
  /**
   * The linked Repository.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of LockLockable
 */
export interface GQLLockLockableInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * A reason for why the issue or pull request will be locked.
   */
  lockReason?: GQLLockReason;
  
  /**
   * ID of the issue or pull request to be locked.
   */
  lockableId: string;
}

/**
 * Autogenerated return type of LockLockable
 */
export interface GQLLockLockablePayload {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The item that was locked.
   */
  lockedRecord?: GQLLockable;
}

/**
 * Autogenerated input type of MarkPullRequestReadyForReview
 */
export interface GQLMarkPullRequestReadyForReviewInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the pull request to be marked as ready for review.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of MarkPullRequestReadyForReview
 */
export interface GQLMarkPullRequestReadyForReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request that is ready for review.
   */
  pullRequest?: GQLPullRequest;
}

/**
 * Autogenerated input type of MergeBranch
 */
export interface GQLMergeBranchInput {
  
  /**
   * The name of the base branch that the provided head will be merged into.
   */
  base: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Message to use for the merge commit. If omitted, a default will be used.
   */
  commitMessage?: string;
  
  /**
   * The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
   */
  head: string;
  
  /**
   * The Node ID of the Repository containing the base branch that will be modified.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of MergeBranch
 */
export interface GQLMergeBranchPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The resulting merge Commit.
   */
  mergeCommit?: GQLCommit;
}

/**
 * Autogenerated input type of MergePullRequest
 */
export interface GQLMergePullRequestInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Commit body to use for the merge commit; if omitted, a default message will be used
   */
  commitBody?: string;
  
  /**
   * Commit headline to use for the merge commit; if omitted, a default message will be used.
   */
  commitHeadline?: string;
  
  /**
   * OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
   */
  expectedHeadOid?: GQLGitObjectID;
  
  /**
   * The merge method to use. If omitted, defaults to 'MERGE'
   */
  mergeMethod?: GQLPullRequestMergeMethod;
  
  /**
   * ID of the pull request to be merged.
   */
  pullRequestId: string;
}

/**
 * Represents available types of methods to use when merging a pull request.
 */
export enum GQLPullRequestMergeMethod {
  
  /**
   * Add all commits from the head branch to the base branch with a merge commit.
   */
  MERGE = 'MERGE',
  
  /**
   * Add all commits from the head branch onto the base branch individually.
   */
  REBASE = 'REBASE',
  
  /**
   * Combine all commits from the head branch into a single commit in the base branch.
   */
  SQUASH = 'SQUASH'
}

/**
 * Autogenerated return type of MergePullRequest
 */
export interface GQLMergePullRequestPayload {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request that was merged.
   */
  pullRequest?: GQLPullRequest;
}

/**
 * Autogenerated input type of MinimizeComment
 */
export interface GQLMinimizeCommentInput {
  
  /**
   * The classification of comment
   */
  classifier: GQLReportedContentClassifiers;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * The reasons a piece of content can be reported or minimized.
 */
export enum GQLReportedContentClassifiers {
  
  /**
   * An abusive or harassing piece of content
   */
  ABUSE = 'ABUSE',
  
  /**
   * A duplicated piece of content
   */
  DUPLICATE = 'DUPLICATE',
  
  /**
   * An irrelevant piece of content
   */
  OFF_TOPIC = 'OFF_TOPIC',
  
  /**
   * An outdated piece of content
   */
  OUTDATED = 'OUTDATED',
  
  /**
   * The content has been resolved
   */
  RESOLVED = 'RESOLVED',
  
  /**
   * A spammy piece of content
   */
  SPAM = 'SPAM'
}

/**
 * Autogenerated return type of MinimizeComment
 */
export interface GQLMinimizeCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The comment that was minimized.
   */
  minimizedComment?: GQLMinimizable;
}

/**
 * Autogenerated input type of MoveProjectCard
 */
export interface GQLMoveProjectCardInput {
  
  /**
   * Place the new card after the card with this id. Pass null to place it at the top.
   */
  afterCardId?: string;
  
  /**
   * The id of the card to move.
   */
  cardId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The id of the column to move it into.
   */
  columnId: string;
}

/**
 * Autogenerated return type of MoveProjectCard
 */
export interface GQLMoveProjectCardPayload {
  
  /**
   * The new edge of the moved card.
   */
  cardEdge?: GQLProjectCardEdge;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of MoveProjectColumn
 */
export interface GQLMoveProjectColumnInput {
  
  /**
   * Place the new column after the column with this id. Pass null to place it at the front.
   */
  afterColumnId?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The id of the column to move.
   */
  columnId: string;
}

/**
 * Autogenerated return type of MoveProjectColumn
 */
export interface GQLMoveProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new edge of the moved column.
   */
  columnEdge?: GQLProjectColumnEdge;
}

/**
 * Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface GQLRegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set an identity provider.
   */
  enterpriseId: string;
}

/**
 * Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface GQLRegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The identity provider for the enterprise.
   */
  identityProvider?: GQLEnterpriseIdentityProvider;
}

/**
 * Autogenerated input type of RemoveAssigneesFromAssignable
 */
export interface GQLRemoveAssigneesFromAssignableInput {
  
  /**
   * The id of the assignable object to remove assignees from.
   */
  assignableId: string;
  
  /**
   * The id of users to remove as assignees.
   */
  assigneeIds: Array<string>;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of RemoveAssigneesFromAssignable
 */
export interface GQLRemoveAssigneesFromAssignablePayload {
  
  /**
   * The item that was unassigned.
   */
  assignable?: GQLAssignable;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of RemoveEnterpriseAdmin
 */
export interface GQLRemoveEnterpriseAdminInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Enterprise ID from which to remove the administrator.
   */
  enterpriseId: string;
  
  /**
   * The login of the user to remove as an administrator.
   */
  login: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseAdmin
 */
export interface GQLRemoveEnterpriseAdminPayload {
  
  /**
   * The user who was removed as an administrator.
   */
  admin?: GQLUser;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated enterprise.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of removing an administrator.
   */
  message?: string;
  
  /**
   * The viewer performing the mutation.
   */
  viewer?: GQLUser;
}

/**
 * Autogenerated input type of RemoveEnterpriseIdentityProvider
 */
export interface GQLRemoveEnterpriseIdentityProviderInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise from which to remove the identity provider.
   */
  enterpriseId: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseIdentityProvider
 */
export interface GQLRemoveEnterpriseIdentityProviderPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The identity provider that was removed from the enterprise.
   */
  identityProvider?: GQLEnterpriseIdentityProvider;
}

/**
 * Autogenerated input type of RemoveEnterpriseOrganization
 */
export interface GQLRemoveEnterpriseOrganizationInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise from which the organization should be removed.
   */
  enterpriseId: string;
  
  /**
   * The ID of the organization to remove from the enterprise.
   */
  organizationId: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseOrganization
 */
export interface GQLRemoveEnterpriseOrganizationPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated enterprise.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * The organization that was removed from the enterprise.
   */
  organization?: GQLOrganization;
  
  /**
   * The viewer performing the mutation.
   */
  viewer?: GQLUser;
}

/**
 * Autogenerated input type of RemoveLabelsFromLabelable
 */
export interface GQLRemoveLabelsFromLabelableInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ids of labels to remove.
   */
  labelIds: Array<string>;
  
  /**
   * The id of the Labelable to remove labels from.
   */
  labelableId: string;
}

/**
 * Autogenerated return type of RemoveLabelsFromLabelable
 */
export interface GQLRemoveLabelsFromLabelablePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Labelable the labels were removed from.
   */
  labelable?: GQLLabelable;
}

/**
 * Autogenerated input type of RemoveOutsideCollaborator
 */
export interface GQLRemoveOutsideCollaboratorInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the organization to remove the outside collaborator from.
   */
  organizationId: string;
  
  /**
   * The ID of the outside collaborator to remove.
   */
  userId: string;
}

/**
 * Autogenerated return type of RemoveOutsideCollaborator
 */
export interface GQLRemoveOutsideCollaboratorPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The user that was removed as an outside collaborator.
   */
  removedUser?: GQLUser;
}

/**
 * Autogenerated input type of RemoveReaction
 */
export interface GQLRemoveReactionInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of the emoji reaction to remove.
   */
  content: GQLReactionContent;
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of RemoveReaction
 */
export interface GQLRemoveReactionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The reaction object.
   */
  reaction?: GQLReaction;
  
  /**
   * The reactable subject.
   */
  subject?: GQLReactable;
}

/**
 * Autogenerated input type of RemoveStar
 */
export interface GQLRemoveStarInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Starrable ID to unstar.
   */
  starrableId: string;
}

/**
 * Autogenerated return type of RemoveStar
 */
export interface GQLRemoveStarPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The starrable.
   */
  starrable?: GQLStarrable;
}

/**
 * Autogenerated input type of ReopenIssue
 */
export interface GQLReopenIssueInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the issue to be opened.
   */
  issueId: string;
}

/**
 * Autogenerated return type of ReopenIssue
 */
export interface GQLReopenIssuePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The issue that was opened.
   */
  issue?: GQLIssue;
}

/**
 * Autogenerated input type of ReopenPullRequest
 */
export interface GQLReopenPullRequestInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the pull request to be reopened.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of ReopenPullRequest
 */
export interface GQLReopenPullRequestPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request that was reopened.
   */
  pullRequest?: GQLPullRequest;
}

/**
 * Autogenerated input type of RequestReviews
 */
export interface GQLRequestReviewsInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;
  
  /**
   * The Node IDs of the team to request.
   */
  teamIds?: Array<string>;
  
  /**
   * Add users to the set rather than replace.
   */
  union?: boolean;
  
  /**
   * The Node IDs of the user to request.
   */
  userIds?: Array<string>;
}

/**
 * Autogenerated return type of RequestReviews
 */
export interface GQLRequestReviewsPayload {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request that is getting requests.
   */
  pullRequest?: GQLPullRequest;
  
  /**
   * The edge from the pull request to the requested reviewers.
   */
  requestedReviewersEdge?: GQLUserEdge;
}

/**
 * Autogenerated input type of ResolveReviewThread
 */
export interface GQLResolveReviewThreadInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the thread to resolve
   */
  threadId: string;
}

/**
 * Autogenerated return type of ResolveReviewThread
 */
export interface GQLResolveReviewThreadPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The thread to resolve.
   */
  thread?: GQLPullRequestReviewThread;
}

/**
 * Autogenerated input type of SetEnterpriseIdentityProvider
 */
export interface GQLSetEnterpriseIdentityProviderInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod: GQLSamlDigestAlgorithm;
  
  /**
   * The ID of the enterprise on which to set an identity provider.
   */
  enterpriseId: string;
  
  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate: string;
  
  /**
   * The Issuer Entity ID for the SAML identity provider
   */
  issuer?: string;
  
  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod: GQLSamlSignatureAlgorithm;
  
  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl: GQLURI;
}

/**
 * Autogenerated return type of SetEnterpriseIdentityProvider
 */
export interface GQLSetEnterpriseIdentityProviderPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The identity provider for the enterprise.
   */
  identityProvider?: GQLEnterpriseIdentityProvider;
}

/**
 * Autogenerated input type of SubmitPullRequestReview
 */
export interface GQLSubmitPullRequestReviewInput {
  
  /**
   * The text field to set on the Pull Request Review.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The event to send to the Pull Request Review.
   */
  event: GQLPullRequestReviewEvent;
  
  /**
   * The Pull Request ID to submit any pending reviews.
   */
  pullRequestId?: string;
  
  /**
   * The Pull Request Review ID to submit.
   */
  pullRequestReviewId?: string;
}

/**
 * Autogenerated return type of SubmitPullRequestReview
 */
export interface GQLSubmitPullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The submitted pull request review.
   */
  pullRequestReview?: GQLPullRequestReview;
}

/**
 * Autogenerated input type of TransferIssue
 */
export interface GQLTransferIssueInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the issue to be transferred
   */
  issueId: string;
  
  /**
   * The Node ID of the repository the issue should be transferred to
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of TransferIssue
 */
export interface GQLTransferIssuePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The issue that was transferred
   */
  issue?: GQLIssue;
}

/**
 * Autogenerated input type of UnarchiveRepository
 */
export interface GQLUnarchiveRepositoryInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the repository to unarchive.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of UnarchiveRepository
 */
export interface GQLUnarchiveRepositoryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The repository that was unarchived.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of UnfollowUser
 */
export interface GQLUnfollowUserInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the user to unfollow.
   */
  userId: string;
}

/**
 * Autogenerated return type of UnfollowUser
 */
export interface GQLUnfollowUserPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The user that was unfollowed.
   */
  user?: GQLUser;
}

/**
 * Autogenerated input type of UnlinkRepositoryFromProject
 */
export interface GQLUnlinkRepositoryFromProjectInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the Project linked to the Repository.
   */
  projectId: string;
  
  /**
   * The ID of the Repository linked to the Project.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of UnlinkRepositoryFromProject
 */
export interface GQLUnlinkRepositoryFromProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The linked Project.
   */
  project?: GQLProject;
  
  /**
   * The linked Repository.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of UnlockLockable
 */
export interface GQLUnlockLockableInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the issue or pull request to be unlocked.
   */
  lockableId: string;
}

/**
 * Autogenerated return type of UnlockLockable
 */
export interface GQLUnlockLockablePayload {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The item that was unlocked.
   */
  unlockedRecord?: GQLLockable;
}

/**
 * Autogenerated input type of UnmarkIssueAsDuplicate
 */
export interface GQLUnmarkIssueAsDuplicateInput {
  
  /**
   * ID of the issue or pull request currently considered canonical/authoritative/original.
   */
  canonicalId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * ID of the issue or pull request currently marked as a duplicate.
   */
  duplicateId: string;
}

/**
 * Autogenerated return type of UnmarkIssueAsDuplicate
 */
export interface GQLUnmarkIssueAsDuplicatePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The issue or pull request that was marked as a duplicate.
   */
  duplicate?: GQLIssueOrPullRequest;
}

/**
 * Autogenerated input type of UnminimizeComment
 */
export interface GQLUnminimizeCommentInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of UnminimizeComment
 */
export interface GQLUnminimizeCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The comment that was unminimized.
   */
  unminimizedComment?: GQLMinimizable;
}

/**
 * Autogenerated input type of UnresolveReviewThread
 */
export interface GQLUnresolveReviewThreadInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the thread to unresolve
   */
  threadId: string;
}

/**
 * Autogenerated return type of UnresolveReviewThread
 */
export interface GQLUnresolveReviewThreadPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The thread to resolve.
   */
  thread?: GQLPullRequestReviewThread;
}

/**
 * Autogenerated input type of UpdateBranchProtectionRule
 */
export interface GQLUpdateBranchProtectionRuleInput {
  
  /**
   * The global relay id of the branch protection rule to be updated.
   */
  branchProtectionRuleId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean;
  
  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern?: string;
  
  /**
   * A list of User, Team or App IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string>;
  
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string>;
  
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean;
  
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean;
  
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean;
  
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean;
  
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean;
  
  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string>;
}

/**
 * Autogenerated return type of UpdateBranchProtectionRule
 */
export interface GQLUpdateBranchProtectionRulePayload {
  
  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule?: GQLBranchProtectionRule;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseActionExecutionCapabilitySetting
 */
export interface GQLUpdateEnterpriseActionExecutionCapabilitySettingInput {
  
  /**
   * The value for the action execution capability setting on the enterprise.
   */
  capability: GQLActionExecutionCapabilitySetting;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can create repositories setting.
   */
  enterpriseId: string;
}

/**
 * The possible capabilities for action executions setting.
 */
export enum GQLActionExecutionCapabilitySetting {
  
  /**
   * All action executions are enabled.
   */
  ALL_ACTIONS = 'ALL_ACTIONS',
  
  /**
   * All action executions are disabled.
   */
  DISABLED = 'DISABLED',
  
  /**
   * Only actions defined within the repo are allowed.
   */
  LOCAL_ACTIONS_ONLY = 'LOCAL_ACTIONS_ONLY',
  
  /**
   * Organization administrators action execution capabilities.
   */
  NO_POLICY = 'NO_POLICY'
}

/**
 * Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting
 */
export interface GQLUpdateEnterpriseActionExecutionCapabilitySettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated action execution capability setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the action execution capability setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseAdministratorRole
 */
export interface GQLUpdateEnterpriseAdministratorRoleInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;
  
  /**
   * The login of a administrator whose role is being changed.
   */
  login: string;
  
  /**
   * The new role for the Enterprise administrator.
   */
  role: GQLEnterpriseAdministratorRole;
}

/**
 * Autogenerated return type of UpdateEnterpriseAdministratorRole
 */
export interface GQLUpdateEnterpriseAdministratorRolePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * A message confirming the result of changing the administrator's role.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface GQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the allow private repository forking setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the allow private repository forking setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface GQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated allow private repository forking setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the allow private repository forking setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface GQLUpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the default repository permission setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the default repository permission setting on the enterprise.
   */
  settingValue: GQLEnterpriseDefaultRepositoryPermissionSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface GQLUpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated default repository permission setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the default repository permission setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface GQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can change repository visibility setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can change repository visibility setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface GQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can change repository visibility setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can change repository visibility setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface GQLUpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can create repositories setting.
   */
  enterpriseId: string;
  
  /**
   * Allow members to create internal repositories. Defaults to current value.
   */
  membersCanCreateInternalRepositories?: boolean;
  
  /**
   * Allow members to create private repositories. Defaults to current value.
   */
  membersCanCreatePrivateRepositories?: boolean;
  
  /**
   * Allow members to create public repositories. Defaults to current value.
   */
  membersCanCreatePublicRepositories?: boolean;
  
  /**
   * When false, allow member organizations to set their own repository creation member privileges.
   */
  membersCanCreateRepositoriesPolicyEnabled?: boolean;
  
  /**
   * Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
   */
  settingValue?: GQLEnterpriseMembersCanCreateRepositoriesSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface GQLUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can create repositories setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can create repositories setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface GQLUpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can delete issues setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can delete issues setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface GQLUpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can delete issues setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can delete issues setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface GQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can delete repositories setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can delete repositories setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface GQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can delete repositories setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can delete repositories setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface GQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can invite collaborators setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can invite collaborators setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface GQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can invite collaborators setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can invite collaborators setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface GQLUpdateEnterpriseMembersCanMakePurchasesSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can make purchases setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can make purchases setting on the enterprise.
   */
  settingValue: GQLEnterpriseMembersCanMakePurchasesSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface GQLUpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can make purchases setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can make purchases setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface GQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can update protected branches setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can update protected branches setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface GQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can update protected branches setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can update protected branches setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface GQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the members can view dependency insights setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the members can view dependency insights setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface GQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated members can view dependency insights setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the members can view dependency insights setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface GQLUpdateEnterpriseOrganizationProjectsSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the organization projects setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the organization projects setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface GQLUpdateEnterpriseOrganizationProjectsSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated organization projects setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the organization projects setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseProfile
 */
export interface GQLUpdateEnterpriseProfileInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The description of the enterprise.
   */
  description?: string;
  
  /**
   * The Enterprise ID to update.
   */
  enterpriseId: string;
  
  /**
   * The location of the enterprise.
   */
  location?: string;
  
  /**
   * The name of the enterprise.
   */
  name?: string;
  
  /**
   * The URL of the enterprise's website.
   */
  websiteUrl?: string;
}

/**
 * Autogenerated return type of UpdateEnterpriseProfile
 */
export interface GQLUpdateEnterpriseProfilePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated enterprise.
   */
  enterprise?: GQLEnterprise;
}

/**
 * Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface GQLUpdateEnterpriseRepositoryProjectsSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the repository projects setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the repository projects setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface GQLUpdateEnterpriseRepositoryProjectsSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated repository projects setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the repository projects setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface GQLUpdateEnterpriseTeamDiscussionsSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the team discussions setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the team discussions setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface GQLUpdateEnterpriseTeamDiscussionsSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated team discussions setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the team discussions setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface GQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the enterprise on which to set the two factor authentication required setting.
   */
  enterpriseId: string;
  
  /**
   * The value for the two factor authentication required setting on the enterprise.
   */
  settingValue: GQLEnterpriseEnabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface GQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The enterprise with the updated two factor authentication required setting.
   */
  enterprise?: GQLEnterprise;
  
  /**
   * A message confirming the result of updating the two factor authentication required setting.
   */
  message?: string;
}

/**
 * Autogenerated input type of UpdateIpAllowListEnabledSetting
 */
export interface GQLUpdateIpAllowListEnabledSettingInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the owner on which to set the IP allow list enabled setting.
   */
  ownerId: string;
  
  /**
   * The value for the IP allow list enabled setting.
   */
  settingValue: GQLIpAllowListEnabledSettingValue;
}

/**
 * Autogenerated return type of UpdateIpAllowListEnabledSetting
 */
export interface GQLUpdateIpAllowListEnabledSettingPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner?: GQLIpAllowListOwner;
}

/**
 * Autogenerated input type of UpdateIpAllowListEntry
 */
export interface GQLUpdateIpAllowListEntryInput {
  
  /**
   * An IP address or range of addresses in CIDR notation.
   */
  allowListValue: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the IP allow list entry to update.
   */
  ipAllowListEntryId: string;
  
  /**
   * Whether the IP allow list entry is active when an IP allow list is enabled.
   */
  isActive: boolean;
  
  /**
   * An optional name for the IP allow list entry.
   */
  name?: string;
}

/**
 * Autogenerated return type of UpdateIpAllowListEntry
 */
export interface GQLUpdateIpAllowListEntryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The IP allow list entry that was updated.
   */
  ipAllowListEntry?: GQLIpAllowListEntry;
}

/**
 * Autogenerated input type of UpdateIssue
 */
export interface GQLUpdateIssueInput {
  
  /**
   * An array of Node IDs of users for this issue.
   */
  assigneeIds?: Array<string>;
  
  /**
   * The body for the issue description.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the Issue to modify.
   */
  id: string;
  
  /**
   * An array of Node IDs of labels for this issue.
   */
  labelIds?: Array<string>;
  
  /**
   * The Node ID of the milestone for this issue.
   */
  milestoneId?: string;
  
  /**
   * An array of Node IDs for projects associated with this issue.
   */
  projectIds?: Array<string>;
  
  /**
   * The desired issue state.
   */
  state?: GQLIssueState;
  
  /**
   * The title for the issue.
   */
  title?: string;
}

/**
 * Autogenerated return type of UpdateIssue
 */
export interface GQLUpdateIssuePayload {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The issue.
   */
  issue?: GQLIssue;
}

/**
 * Autogenerated input type of UpdateIssueComment
 */
export interface GQLUpdateIssueCommentInput {
  
  /**
   * The updated text of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the IssueComment to modify.
   */
  id: string;
}

/**
 * Autogenerated return type of UpdateIssueComment
 */
export interface GQLUpdateIssueCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated comment.
   */
  issueComment?: GQLIssueComment;
}

/**
 * Autogenerated input type of UpdateProject
 */
export interface GQLUpdateProjectInput {
  
  /**
   * The description of project.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of project.
   */
  name?: string;
  
  /**
   * The Project ID to update.
   */
  projectId: string;
  
  /**
   * Whether the project is public or not.
   */
  public?: boolean;
  
  /**
   * Whether the project is open or closed.
   */
  state?: GQLProjectState;
}

/**
 * Autogenerated return type of UpdateProject
 */
export interface GQLUpdateProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated project.
   */
  project?: GQLProject;
}

/**
 * Autogenerated input type of UpdateProjectCard
 */
export interface GQLUpdateProjectCardInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Whether or not the ProjectCard should be archived
   */
  isArchived?: boolean;
  
  /**
   * The note of ProjectCard.
   */
  note?: string;
  
  /**
   * The ProjectCard ID to update.
   */
  projectCardId: string;
}

/**
 * Autogenerated return type of UpdateProjectCard
 */
export interface GQLUpdateProjectCardPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated ProjectCard.
   */
  projectCard?: GQLProjectCard;
}

/**
 * Autogenerated input type of UpdateProjectColumn
 */
export interface GQLUpdateProjectColumnInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The name of project column.
   */
  name: string;
  
  /**
   * The ProjectColumn ID to update.
   */
  projectColumnId: string;
}

/**
 * Autogenerated return type of UpdateProjectColumn
 */
export interface GQLUpdateProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated project column.
   */
  projectColumn?: GQLProjectColumn;
}

/**
 * Autogenerated input type of UpdatePullRequest
 */
export interface GQLUpdatePullRequestInput {
  
  /**
   * An array of Node IDs of users for this pull request.
   */
  assigneeIds?: Array<string>;
  
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   */
  baseRefName?: string;
  
  /**
   * The contents of the pull request.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * An array of Node IDs of labels for this pull request.
   */
  labelIds?: Array<string>;
  
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify?: boolean;
  
  /**
   * The Node ID of the milestone for this pull request.
   */
  milestoneId?: string;
  
  /**
   * An array of Node IDs for projects associated with this pull request.
   */
  projectIds?: Array<string>;
  
  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;
  
  /**
   * The target state of the pull request.
   */
  state?: GQLPullRequestUpdateState;
  
  /**
   * The title of the pull request.
   */
  title?: string;
}

/**
 * The possible target states when updating a pull request.
 */
export enum GQLPullRequestUpdateState {
  
  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',
  
  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN'
}

/**
 * Autogenerated return type of UpdatePullRequest
 */
export interface GQLUpdatePullRequestPayload {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: GQLActor;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated pull request.
   */
  pullRequest?: GQLPullRequest;
}

/**
 * Autogenerated input type of UpdatePullRequestReview
 */
export interface GQLUpdatePullRequestReviewInput {
  
  /**
   * The contents of the pull request review body.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;
}

/**
 * Autogenerated return type of UpdatePullRequestReview
 */
export interface GQLUpdatePullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated pull request review.
   */
  pullRequestReview?: GQLPullRequestReview;
}

/**
 * Autogenerated input type of UpdatePullRequestReviewComment
 */
export interface GQLUpdatePullRequestReviewCommentInput {
  
  /**
   * The text of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the comment to modify.
   */
  pullRequestReviewCommentId: string;
}

/**
 * Autogenerated return type of UpdatePullRequestReviewComment
 */
export interface GQLUpdatePullRequestReviewCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated comment.
   */
  pullRequestReviewComment?: GQLPullRequestReviewComment;
}

/**
 * Autogenerated input type of UpdateRef
 */
export interface GQLUpdateRefInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Permit updates of branch Refs that are not fast-forwards?
   */
  force?: boolean;
  
  /**
   * The GitObjectID that the Ref shall be updated to target.
   */
  oid: GQLGitObjectID;
  
  /**
   * The Node ID of the Ref to be updated.
   */
  refId: string;
}

/**
 * Autogenerated return type of UpdateRef
 */
export interface GQLUpdateRefPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated Ref.
   */
  ref?: GQLRef;
}

/**
 * Autogenerated input type of UpdateRepository
 */
export interface GQLUpdateRepositoryInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * A new description for the repository. Pass an empty string to erase the existing description.
   */
  description?: string;
  
  /**
   * Indicates if the repository should have the issues feature enabled.
   */
  hasIssuesEnabled?: boolean;
  
  /**
   * Indicates if the repository should have the project boards feature enabled.
   */
  hasProjectsEnabled?: boolean;
  
  /**
   * Indicates if the repository should have the wiki feature enabled.
   */
  hasWikiEnabled?: boolean;
  
  /**
   * The URL for a web page about this repository. Pass an empty string to erase the existing URL.
   */
  homepageUrl?: GQLURI;
  
  /**
   * The new name of the repository.
   */
  name?: string;
  
  /**
   * The ID of the repository to update.
   */
  repositoryId: string;
  
  /**
   * Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
   */
  template?: boolean;
}

/**
 * Autogenerated return type of UpdateRepository
 */
export interface GQLUpdateRepositoryPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated repository.
   */
  repository?: GQLRepository;
}

/**
 * Autogenerated input type of UpdateSubscription
 */
export interface GQLUpdateSubscriptionInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new state of the subscription.
   */
  state: GQLSubscriptionState;
  
  /**
   * The Node ID of the subscribable object to modify.
   */
  subscribableId: string;
}

/**
 * Autogenerated return type of UpdateSubscription
 */
export interface GQLUpdateSubscriptionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The input subscribable entity.
   */
  subscribable?: GQLSubscribable;
}

/**
 * Autogenerated input type of UpdateTeamDiscussion
 */
export interface GQLUpdateTeamDiscussionInput {
  
  /**
   * The updated text of the discussion.
   */
  body?: string;
  
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  bodyVersion?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the discussion to modify.
   */
  id: string;
  
  /**
   * If provided, sets the pinned state of the updated discussion.
   */
  pinned?: boolean;
  
  /**
   * The updated title of the discussion.
   */
  title?: string;
}

/**
 * Autogenerated return type of UpdateTeamDiscussion
 */
export interface GQLUpdateTeamDiscussionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated discussion.
   */
  teamDiscussion?: GQLTeamDiscussion;
}

/**
 * Autogenerated input type of UpdateTeamDiscussionComment
 */
export interface GQLUpdateTeamDiscussionCommentInput {
  
  /**
   * The updated text of the comment.
   */
  body: string;
  
  /**
   * The current version of the body content.
   */
  bodyVersion?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ID of the comment to modify.
   */
  id: string;
}

/**
 * Autogenerated return type of UpdateTeamDiscussionComment
 */
export interface GQLUpdateTeamDiscussionCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated comment.
   */
  teamDiscussionComment?: GQLTeamDiscussionComment;
}

/**
 * Autogenerated input type of UpdateTopics
 */
export interface GQLUpdateTopicsInput {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
  
  /**
   * An array of topic names.
   */
  topicNames: Array<string>;
}

/**
 * Autogenerated return type of UpdateTopics
 */
export interface GQLUpdateTopicsPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Names of the provided topics that are not valid.
   */
  invalidTopicNames?: Array<string>;
  
  /**
   * The updated repository.
   */
  repository?: GQLRepository;
}

/**
 * Represents a Git blob.
 */
export interface GQLBlob extends GQLGitObject, GQLNode {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * Byte size of Blob object
   */
  byteSize: number;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: GQLURI;
  id: string;
  
  /**
   * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
   */
  isBinary?: boolean;
  
  /**
   * Indicates whether the contents is truncated
   */
  isTruncated: boolean;
  
  /**
   * The Git object ID
   */
  oid: GQLGitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: GQLRepository;
  
  /**
   * UTF8 text data or null if the Blob is binary
   */
  text?: string;
}

/**
 * A generic hovercard context with a message and icon
 */
export interface GQLGenericHovercardContext extends GQLHovercardContext {
  
  /**
   * A string describing this context
   */
  message: string;
  
  /**
   * An octicon to accompany this context
   */
  octicon: string;
}

/**
 * Represents a GPG signature on a Commit or Tag.
 */
export interface GQLGpgSignature extends GQLGitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Hex-encoded ID of the key that signed this object.
   */
  keyId?: string;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: GQLUser;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GQLGitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * An organization teams hovercard context
 */
export interface GQLOrganizationTeamsHovercardContext extends GQLHovercardContext {
  
  /**
   * A string describing this context
   */
  message: string;
  
  /**
   * An octicon to accompany this context
   */
  octicon: string;
  
  /**
   * Teams in this organization the user is a member of that are relevant
   */
  relevantTeams: GQLTeamConnection;
  
  /**
   * The path for the full team list for this user
   */
  teamsResourcePath: GQLURI;
  
  /**
   * The URL for the full team list for this user
   */
  teamsUrl: GQLURI;
  
  /**
   * The total number of teams the user is on in the organization
   */
  totalTeamCount: number;
}

/**
 * An organization list hovercard context
 */
export interface GQLOrganizationsHovercardContext extends GQLHovercardContext {
  
  /**
   * A string describing this context
   */
  message: string;
  
  /**
   * An octicon to accompany this context
   */
  octicon: string;
  
  /**
   * Organizations this user is a member of that are relevant
   */
  relevantOrganizations: GQLOrganizationConnection;
  
  /**
   * The total number of organizations this user is in
   */
  totalOrganizationCount: number;
}

/**
 * A version tag contains the mapping between a tag name and a version.
 */
export interface GQLPackageTag extends GQLNode {
  id: string;
  
  /**
   * Identifies the tag name of the version.
   */
  name: string;
  
  /**
   * Version that the tag is associated with.
   */
  version?: GQLPackageVersion;
}

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface GQLReviewStatusHovercardContext extends GQLHovercardContext {
  
  /**
   * A string describing this context
   */
  message: string;
  
  /**
   * An octicon to accompany this context
   */
  octicon: string;
  
  /**
   * The current status of the pull request with respect to code review.
   */
  reviewDecision?: GQLPullRequestReviewDecision;
}

/**
 * Represents an S/MIME signature on a Commit or Tag.
 */
export interface GQLSmimeSignature extends GQLGitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: GQLUser;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GQLGitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Represents a Git tag.
 */
export interface GQLTag extends GQLGitObject, GQLNode {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: GQLURI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: GQLURI;
  id: string;
  
  /**
   * The Git tag message.
   */
  message?: string;
  
  /**
   * The Git tag name.
   */
  name: string;
  
  /**
   * The Git object ID
   */
  oid: GQLGitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: GQLRepository;
  
  /**
   * Details about the tag author.
   */
  tagger?: GQLGitActor;
  
  /**
   * The Git object the tag points to.
   */
  target: GQLGitObject;
}

/**
 * Represents an unknown signature on a Commit or Tag.
 */
export interface GQLUnknownSignature extends GQLGitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: GQLUser;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GQLGitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * A hovercard context with a message describing how the viewer is related.
 */
export interface GQLViewerHovercardContext extends GQLHovercardContext {
  
  /**
   * A string describing this context
   */
  message: string;
  
  /**
   * An octicon to accompany this context
   */
  octicon: string;
  
  /**
   * Identifies the user who is related to this context.
   */
  viewer: GQLUser;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  CodeOfConduct?: GQLCodeOfConductTypeResolver;
  Node?: {
    __resolveType: GQLNodeTypeResolver
  };
  
  URI?: GraphQLScalarType;
  Enterprise?: GQLEnterpriseTypeResolver;
  EnterpriseBillingInfo?: GQLEnterpriseBillingInfoTypeResolver;
  DateTime?: GraphQLScalarType;
  HTML?: GraphQLScalarType;
  EnterpriseMemberConnection?: GQLEnterpriseMemberConnectionTypeResolver;
  EnterpriseMemberEdge?: GQLEnterpriseMemberEdgeTypeResolver;
  EnterpriseMember?: {
    __resolveType: GQLEnterpriseMemberTypeResolver
  };
  
  EnterpriseUserAccount?: GQLEnterpriseUserAccountTypeResolver;
  Actor?: {
    __resolveType: GQLActorTypeResolver
  };
  
  EnterpriseOrganizationMembershipConnection?: GQLEnterpriseOrganizationMembershipConnectionTypeResolver;
  EnterpriseOrganizationMembershipEdge?: GQLEnterpriseOrganizationMembershipEdgeTypeResolver;
  Organization?: GQLOrganizationTypeResolver;
  MemberStatusable?: {
    __resolveType: GQLMemberStatusableTypeResolver
  };
  
  UserStatusConnection?: GQLUserStatusConnectionTypeResolver;
  UserStatusEdge?: GQLUserStatusEdgeTypeResolver;
  UserStatus?: GQLUserStatusTypeResolver;
  User?: GQLUserTypeResolver;
  PackageOwner?: {
    __resolveType: GQLPackageOwnerTypeResolver
  };
  
  PackageConnection?: GQLPackageConnectionTypeResolver;
  PackageEdge?: GQLPackageEdgeTypeResolver;
  Package?: GQLPackageTypeResolver;
  PackageVersion?: GQLPackageVersionTypeResolver;
  PackageFileConnection?: GQLPackageFileConnectionTypeResolver;
  PackageFileEdge?: GQLPackageFileEdgeTypeResolver;
  PackageFile?: GQLPackageFileTypeResolver;
  PageInfo?: GQLPageInfoTypeResolver;
  Release?: GQLReleaseTypeResolver;
  UniformResourceLocatable?: {
    __resolveType: GQLUniformResourceLocatableTypeResolver
  };
  
  ReleaseAssetConnection?: GQLReleaseAssetConnectionTypeResolver;
  ReleaseAssetEdge?: GQLReleaseAssetEdgeTypeResolver;
  ReleaseAsset?: GQLReleaseAssetTypeResolver;
  Ref?: GQLRefTypeResolver;
  PullRequestConnection?: GQLPullRequestConnectionTypeResolver;
  PullRequestEdge?: GQLPullRequestEdgeTypeResolver;
  PullRequest?: GQLPullRequestTypeResolver;
  Assignable?: {
    __resolveType: GQLAssignableTypeResolver
  };
  
  UserConnection?: GQLUserConnectionTypeResolver;
  UserEdge?: GQLUserEdgeTypeResolver;
  Closable?: {
    __resolveType: GQLClosableTypeResolver
  };
  
  Comment?: {
    __resolveType: GQLCommentTypeResolver
  };
  
  UserContentEditConnection?: GQLUserContentEditConnectionTypeResolver;
  UserContentEditEdge?: GQLUserContentEditEdgeTypeResolver;
  UserContentEdit?: GQLUserContentEditTypeResolver;
  Labelable?: {
    __resolveType: GQLLabelableTypeResolver
  };
  
  LabelConnection?: GQLLabelConnectionTypeResolver;
  LabelEdge?: GQLLabelEdgeTypeResolver;
  Label?: GQLLabelTypeResolver;
  IssueConnection?: GQLIssueConnectionTypeResolver;
  IssueEdge?: GQLIssueEdgeTypeResolver;
  Issue?: GQLIssueTypeResolver;
  Lockable?: {
    __resolveType: GQLLockableTypeResolver
  };
  
  Reactable?: {
    __resolveType: GQLReactableTypeResolver
  };
  
  ReactionGroup?: GQLReactionGroupTypeResolver;
  ReactingUserConnection?: GQLReactingUserConnectionTypeResolver;
  ReactingUserEdge?: GQLReactingUserEdgeTypeResolver;
  ReactionConnection?: GQLReactionConnectionTypeResolver;
  ReactionEdge?: GQLReactionEdgeTypeResolver;
  Reaction?: GQLReactionTypeResolver;
  RepositoryNode?: {
    __resolveType: GQLRepositoryNodeTypeResolver
  };
  
  Repository?: GQLRepositoryTypeResolver;
  ProjectOwner?: {
    __resolveType: GQLProjectOwnerTypeResolver
  };
  
  Project?: GQLProjectTypeResolver;
  Updatable?: {
    __resolveType: GQLUpdatableTypeResolver
  };
  
  ProjectColumnConnection?: GQLProjectColumnConnectionTypeResolver;
  ProjectColumnEdge?: GQLProjectColumnEdgeTypeResolver;
  ProjectColumn?: GQLProjectColumnTypeResolver;
  ProjectCardConnection?: GQLProjectCardConnectionTypeResolver;
  ProjectCardEdge?: GQLProjectCardEdgeTypeResolver;
  ProjectCard?: GQLProjectCardTypeResolver;
  ProjectCardItem?: {
    __resolveType: GQLProjectCardItemTypeResolver
  };
  
  ProjectConnection?: GQLProjectConnectionTypeResolver;
  ProjectEdge?: GQLProjectEdgeTypeResolver;
  RepositoryInfo?: {
    __resolveType: GQLRepositoryInfoTypeResolver
  };
  
  License?: GQLLicenseTypeResolver;
  LicenseRule?: GQLLicenseRuleTypeResolver;
  RepositoryOwner?: {
    __resolveType: GQLRepositoryOwnerTypeResolver
  };
  
  RepositoryConnection?: GQLRepositoryConnectionTypeResolver;
  RepositoryEdge?: GQLRepositoryEdgeTypeResolver;
  Starrable?: {
    __resolveType: GQLStarrableTypeResolver
  };
  
  StargazerConnection?: GQLStargazerConnectionTypeResolver;
  StargazerEdge?: GQLStargazerEdgeTypeResolver;
  Subscribable?: {
    __resolveType: GQLSubscribableTypeResolver
  };
  
  BranchProtectionRuleConnection?: GQLBranchProtectionRuleConnectionTypeResolver;
  BranchProtectionRuleEdge?: GQLBranchProtectionRuleEdgeTypeResolver;
  BranchProtectionRule?: GQLBranchProtectionRuleTypeResolver;
  BranchProtectionRuleConflictConnection?: GQLBranchProtectionRuleConflictConnectionTypeResolver;
  BranchProtectionRuleConflictEdge?: GQLBranchProtectionRuleConflictEdgeTypeResolver;
  BranchProtectionRuleConflict?: GQLBranchProtectionRuleConflictTypeResolver;
  RefConnection?: GQLRefConnectionTypeResolver;
  RefEdge?: GQLRefEdgeTypeResolver;
  PushAllowanceConnection?: GQLPushAllowanceConnectionTypeResolver;
  PushAllowanceEdge?: GQLPushAllowanceEdgeTypeResolver;
  PushAllowance?: GQLPushAllowanceTypeResolver;
  PushAllowanceActor?: {
    __resolveType: GQLPushAllowanceActorTypeResolver
  };
  
  App?: GQLAppTypeResolver;
  Team?: GQLTeamTypeResolver;
  TeamConnection?: GQLTeamConnectionTypeResolver;
  TeamEdge?: GQLTeamEdgeTypeResolver;
  TeamDiscussion?: GQLTeamDiscussionTypeResolver;
  Deletable?: {
    __resolveType: GQLDeletableTypeResolver
  };
  
  UpdatableComment?: {
    __resolveType: GQLUpdatableCommentTypeResolver
  };
  
  TeamDiscussionCommentConnection?: GQLTeamDiscussionCommentConnectionTypeResolver;
  TeamDiscussionCommentEdge?: GQLTeamDiscussionCommentEdgeTypeResolver;
  TeamDiscussionComment?: GQLTeamDiscussionCommentTypeResolver;
  TeamDiscussionConnection?: GQLTeamDiscussionConnectionTypeResolver;
  TeamDiscussionEdge?: GQLTeamDiscussionEdgeTypeResolver;
  OrganizationInvitationConnection?: GQLOrganizationInvitationConnectionTypeResolver;
  OrganizationInvitationEdge?: GQLOrganizationInvitationEdgeTypeResolver;
  OrganizationInvitation?: GQLOrganizationInvitationTypeResolver;
  TeamMemberConnection?: GQLTeamMemberConnectionTypeResolver;
  TeamMemberEdge?: GQLTeamMemberEdgeTypeResolver;
  TeamRepositoryConnection?: GQLTeamRepositoryConnectionTypeResolver;
  TeamRepositoryEdge?: GQLTeamRepositoryEdgeTypeResolver;
  ReviewDismissalAllowanceConnection?: GQLReviewDismissalAllowanceConnectionTypeResolver;
  ReviewDismissalAllowanceEdge?: GQLReviewDismissalAllowanceEdgeTypeResolver;
  ReviewDismissalAllowance?: GQLReviewDismissalAllowanceTypeResolver;
  ReviewDismissalAllowanceActor?: {
    __resolveType: GQLReviewDismissalAllowanceActorTypeResolver
  };
  
  RepositoryCollaboratorConnection?: GQLRepositoryCollaboratorConnectionTypeResolver;
  RepositoryCollaboratorEdge?: GQLRepositoryCollaboratorEdgeTypeResolver;
  PermissionSource?: GQLPermissionSourceTypeResolver;
  PermissionGranter?: {
    __resolveType: GQLPermissionGranterTypeResolver
  };
  
  CommitCommentConnection?: GQLCommitCommentConnectionTypeResolver;
  CommitCommentEdge?: GQLCommitCommentEdgeTypeResolver;
  CommitComment?: GQLCommitCommentTypeResolver;
  Minimizable?: {
    __resolveType: GQLMinimizableTypeResolver
  };
  
  Commit?: GQLCommitTypeResolver;
  GitObject?: {
    __resolveType: GQLGitObjectTypeResolver
  };
  
  GitObjectID?: GraphQLScalarType;
  GitActor?: GQLGitActorTypeResolver;
  GitTimestamp?: GraphQLScalarType;
  Blame?: GQLBlameTypeResolver;
  BlameRange?: GQLBlameRangeTypeResolver;
  DeploymentConnection?: GQLDeploymentConnectionTypeResolver;
  DeploymentEdge?: GQLDeploymentEdgeTypeResolver;
  Deployment?: GQLDeploymentTypeResolver;
  DeploymentStatus?: GQLDeploymentStatusTypeResolver;
  DeploymentStatusConnection?: GQLDeploymentStatusConnectionTypeResolver;
  DeploymentStatusEdge?: GQLDeploymentStatusEdgeTypeResolver;
  CommitHistoryConnection?: GQLCommitHistoryConnectionTypeResolver;
  CommitEdge?: GQLCommitEdgeTypeResolver;
  CommitConnection?: GQLCommitConnectionTypeResolver;
  GitSignature?: {
    __resolveType: GQLGitSignatureTypeResolver
  };
  
  Status?: GQLStatusTypeResolver;
  StatusContext?: GQLStatusContextTypeResolver;
  StatusCheckRollup?: GQLStatusCheckRollupTypeResolver;
  StatusCheckRollupContextConnection?: GQLStatusCheckRollupContextConnectionTypeResolver;
  StatusCheckRollupContextEdge?: GQLStatusCheckRollupContextEdgeTypeResolver;
  StatusCheckRollupContext?: {
    __resolveType: GQLStatusCheckRollupContextTypeResolver
  };
  
  SubmoduleConnection?: GQLSubmoduleConnectionTypeResolver;
  SubmoduleEdge?: GQLSubmoduleEdgeTypeResolver;
  Submodule?: GQLSubmoduleTypeResolver;
  Tree?: GQLTreeTypeResolver;
  TreeEntry?: GQLTreeEntryTypeResolver;
  DeployKeyConnection?: GQLDeployKeyConnectionTypeResolver;
  DeployKeyEdge?: GQLDeployKeyEdgeTypeResolver;
  DeployKey?: GQLDeployKeyTypeResolver;
  FundingLink?: GQLFundingLinkTypeResolver;
  IssueOrPullRequest?: {
    __resolveType: GQLIssueOrPullRequestTypeResolver
  };
  
  LanguageConnection?: GQLLanguageConnectionTypeResolver;
  LanguageEdge?: GQLLanguageEdgeTypeResolver;
  Language?: GQLLanguageTypeResolver;
  Milestone?: GQLMilestoneTypeResolver;
  MilestoneConnection?: GQLMilestoneConnectionTypeResolver;
  MilestoneEdge?: GQLMilestoneEdgeTypeResolver;
  ReleaseConnection?: GQLReleaseConnectionTypeResolver;
  ReleaseEdge?: GQLReleaseEdgeTypeResolver;
  RepositoryTopicConnection?: GQLRepositoryTopicConnectionTypeResolver;
  RepositoryTopicEdge?: GQLRepositoryTopicEdgeTypeResolver;
  RepositoryTopic?: GQLRepositoryTopicTypeResolver;
  Topic?: GQLTopicTypeResolver;
  GitSSHRemote?: GraphQLScalarType;
  RepositoryVulnerabilityAlertConnection?: GQLRepositoryVulnerabilityAlertConnectionTypeResolver;
  RepositoryVulnerabilityAlertEdge?: GQLRepositoryVulnerabilityAlertEdgeTypeResolver;
  RepositoryVulnerabilityAlert?: GQLRepositoryVulnerabilityAlertTypeResolver;
  SecurityAdvisory?: GQLSecurityAdvisoryTypeResolver;
  SecurityAdvisoryIdentifier?: GQLSecurityAdvisoryIdentifierTypeResolver;
  SecurityAdvisoryReference?: GQLSecurityAdvisoryReferenceTypeResolver;
  SecurityVulnerabilityConnection?: GQLSecurityVulnerabilityConnectionTypeResolver;
  SecurityVulnerabilityEdge?: GQLSecurityVulnerabilityEdgeTypeResolver;
  SecurityVulnerability?: GQLSecurityVulnerabilityTypeResolver;
  SecurityAdvisoryPackageVersion?: GQLSecurityAdvisoryPackageVersionTypeResolver;
  SecurityAdvisoryPackage?: GQLSecurityAdvisoryPackageTypeResolver;
  IssueCommentConnection?: GQLIssueCommentConnectionTypeResolver;
  IssueCommentEdge?: GQLIssueCommentEdgeTypeResolver;
  IssueComment?: GQLIssueCommentTypeResolver;
  Hovercard?: GQLHovercardTypeResolver;
  HovercardContext?: {
    __resolveType: GQLHovercardContextTypeResolver
  };
  
  IssueTimelineConnection?: GQLIssueTimelineConnectionTypeResolver;
  IssueTimelineItemEdge?: GQLIssueTimelineItemEdgeTypeResolver;
  IssueTimelineItem?: {
    __resolveType: GQLIssueTimelineItemTypeResolver
  };
  
  AssignedEvent?: GQLAssignedEventTypeResolver;
  Assignee?: {
    __resolveType: GQLAssigneeTypeResolver
  };
  
  Bot?: GQLBotTypeResolver;
  Mannequin?: GQLMannequinTypeResolver;
  ClosedEvent?: GQLClosedEventTypeResolver;
  Closer?: {
    __resolveType: GQLCloserTypeResolver
  };
  
  CrossReferencedEvent?: GQLCrossReferencedEventTypeResolver;
  ReferencedSubject?: {
    __resolveType: GQLReferencedSubjectTypeResolver
  };
  
  DemilestonedEvent?: GQLDemilestonedEventTypeResolver;
  MilestoneItem?: {
    __resolveType: GQLMilestoneItemTypeResolver
  };
  
  LabeledEvent?: GQLLabeledEventTypeResolver;
  LockedEvent?: GQLLockedEventTypeResolver;
  MilestonedEvent?: GQLMilestonedEventTypeResolver;
  ReferencedEvent?: GQLReferencedEventTypeResolver;
  RenamedTitleEvent?: GQLRenamedTitleEventTypeResolver;
  RenamedTitleSubject?: {
    __resolveType: GQLRenamedTitleSubjectTypeResolver
  };
  
  ReopenedEvent?: GQLReopenedEventTypeResolver;
  SubscribedEvent?: GQLSubscribedEventTypeResolver;
  TransferredEvent?: GQLTransferredEventTypeResolver;
  UnassignedEvent?: GQLUnassignedEventTypeResolver;
  UnlabeledEvent?: GQLUnlabeledEventTypeResolver;
  UnlockedEvent?: GQLUnlockedEventTypeResolver;
  UnsubscribedEvent?: GQLUnsubscribedEventTypeResolver;
  UserBlockedEvent?: GQLUserBlockedEventTypeResolver;
  IssueTimelineItemsConnection?: GQLIssueTimelineItemsConnectionTypeResolver;
  IssueTimelineItemsEdge?: GQLIssueTimelineItemsEdgeTypeResolver;
  IssueTimelineItems?: {
    __resolveType: GQLIssueTimelineItemsTypeResolver
  };
  
  AddedToProjectEvent?: GQLAddedToProjectEventTypeResolver;
  CommentDeletedEvent?: GQLCommentDeletedEventTypeResolver;
  ConnectedEvent?: GQLConnectedEventTypeResolver;
  ConvertedNoteToIssueEvent?: GQLConvertedNoteToIssueEventTypeResolver;
  DisconnectedEvent?: GQLDisconnectedEventTypeResolver;
  MarkedAsDuplicateEvent?: GQLMarkedAsDuplicateEventTypeResolver;
  MentionedEvent?: GQLMentionedEventTypeResolver;
  MovedColumnsInProjectEvent?: GQLMovedColumnsInProjectEventTypeResolver;
  PinnedEvent?: GQLPinnedEventTypeResolver;
  RemovedFromProjectEvent?: GQLRemovedFromProjectEventTypeResolver;
  UnmarkedAsDuplicateEvent?: GQLUnmarkedAsDuplicateEventTypeResolver;
  UnpinnedEvent?: GQLUnpinnedEventTypeResolver;
  PullRequestCommitConnection?: GQLPullRequestCommitConnectionTypeResolver;
  PullRequestCommitEdge?: GQLPullRequestCommitEdgeTypeResolver;
  PullRequestCommit?: GQLPullRequestCommitTypeResolver;
  PullRequestChangedFileConnection?: GQLPullRequestChangedFileConnectionTypeResolver;
  PullRequestChangedFileEdge?: GQLPullRequestChangedFileEdgeTypeResolver;
  PullRequestChangedFile?: GQLPullRequestChangedFileTypeResolver;
  ReviewRequestConnection?: GQLReviewRequestConnectionTypeResolver;
  ReviewRequestEdge?: GQLReviewRequestEdgeTypeResolver;
  ReviewRequest?: GQLReviewRequestTypeResolver;
  RequestedReviewer?: {
    __resolveType: GQLRequestedReviewerTypeResolver
  };
  
  PullRequestReviewThreadConnection?: GQLPullRequestReviewThreadConnectionTypeResolver;
  PullRequestReviewThreadEdge?: GQLPullRequestReviewThreadEdgeTypeResolver;
  PullRequestReviewThread?: GQLPullRequestReviewThreadTypeResolver;
  PullRequestReviewCommentConnection?: GQLPullRequestReviewCommentConnectionTypeResolver;
  PullRequestReviewCommentEdge?: GQLPullRequestReviewCommentEdgeTypeResolver;
  PullRequestReviewComment?: GQLPullRequestReviewCommentTypeResolver;
  PullRequestReview?: GQLPullRequestReviewTypeResolver;
  PullRequestReviewConnection?: GQLPullRequestReviewConnectionTypeResolver;
  PullRequestReviewEdge?: GQLPullRequestReviewEdgeTypeResolver;
  SuggestedReviewer?: GQLSuggestedReviewerTypeResolver;
  PullRequestTimelineConnection?: GQLPullRequestTimelineConnectionTypeResolver;
  PullRequestTimelineItemEdge?: GQLPullRequestTimelineItemEdgeTypeResolver;
  PullRequestTimelineItem?: {
    __resolveType: GQLPullRequestTimelineItemTypeResolver
  };
  
  BaseRefForcePushedEvent?: GQLBaseRefForcePushedEventTypeResolver;
  CommitCommentThread?: GQLCommitCommentThreadTypeResolver;
  DeployedEvent?: GQLDeployedEventTypeResolver;
  DeploymentEnvironmentChangedEvent?: GQLDeploymentEnvironmentChangedEventTypeResolver;
  HeadRefDeletedEvent?: GQLHeadRefDeletedEventTypeResolver;
  HeadRefForcePushedEvent?: GQLHeadRefForcePushedEventTypeResolver;
  HeadRefRestoredEvent?: GQLHeadRefRestoredEventTypeResolver;
  MergedEvent?: GQLMergedEventTypeResolver;
  ReviewDismissedEvent?: GQLReviewDismissedEventTypeResolver;
  ReviewRequestRemovedEvent?: GQLReviewRequestRemovedEventTypeResolver;
  ReviewRequestedEvent?: GQLReviewRequestedEventTypeResolver;
  PullRequestTimelineItemsConnection?: GQLPullRequestTimelineItemsConnectionTypeResolver;
  PullRequestTimelineItemsEdge?: GQLPullRequestTimelineItemsEdgeTypeResolver;
  PullRequestTimelineItems?: {
    __resolveType: GQLPullRequestTimelineItemsTypeResolver
  };
  
  AutomaticBaseChangeFailedEvent?: GQLAutomaticBaseChangeFailedEventTypeResolver;
  AutomaticBaseChangeSucceededEvent?: GQLAutomaticBaseChangeSucceededEventTypeResolver;
  BaseRefChangedEvent?: GQLBaseRefChangedEventTypeResolver;
  ConvertToDraftEvent?: GQLConvertToDraftEventTypeResolver;
  PullRequestCommitCommentThread?: GQLPullRequestCommitCommentThreadTypeResolver;
  PullRequestRevisionMarker?: GQLPullRequestRevisionMarkerTypeResolver;
  ReadyForReviewEvent?: GQLReadyForReviewEventTypeResolver;
  PackageVersionStatistics?: GQLPackageVersionStatisticsTypeResolver;
  PackageStatistics?: GQLPackageStatisticsTypeResolver;
  PackageVersionConnection?: GQLPackageVersionConnectionTypeResolver;
  PackageVersionEdge?: GQLPackageVersionEdgeTypeResolver;
  ProfileOwner?: {
    __resolveType: GQLProfileOwnerTypeResolver
  };
  
  ProfileItemShowcase?: GQLProfileItemShowcaseTypeResolver;
  PinnableItemConnection?: GQLPinnableItemConnectionTypeResolver;
  PinnableItemEdge?: GQLPinnableItemEdgeTypeResolver;
  PinnableItem?: {
    __resolveType: GQLPinnableItemTypeResolver
  };
  
  Gist?: GQLGistTypeResolver;
  GistCommentConnection?: GQLGistCommentConnectionTypeResolver;
  GistCommentEdge?: GQLGistCommentEdgeTypeResolver;
  GistComment?: GQLGistCommentTypeResolver;
  GistFile?: GQLGistFileTypeResolver;
  GistConnection?: GQLGistConnectionTypeResolver;
  GistEdge?: GQLGistEdgeTypeResolver;
  Sponsorable?: {
    __resolveType: GQLSponsorableTypeResolver
  };
  
  SponsorsListing?: GQLSponsorsListingTypeResolver;
  SponsorsTierConnection?: GQLSponsorsTierConnectionTypeResolver;
  SponsorsTierEdge?: GQLSponsorsTierEdgeTypeResolver;
  SponsorsTier?: GQLSponsorsTierTypeResolver;
  SponsorsTierAdminInfo?: GQLSponsorsTierAdminInfoTypeResolver;
  SponsorshipConnection?: GQLSponsorshipConnectionTypeResolver;
  SponsorshipEdge?: GQLSponsorshipEdgeTypeResolver;
  Sponsorship?: GQLSponsorshipTypeResolver;
  Sponsor?: {
    __resolveType: GQLSponsorTypeResolver
  };
  
  ContributionsCollection?: GQLContributionsCollectionTypeResolver;
  CommitContributionsByRepository?: GQLCommitContributionsByRepositoryTypeResolver;
  CreatedCommitContributionConnection?: GQLCreatedCommitContributionConnectionTypeResolver;
  CreatedCommitContributionEdge?: GQLCreatedCommitContributionEdgeTypeResolver;
  CreatedCommitContribution?: GQLCreatedCommitContributionTypeResolver;
  Contribution?: {
    __resolveType: GQLContributionTypeResolver
  };
  
  ContributionCalendar?: GQLContributionCalendarTypeResolver;
  ContributionCalendarMonth?: GQLContributionCalendarMonthTypeResolver;
  Date?: GraphQLScalarType;
  ContributionCalendarWeek?: GQLContributionCalendarWeekTypeResolver;
  ContributionCalendarDay?: GQLContributionCalendarDayTypeResolver;
  CreatedIssueOrRestrictedContribution?: {
    __resolveType: GQLCreatedIssueOrRestrictedContributionTypeResolver
  };
  
  CreatedIssueContribution?: GQLCreatedIssueContributionTypeResolver;
  RestrictedContribution?: GQLRestrictedContributionTypeResolver;
  CreatedPullRequestOrRestrictedContribution?: {
    __resolveType: GQLCreatedPullRequestOrRestrictedContributionTypeResolver
  };
  
  CreatedPullRequestContribution?: GQLCreatedPullRequestContributionTypeResolver;
  CreatedRepositoryOrRestrictedContribution?: {
    __resolveType: GQLCreatedRepositoryOrRestrictedContributionTypeResolver
  };
  
  CreatedRepositoryContribution?: GQLCreatedRepositoryContributionTypeResolver;
  CreatedIssueContributionConnection?: GQLCreatedIssueContributionConnectionTypeResolver;
  CreatedIssueContributionEdge?: GQLCreatedIssueContributionEdgeTypeResolver;
  IssueContributionsByRepository?: GQLIssueContributionsByRepositoryTypeResolver;
  JoinedGitHubContribution?: GQLJoinedGitHubContributionTypeResolver;
  CreatedPullRequestContributionConnection?: GQLCreatedPullRequestContributionConnectionTypeResolver;
  CreatedPullRequestContributionEdge?: GQLCreatedPullRequestContributionEdgeTypeResolver;
  PullRequestContributionsByRepository?: GQLPullRequestContributionsByRepositoryTypeResolver;
  CreatedPullRequestReviewContributionConnection?: GQLCreatedPullRequestReviewContributionConnectionTypeResolver;
  CreatedPullRequestReviewContributionEdge?: GQLCreatedPullRequestReviewContributionEdgeTypeResolver;
  CreatedPullRequestReviewContribution?: GQLCreatedPullRequestReviewContributionTypeResolver;
  PullRequestReviewContributionsByRepository?: GQLPullRequestReviewContributionsByRepositoryTypeResolver;
  CreatedRepositoryContributionConnection?: GQLCreatedRepositoryContributionConnectionTypeResolver;
  CreatedRepositoryContributionEdge?: GQLCreatedRepositoryContributionEdgeTypeResolver;
  FollowerConnection?: GQLFollowerConnectionTypeResolver;
  FollowingConnection?: GQLFollowingConnectionTypeResolver;
  OrganizationConnection?: GQLOrganizationConnectionTypeResolver;
  OrganizationEdge?: GQLOrganizationEdgeTypeResolver;
  PublicKeyConnection?: GQLPublicKeyConnectionTypeResolver;
  PublicKeyEdge?: GQLPublicKeyEdgeTypeResolver;
  PublicKey?: GQLPublicKeyTypeResolver;
  SavedReplyConnection?: GQLSavedReplyConnectionTypeResolver;
  SavedReplyEdge?: GQLSavedReplyEdgeTypeResolver;
  SavedReply?: GQLSavedReplyTypeResolver;
  StarredRepositoryConnection?: GQLStarredRepositoryConnectionTypeResolver;
  StarredRepositoryEdge?: GQLStarredRepositoryEdgeTypeResolver;
  OrganizationAuditEntryConnection?: GQLOrganizationAuditEntryConnectionTypeResolver;
  OrganizationAuditEntryEdge?: GQLOrganizationAuditEntryEdgeTypeResolver;
  OrganizationAuditEntry?: {
    __resolveType: GQLOrganizationAuditEntryTypeResolver
  };
  
  MembersCanDeleteReposClearAuditEntry?: GQLMembersCanDeleteReposClearAuditEntryTypeResolver;
  AuditEntry?: {
    __resolveType: GQLAuditEntryTypeResolver
  };
  
  AuditEntryActor?: {
    __resolveType: GQLAuditEntryActorTypeResolver
  };
  
  ActorLocation?: GQLActorLocationTypeResolver;
  PreciseDateTime?: GraphQLScalarType;
  EnterpriseAuditEntryData?: {
    __resolveType: GQLEnterpriseAuditEntryDataTypeResolver
  };
  
  OrganizationAuditEntryData?: {
    __resolveType: GQLOrganizationAuditEntryDataTypeResolver
  };
  
  MembersCanDeleteReposDisableAuditEntry?: GQLMembersCanDeleteReposDisableAuditEntryTypeResolver;
  MembersCanDeleteReposEnableAuditEntry?: GQLMembersCanDeleteReposEnableAuditEntryTypeResolver;
  OauthApplicationCreateAuditEntry?: GQLOauthApplicationCreateAuditEntryTypeResolver;
  OauthApplicationAuditEntryData?: {
    __resolveType: GQLOauthApplicationAuditEntryDataTypeResolver
  };
  
  OrgAddBillingManagerAuditEntry?: GQLOrgAddBillingManagerAuditEntryTypeResolver;
  OrgAddMemberAuditEntry?: GQLOrgAddMemberAuditEntryTypeResolver;
  OrgBlockUserAuditEntry?: GQLOrgBlockUserAuditEntryTypeResolver;
  OrgConfigDisableCollaboratorsOnlyAuditEntry?: GQLOrgConfigDisableCollaboratorsOnlyAuditEntryTypeResolver;
  OrgConfigEnableCollaboratorsOnlyAuditEntry?: GQLOrgConfigEnableCollaboratorsOnlyAuditEntryTypeResolver;
  OrgCreateAuditEntry?: GQLOrgCreateAuditEntryTypeResolver;
  OrgDisableOauthAppRestrictionsAuditEntry?: GQLOrgDisableOauthAppRestrictionsAuditEntryTypeResolver;
  OrgDisableSamlAuditEntry?: GQLOrgDisableSamlAuditEntryTypeResolver;
  OrgDisableTwoFactorRequirementAuditEntry?: GQLOrgDisableTwoFactorRequirementAuditEntryTypeResolver;
  OrgEnableOauthAppRestrictionsAuditEntry?: GQLOrgEnableOauthAppRestrictionsAuditEntryTypeResolver;
  OrgEnableSamlAuditEntry?: GQLOrgEnableSamlAuditEntryTypeResolver;
  OrgEnableTwoFactorRequirementAuditEntry?: GQLOrgEnableTwoFactorRequirementAuditEntryTypeResolver;
  OrgInviteMemberAuditEntry?: GQLOrgInviteMemberAuditEntryTypeResolver;
  OrgInviteToBusinessAuditEntry?: GQLOrgInviteToBusinessAuditEntryTypeResolver;
  OrgOauthAppAccessApprovedAuditEntry?: GQLOrgOauthAppAccessApprovedAuditEntryTypeResolver;
  OrgOauthAppAccessDeniedAuditEntry?: GQLOrgOauthAppAccessDeniedAuditEntryTypeResolver;
  OrgOauthAppAccessRequestedAuditEntry?: GQLOrgOauthAppAccessRequestedAuditEntryTypeResolver;
  OrgRemoveBillingManagerAuditEntry?: GQLOrgRemoveBillingManagerAuditEntryTypeResolver;
  OrgRemoveMemberAuditEntry?: GQLOrgRemoveMemberAuditEntryTypeResolver;
  OrgRemoveOutsideCollaboratorAuditEntry?: GQLOrgRemoveOutsideCollaboratorAuditEntryTypeResolver;
  OrgRestoreMemberAuditEntry?: GQLOrgRestoreMemberAuditEntryTypeResolver;
  OrgRestoreMemberAuditEntryMembership?: {
    __resolveType: GQLOrgRestoreMemberAuditEntryMembershipTypeResolver
  };
  
  OrgRestoreMemberMembershipOrganizationAuditEntryData?: GQLOrgRestoreMemberMembershipOrganizationAuditEntryDataTypeResolver;
  OrgRestoreMemberMembershipRepositoryAuditEntryData?: GQLOrgRestoreMemberMembershipRepositoryAuditEntryDataTypeResolver;
  RepositoryAuditEntryData?: {
    __resolveType: GQLRepositoryAuditEntryDataTypeResolver
  };
  
  OrgRestoreMemberMembershipTeamAuditEntryData?: GQLOrgRestoreMemberMembershipTeamAuditEntryDataTypeResolver;
  TeamAuditEntryData?: {
    __resolveType: GQLTeamAuditEntryDataTypeResolver
  };
  
  OrgUnblockUserAuditEntry?: GQLOrgUnblockUserAuditEntryTypeResolver;
  OrgUpdateDefaultRepositoryPermissionAuditEntry?: GQLOrgUpdateDefaultRepositoryPermissionAuditEntryTypeResolver;
  OrgUpdateMemberAuditEntry?: GQLOrgUpdateMemberAuditEntryTypeResolver;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntryTypeResolver;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntryTypeResolver;
  PrivateRepositoryForkingDisableAuditEntry?: GQLPrivateRepositoryForkingDisableAuditEntryTypeResolver;
  PrivateRepositoryForkingEnableAuditEntry?: GQLPrivateRepositoryForkingEnableAuditEntryTypeResolver;
  RepoAccessAuditEntry?: GQLRepoAccessAuditEntryTypeResolver;
  RepoAddMemberAuditEntry?: GQLRepoAddMemberAuditEntryTypeResolver;
  RepoAddTopicAuditEntry?: GQLRepoAddTopicAuditEntryTypeResolver;
  TopicAuditEntryData?: {
    __resolveType: GQLTopicAuditEntryDataTypeResolver
  };
  
  RepoArchivedAuditEntry?: GQLRepoArchivedAuditEntryTypeResolver;
  RepoChangeMergeSettingAuditEntry?: GQLRepoChangeMergeSettingAuditEntryTypeResolver;
  RepoConfigDisableAnonymousGitAccessAuditEntry?: GQLRepoConfigDisableAnonymousGitAccessAuditEntryTypeResolver;
  RepoConfigDisableCollaboratorsOnlyAuditEntry?: GQLRepoConfigDisableCollaboratorsOnlyAuditEntryTypeResolver;
  RepoConfigDisableContributorsOnlyAuditEntry?: GQLRepoConfigDisableContributorsOnlyAuditEntryTypeResolver;
  RepoConfigDisableSockpuppetDisallowedAuditEntry?: GQLRepoConfigDisableSockpuppetDisallowedAuditEntryTypeResolver;
  RepoConfigEnableAnonymousGitAccessAuditEntry?: GQLRepoConfigEnableAnonymousGitAccessAuditEntryTypeResolver;
  RepoConfigEnableCollaboratorsOnlyAuditEntry?: GQLRepoConfigEnableCollaboratorsOnlyAuditEntryTypeResolver;
  RepoConfigEnableContributorsOnlyAuditEntry?: GQLRepoConfigEnableContributorsOnlyAuditEntryTypeResolver;
  RepoConfigEnableSockpuppetDisallowedAuditEntry?: GQLRepoConfigEnableSockpuppetDisallowedAuditEntryTypeResolver;
  RepoConfigLockAnonymousGitAccessAuditEntry?: GQLRepoConfigLockAnonymousGitAccessAuditEntryTypeResolver;
  RepoConfigUnlockAnonymousGitAccessAuditEntry?: GQLRepoConfigUnlockAnonymousGitAccessAuditEntryTypeResolver;
  RepoCreateAuditEntry?: GQLRepoCreateAuditEntryTypeResolver;
  RepoDestroyAuditEntry?: GQLRepoDestroyAuditEntryTypeResolver;
  RepoRemoveMemberAuditEntry?: GQLRepoRemoveMemberAuditEntryTypeResolver;
  RepoRemoveTopicAuditEntry?: GQLRepoRemoveTopicAuditEntryTypeResolver;
  RepositoryVisibilityChangeDisableAuditEntry?: GQLRepositoryVisibilityChangeDisableAuditEntryTypeResolver;
  RepositoryVisibilityChangeEnableAuditEntry?: GQLRepositoryVisibilityChangeEnableAuditEntryTypeResolver;
  TeamAddMemberAuditEntry?: GQLTeamAddMemberAuditEntryTypeResolver;
  TeamAddRepositoryAuditEntry?: GQLTeamAddRepositoryAuditEntryTypeResolver;
  TeamChangeParentTeamAuditEntry?: GQLTeamChangeParentTeamAuditEntryTypeResolver;
  TeamRemoveMemberAuditEntry?: GQLTeamRemoveMemberAuditEntryTypeResolver;
  TeamRemoveRepositoryAuditEntry?: GQLTeamRemoveRepositoryAuditEntryTypeResolver;
  IpAllowListEntryConnection?: GQLIpAllowListEntryConnectionTypeResolver;
  IpAllowListEntryEdge?: GQLIpAllowListEntryEdgeTypeResolver;
  IpAllowListEntry?: GQLIpAllowListEntryTypeResolver;
  IpAllowListOwner?: {
    __resolveType: GQLIpAllowListOwnerTypeResolver
  };
  
  OrganizationMemberConnection?: GQLOrganizationMemberConnectionTypeResolver;
  OrganizationMemberEdge?: GQLOrganizationMemberEdgeTypeResolver;
  OrganizationIdentityProvider?: GQLOrganizationIdentityProviderTypeResolver;
  ExternalIdentityConnection?: GQLExternalIdentityConnectionTypeResolver;
  ExternalIdentityEdge?: GQLExternalIdentityEdgeTypeResolver;
  ExternalIdentity?: GQLExternalIdentityTypeResolver;
  ExternalIdentitySamlAttributes?: GQLExternalIdentitySamlAttributesTypeResolver;
  ExternalIdentityScimAttributes?: GQLExternalIdentityScimAttributesTypeResolver;
  X509Certificate?: GraphQLScalarType;
  EnterpriseOwnerInfo?: GQLEnterpriseOwnerInfoTypeResolver;
  EnterpriseAdministratorConnection?: GQLEnterpriseAdministratorConnectionTypeResolver;
  EnterpriseAdministratorEdge?: GQLEnterpriseAdministratorEdgeTypeResolver;
  EnterpriseServerInstallationConnection?: GQLEnterpriseServerInstallationConnectionTypeResolver;
  EnterpriseServerInstallationEdge?: GQLEnterpriseServerInstallationEdgeTypeResolver;
  EnterpriseServerInstallation?: GQLEnterpriseServerInstallationTypeResolver;
  EnterpriseServerUserAccountConnection?: GQLEnterpriseServerUserAccountConnectionTypeResolver;
  EnterpriseServerUserAccountEdge?: GQLEnterpriseServerUserAccountEdgeTypeResolver;
  EnterpriseServerUserAccount?: GQLEnterpriseServerUserAccountTypeResolver;
  EnterpriseServerUserAccountEmailConnection?: GQLEnterpriseServerUserAccountEmailConnectionTypeResolver;
  EnterpriseServerUserAccountEmailEdge?: GQLEnterpriseServerUserAccountEmailEdgeTypeResolver;
  EnterpriseServerUserAccountEmail?: GQLEnterpriseServerUserAccountEmailTypeResolver;
  EnterpriseServerUserAccountsUploadConnection?: GQLEnterpriseServerUserAccountsUploadConnectionTypeResolver;
  EnterpriseServerUserAccountsUploadEdge?: GQLEnterpriseServerUserAccountsUploadEdgeTypeResolver;
  EnterpriseServerUserAccountsUpload?: GQLEnterpriseServerUserAccountsUploadTypeResolver;
  EnterpriseOutsideCollaboratorConnection?: GQLEnterpriseOutsideCollaboratorConnectionTypeResolver;
  EnterpriseOutsideCollaboratorEdge?: GQLEnterpriseOutsideCollaboratorEdgeTypeResolver;
  EnterpriseRepositoryInfoConnection?: GQLEnterpriseRepositoryInfoConnectionTypeResolver;
  EnterpriseRepositoryInfoEdge?: GQLEnterpriseRepositoryInfoEdgeTypeResolver;
  EnterpriseRepositoryInfo?: GQLEnterpriseRepositoryInfoTypeResolver;
  EnterpriseAdministratorInvitationConnection?: GQLEnterpriseAdministratorInvitationConnectionTypeResolver;
  EnterpriseAdministratorInvitationEdge?: GQLEnterpriseAdministratorInvitationEdgeTypeResolver;
  EnterpriseAdministratorInvitation?: GQLEnterpriseAdministratorInvitationTypeResolver;
  RepositoryInvitationConnection?: GQLRepositoryInvitationConnectionTypeResolver;
  RepositoryInvitationEdge?: GQLRepositoryInvitationEdgeTypeResolver;
  RepositoryInvitation?: GQLRepositoryInvitationTypeResolver;
  EnterprisePendingCollaboratorConnection?: GQLEnterprisePendingCollaboratorConnectionTypeResolver;
  EnterprisePendingCollaboratorEdge?: GQLEnterprisePendingCollaboratorEdgeTypeResolver;
  EnterprisePendingMemberInvitationConnection?: GQLEnterprisePendingMemberInvitationConnectionTypeResolver;
  EnterprisePendingMemberInvitationEdge?: GQLEnterprisePendingMemberInvitationEdgeTypeResolver;
  EnterpriseIdentityProvider?: GQLEnterpriseIdentityProviderTypeResolver;
  EnterpriseUserAccountConnection?: GQLEnterpriseUserAccountConnectionTypeResolver;
  EnterpriseUserAccountEdge?: GQLEnterpriseUserAccountEdgeTypeResolver;
  MarketplaceCategory?: GQLMarketplaceCategoryTypeResolver;
  MarketplaceListing?: GQLMarketplaceListingTypeResolver;
  MarketplaceListingConnection?: GQLMarketplaceListingConnectionTypeResolver;
  MarketplaceListingEdge?: GQLMarketplaceListingEdgeTypeResolver;
  GitHubMetadata?: GQLGitHubMetadataTypeResolver;
  RateLimit?: GQLRateLimitTypeResolver;
  SearchResultItemConnection?: GQLSearchResultItemConnectionTypeResolver;
  SearchResultItemEdge?: GQLSearchResultItemEdgeTypeResolver;
  SearchResultItem?: {
    __resolveType: GQLSearchResultItemTypeResolver
  };
  
  TextMatch?: GQLTextMatchTypeResolver;
  TextMatchHighlight?: GQLTextMatchHighlightTypeResolver;
  SecurityAdvisoryConnection?: GQLSecurityAdvisoryConnectionTypeResolver;
  SecurityAdvisoryEdge?: GQLSecurityAdvisoryEdgeTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AcceptEnterpriseAdministratorInvitationPayload?: GQLAcceptEnterpriseAdministratorInvitationPayloadTypeResolver;
  AcceptTopicSuggestionPayload?: GQLAcceptTopicSuggestionPayloadTypeResolver;
  AddAssigneesToAssignablePayload?: GQLAddAssigneesToAssignablePayloadTypeResolver;
  AddCommentPayload?: GQLAddCommentPayloadTypeResolver;
  AddLabelsToLabelablePayload?: GQLAddLabelsToLabelablePayloadTypeResolver;
  AddProjectCardPayload?: GQLAddProjectCardPayloadTypeResolver;
  AddProjectColumnPayload?: GQLAddProjectColumnPayloadTypeResolver;
  AddPullRequestReviewPayload?: GQLAddPullRequestReviewPayloadTypeResolver;
  AddPullRequestReviewCommentPayload?: GQLAddPullRequestReviewCommentPayloadTypeResolver;
  AddPullRequestReviewThreadPayload?: GQLAddPullRequestReviewThreadPayloadTypeResolver;
  AddReactionPayload?: GQLAddReactionPayloadTypeResolver;
  AddStarPayload?: GQLAddStarPayloadTypeResolver;
  ArchiveRepositoryPayload?: GQLArchiveRepositoryPayloadTypeResolver;
  CancelEnterpriseAdminInvitationPayload?: GQLCancelEnterpriseAdminInvitationPayloadTypeResolver;
  ChangeUserStatusPayload?: GQLChangeUserStatusPayloadTypeResolver;
  ClearLabelsFromLabelablePayload?: GQLClearLabelsFromLabelablePayloadTypeResolver;
  CloneProjectPayload?: GQLCloneProjectPayloadTypeResolver;
  CloneTemplateRepositoryPayload?: GQLCloneTemplateRepositoryPayloadTypeResolver;
  CloseIssuePayload?: GQLCloseIssuePayloadTypeResolver;
  ClosePullRequestPayload?: GQLClosePullRequestPayloadTypeResolver;
  ConvertProjectCardNoteToIssuePayload?: GQLConvertProjectCardNoteToIssuePayloadTypeResolver;
  CreateBranchProtectionRulePayload?: GQLCreateBranchProtectionRulePayloadTypeResolver;
  CreateEnterpriseOrganizationPayload?: GQLCreateEnterpriseOrganizationPayloadTypeResolver;
  CreateIpAllowListEntryPayload?: GQLCreateIpAllowListEntryPayloadTypeResolver;
  CreateIssuePayload?: GQLCreateIssuePayloadTypeResolver;
  CreateProjectPayload?: GQLCreateProjectPayloadTypeResolver;
  CreatePullRequestPayload?: GQLCreatePullRequestPayloadTypeResolver;
  CreateRefPayload?: GQLCreateRefPayloadTypeResolver;
  CreateRepositoryPayload?: GQLCreateRepositoryPayloadTypeResolver;
  CreateTeamDiscussionPayload?: GQLCreateTeamDiscussionPayloadTypeResolver;
  CreateTeamDiscussionCommentPayload?: GQLCreateTeamDiscussionCommentPayloadTypeResolver;
  DeclineTopicSuggestionPayload?: GQLDeclineTopicSuggestionPayloadTypeResolver;
  DeleteBranchProtectionRulePayload?: GQLDeleteBranchProtectionRulePayloadTypeResolver;
  DeleteDeploymentPayload?: GQLDeleteDeploymentPayloadTypeResolver;
  DeleteIpAllowListEntryPayload?: GQLDeleteIpAllowListEntryPayloadTypeResolver;
  DeleteIssuePayload?: GQLDeleteIssuePayloadTypeResolver;
  DeleteIssueCommentPayload?: GQLDeleteIssueCommentPayloadTypeResolver;
  DeleteProjectPayload?: GQLDeleteProjectPayloadTypeResolver;
  DeleteProjectCardPayload?: GQLDeleteProjectCardPayloadTypeResolver;
  DeleteProjectColumnPayload?: GQLDeleteProjectColumnPayloadTypeResolver;
  DeletePullRequestReviewPayload?: GQLDeletePullRequestReviewPayloadTypeResolver;
  DeletePullRequestReviewCommentPayload?: GQLDeletePullRequestReviewCommentPayloadTypeResolver;
  DeleteRefPayload?: GQLDeleteRefPayloadTypeResolver;
  DeleteTeamDiscussionPayload?: GQLDeleteTeamDiscussionPayloadTypeResolver;
  DeleteTeamDiscussionCommentPayload?: GQLDeleteTeamDiscussionCommentPayloadTypeResolver;
  DismissPullRequestReviewPayload?: GQLDismissPullRequestReviewPayloadTypeResolver;
  FollowUserPayload?: GQLFollowUserPayloadTypeResolver;
  InviteEnterpriseAdminPayload?: GQLInviteEnterpriseAdminPayloadTypeResolver;
  LinkRepositoryToProjectPayload?: GQLLinkRepositoryToProjectPayloadTypeResolver;
  LockLockablePayload?: GQLLockLockablePayloadTypeResolver;
  MarkPullRequestReadyForReviewPayload?: GQLMarkPullRequestReadyForReviewPayloadTypeResolver;
  MergeBranchPayload?: GQLMergeBranchPayloadTypeResolver;
  MergePullRequestPayload?: GQLMergePullRequestPayloadTypeResolver;
  MinimizeCommentPayload?: GQLMinimizeCommentPayloadTypeResolver;
  MoveProjectCardPayload?: GQLMoveProjectCardPayloadTypeResolver;
  MoveProjectColumnPayload?: GQLMoveProjectColumnPayloadTypeResolver;
  RegenerateEnterpriseIdentityProviderRecoveryCodesPayload?: GQLRegenerateEnterpriseIdentityProviderRecoveryCodesPayloadTypeResolver;
  RemoveAssigneesFromAssignablePayload?: GQLRemoveAssigneesFromAssignablePayloadTypeResolver;
  RemoveEnterpriseAdminPayload?: GQLRemoveEnterpriseAdminPayloadTypeResolver;
  RemoveEnterpriseIdentityProviderPayload?: GQLRemoveEnterpriseIdentityProviderPayloadTypeResolver;
  RemoveEnterpriseOrganizationPayload?: GQLRemoveEnterpriseOrganizationPayloadTypeResolver;
  RemoveLabelsFromLabelablePayload?: GQLRemoveLabelsFromLabelablePayloadTypeResolver;
  RemoveOutsideCollaboratorPayload?: GQLRemoveOutsideCollaboratorPayloadTypeResolver;
  RemoveReactionPayload?: GQLRemoveReactionPayloadTypeResolver;
  RemoveStarPayload?: GQLRemoveStarPayloadTypeResolver;
  ReopenIssuePayload?: GQLReopenIssuePayloadTypeResolver;
  ReopenPullRequestPayload?: GQLReopenPullRequestPayloadTypeResolver;
  RequestReviewsPayload?: GQLRequestReviewsPayloadTypeResolver;
  ResolveReviewThreadPayload?: GQLResolveReviewThreadPayloadTypeResolver;
  SetEnterpriseIdentityProviderPayload?: GQLSetEnterpriseIdentityProviderPayloadTypeResolver;
  SubmitPullRequestReviewPayload?: GQLSubmitPullRequestReviewPayloadTypeResolver;
  TransferIssuePayload?: GQLTransferIssuePayloadTypeResolver;
  UnarchiveRepositoryPayload?: GQLUnarchiveRepositoryPayloadTypeResolver;
  UnfollowUserPayload?: GQLUnfollowUserPayloadTypeResolver;
  UnlinkRepositoryFromProjectPayload?: GQLUnlinkRepositoryFromProjectPayloadTypeResolver;
  UnlockLockablePayload?: GQLUnlockLockablePayloadTypeResolver;
  UnmarkIssueAsDuplicatePayload?: GQLUnmarkIssueAsDuplicatePayloadTypeResolver;
  UnminimizeCommentPayload?: GQLUnminimizeCommentPayloadTypeResolver;
  UnresolveReviewThreadPayload?: GQLUnresolveReviewThreadPayloadTypeResolver;
  UpdateBranchProtectionRulePayload?: GQLUpdateBranchProtectionRulePayloadTypeResolver;
  UpdateEnterpriseActionExecutionCapabilitySettingPayload?: GQLUpdateEnterpriseActionExecutionCapabilitySettingPayloadTypeResolver;
  UpdateEnterpriseAdministratorRolePayload?: GQLUpdateEnterpriseAdministratorRolePayloadTypeResolver;
  UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload?: GQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadTypeResolver;
  UpdateEnterpriseDefaultRepositoryPermissionSettingPayload?: GQLUpdateEnterpriseDefaultRepositoryPermissionSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload?: GQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload?: GQLUpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanDeleteIssuesSettingPayload?: GQLUpdateEnterpriseMembersCanDeleteIssuesSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload?: GQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload?: GQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanMakePurchasesSettingPayload?: GQLUpdateEnterpriseMembersCanMakePurchasesSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload?: GQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadTypeResolver;
  UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload?: GQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadTypeResolver;
  UpdateEnterpriseOrganizationProjectsSettingPayload?: GQLUpdateEnterpriseOrganizationProjectsSettingPayloadTypeResolver;
  UpdateEnterpriseProfilePayload?: GQLUpdateEnterpriseProfilePayloadTypeResolver;
  UpdateEnterpriseRepositoryProjectsSettingPayload?: GQLUpdateEnterpriseRepositoryProjectsSettingPayloadTypeResolver;
  UpdateEnterpriseTeamDiscussionsSettingPayload?: GQLUpdateEnterpriseTeamDiscussionsSettingPayloadTypeResolver;
  UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload?: GQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadTypeResolver;
  UpdateIpAllowListEnabledSettingPayload?: GQLUpdateIpAllowListEnabledSettingPayloadTypeResolver;
  UpdateIpAllowListEntryPayload?: GQLUpdateIpAllowListEntryPayloadTypeResolver;
  UpdateIssuePayload?: GQLUpdateIssuePayloadTypeResolver;
  UpdateIssueCommentPayload?: GQLUpdateIssueCommentPayloadTypeResolver;
  UpdateProjectPayload?: GQLUpdateProjectPayloadTypeResolver;
  UpdateProjectCardPayload?: GQLUpdateProjectCardPayloadTypeResolver;
  UpdateProjectColumnPayload?: GQLUpdateProjectColumnPayloadTypeResolver;
  UpdatePullRequestPayload?: GQLUpdatePullRequestPayloadTypeResolver;
  UpdatePullRequestReviewPayload?: GQLUpdatePullRequestReviewPayloadTypeResolver;
  UpdatePullRequestReviewCommentPayload?: GQLUpdatePullRequestReviewCommentPayloadTypeResolver;
  UpdateRefPayload?: GQLUpdateRefPayloadTypeResolver;
  UpdateRepositoryPayload?: GQLUpdateRepositoryPayloadTypeResolver;
  UpdateSubscriptionPayload?: GQLUpdateSubscriptionPayloadTypeResolver;
  UpdateTeamDiscussionPayload?: GQLUpdateTeamDiscussionPayloadTypeResolver;
  UpdateTeamDiscussionCommentPayload?: GQLUpdateTeamDiscussionCommentPayloadTypeResolver;
  UpdateTopicsPayload?: GQLUpdateTopicsPayloadTypeResolver;
  Blob?: GQLBlobTypeResolver;
  GenericHovercardContext?: GQLGenericHovercardContextTypeResolver;
  GpgSignature?: GQLGpgSignatureTypeResolver;
  OrganizationTeamsHovercardContext?: GQLOrganizationTeamsHovercardContextTypeResolver;
  OrganizationsHovercardContext?: GQLOrganizationsHovercardContextTypeResolver;
  PackageTag?: GQLPackageTagTypeResolver;
  ReviewStatusHovercardContext?: GQLReviewStatusHovercardContextTypeResolver;
  SmimeSignature?: GQLSmimeSignatureTypeResolver;
  Tag?: GQLTagTypeResolver;
  UnknownSignature?: GQLUnknownSignatureTypeResolver;
  ViewerHovercardContext?: GQLViewerHovercardContextTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  codeOfConduct?: QueryToCodeOfConductResolver<TParent>;
  codesOfConduct?: QueryToCodesOfConductResolver<TParent>;
  enterprise?: QueryToEnterpriseResolver<TParent>;
  enterpriseAdministratorInvitation?: QueryToEnterpriseAdministratorInvitationResolver<TParent>;
  enterpriseAdministratorInvitationByToken?: QueryToEnterpriseAdministratorInvitationByTokenResolver<TParent>;
  license?: QueryToLicenseResolver<TParent>;
  licenses?: QueryToLicensesResolver<TParent>;
  marketplaceCategories?: QueryToMarketplaceCategoriesResolver<TParent>;
  marketplaceCategory?: QueryToMarketplaceCategoryResolver<TParent>;
  marketplaceListing?: QueryToMarketplaceListingResolver<TParent>;
  marketplaceListings?: QueryToMarketplaceListingsResolver<TParent>;
  meta?: QueryToMetaResolver<TParent>;
  node?: QueryToNodeResolver<TParent>;
  nodes?: QueryToNodesResolver<TParent>;
  organization?: QueryToOrganizationResolver<TParent>;
  rateLimit?: QueryToRateLimitResolver<TParent>;
  relay?: QueryToRelayResolver<TParent>;
  repository?: QueryToRepositoryResolver<TParent>;
  repositoryOwner?: QueryToRepositoryOwnerResolver<TParent>;
  resource?: QueryToResourceResolver<TParent>;
  search?: QueryToSearchResolver<TParent>;
  securityAdvisories?: QueryToSecurityAdvisoriesResolver<TParent>;
  securityAdvisory?: QueryToSecurityAdvisoryResolver<TParent>;
  securityVulnerabilities?: QueryToSecurityVulnerabilitiesResolver<TParent>;
  sponsorsListing?: QueryToSponsorsListingResolver<TParent>;
  topic?: QueryToTopicResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  viewer?: QueryToViewerResolver<TParent>;
}

export interface QueryToCodeOfConductArgs {
  key: string;
}
export interface QueryToCodeOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCodeOfConductArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCodesOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEnterpriseArgs {
  invitationToken?: string;
  slug: string;
}
export interface QueryToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEnterpriseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEnterpriseAdministratorInvitationArgs {
  enterpriseSlug: string;
  role: GQLEnterpriseAdministratorRole;
  userLogin: string;
}
export interface QueryToEnterpriseAdministratorInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEnterpriseAdministratorInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEnterpriseAdministratorInvitationByTokenArgs {
  invitationToken: string;
}
export interface QueryToEnterpriseAdministratorInvitationByTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEnterpriseAdministratorInvitationByTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLicenseArgs {
  key: string;
}
export interface QueryToLicenseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLicenseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLicensesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceCategoriesArgs {
  excludeEmpty?: boolean;
  excludeSubcategories?: boolean;
  includeCategories?: Array<string>;
}
export interface QueryToMarketplaceCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceCategoryArgs {
  slug: string;
  useTopicAliases?: boolean;
}
export interface QueryToMarketplaceCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceListingArgs {
  slug: string;
}
export interface QueryToMarketplaceListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceListingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceListingsArgs {
  adminId?: string;
  after?: string;
  allStates?: boolean;
  before?: string;
  categorySlug?: string;
  first?: number;
  last?: number;
  organizationId?: string;
  primaryCategoryOnly?: boolean;
  slugs?: Array<string | null>;
  useTopicAliases?: boolean;
  viewerCanAdmin?: boolean;
  withFreeTrialsOnly?: boolean;
}
export interface QueryToMarketplaceListingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceListingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodeArgs {
  id: string;
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodesArgs {
  ids: Array<string>;
}
export interface QueryToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrganizationArgs {
  login: string;
}
export interface QueryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRateLimitArgs {
  dryRun?: boolean;
}
export interface QueryToRateLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRateLimitArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRelayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRepositoryArgs {
  name: string;
  owner: string;
}
export interface QueryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRepositoryOwnerArgs {
  login: string;
}
export interface QueryToRepositoryOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRepositoryOwnerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToResourceArgs {
  url: GQLURI;
}
export interface QueryToResourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToResourceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSearchArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query: string;
  type: GQLSearchType;
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSecurityAdvisoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  identifier?: GQLSecurityAdvisoryIdentifierFilter;
  last?: number;
  orderBy?: GQLSecurityAdvisoryOrder;
  publishedSince?: GQLDateTime;
  updatedSince?: GQLDateTime;
}
export interface QueryToSecurityAdvisoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSecurityAdvisoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSecurityAdvisoryArgs {
  ghsaId: string;
}
export interface QueryToSecurityAdvisoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSecurityAdvisoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSecurityVulnerabilitiesArgs {
  after?: string;
  before?: string;
  ecosystem?: GQLSecurityAdvisoryEcosystem;
  first?: number;
  last?: number;
  orderBy?: GQLSecurityVulnerabilityOrder;
  package?: string;
  severities?: Array<GQLSecurityAdvisorySeverity>;
}
export interface QueryToSecurityVulnerabilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSecurityVulnerabilitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSponsorsListingArgs {
  slug: string;
}
export interface QueryToSponsorsListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSponsorsListingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTopicArgs {
  name: string;
}
export interface QueryToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTopicArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  login: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCodeOfConductTypeResolver<TParent = any> {
  body?: CodeOfConductToBodyResolver<TParent>;
  id?: CodeOfConductToIdResolver<TParent>;
  key?: CodeOfConductToKeyResolver<TParent>;
  name?: CodeOfConductToNameResolver<TParent>;
  resourcePath?: CodeOfConductToResourcePathResolver<TParent>;
  url?: CodeOfConductToUrlResolver<TParent>;
}

export interface CodeOfConductToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CodeOfConduct' | 'Enterprise' | 'EnterpriseUserAccount' | 'Organization' | 'UserStatus' | 'User' | 'Package' | 'PackageVersion' | 'PackageFile' | 'Release' | 'ReleaseAsset' | 'Ref' | 'PullRequest' | 'UserContentEdit' | 'Label' | 'Issue' | 'Reaction' | 'Repository' | 'Project' | 'ProjectColumn' | 'ProjectCard' | 'License' | 'BranchProtectionRule' | 'PushAllowance' | 'App' | 'Team' | 'TeamDiscussion' | 'TeamDiscussionComment' | 'OrganizationInvitation' | 'ReviewDismissalAllowance' | 'CommitComment' | 'Commit' | 'Deployment' | 'DeploymentStatus' | 'Status' | 'StatusContext' | 'StatusCheckRollup' | 'Tree' | 'DeployKey' | 'Language' | 'Milestone' | 'RepositoryTopic' | 'Topic' | 'RepositoryVulnerabilityAlert' | 'SecurityAdvisory' | 'IssueComment' | 'AssignedEvent' | 'Bot' | 'Mannequin' | 'ClosedEvent' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'LabeledEvent' | 'LockedEvent' | 'MilestonedEvent' | 'ReferencedEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent' | 'UserBlockedEvent' | 'AddedToProjectEvent' | 'CommentDeletedEvent' | 'ConnectedEvent' | 'ConvertedNoteToIssueEvent' | 'DisconnectedEvent' | 'MarkedAsDuplicateEvent' | 'MentionedEvent' | 'MovedColumnsInProjectEvent' | 'PinnedEvent' | 'RemovedFromProjectEvent' | 'UnmarkedAsDuplicateEvent' | 'UnpinnedEvent' | 'PullRequestCommit' | 'ReviewRequest' | 'PullRequestReviewThread' | 'PullRequestReviewComment' | 'PullRequestReview' | 'BaseRefForcePushedEvent' | 'CommitCommentThread' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'MergedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewRequestedEvent' | 'AutomaticBaseChangeFailedEvent' | 'AutomaticBaseChangeSucceededEvent' | 'BaseRefChangedEvent' | 'ConvertToDraftEvent' | 'PullRequestCommitCommentThread' | 'ReadyForReviewEvent' | 'Gist' | 'GistComment' | 'SponsorsListing' | 'SponsorsTier' | 'Sponsorship' | 'PublicKey' | 'SavedReply' | 'MembersCanDeleteReposClearAuditEntry' | 'MembersCanDeleteReposDisableAuditEntry' | 'MembersCanDeleteReposEnableAuditEntry' | 'OauthApplicationCreateAuditEntry' | 'OrgAddBillingManagerAuditEntry' | 'OrgAddMemberAuditEntry' | 'OrgBlockUserAuditEntry' | 'OrgConfigDisableCollaboratorsOnlyAuditEntry' | 'OrgConfigEnableCollaboratorsOnlyAuditEntry' | 'OrgCreateAuditEntry' | 'OrgDisableOauthAppRestrictionsAuditEntry' | 'OrgDisableSamlAuditEntry' | 'OrgDisableTwoFactorRequirementAuditEntry' | 'OrgEnableOauthAppRestrictionsAuditEntry' | 'OrgEnableSamlAuditEntry' | 'OrgEnableTwoFactorRequirementAuditEntry' | 'OrgInviteMemberAuditEntry' | 'OrgInviteToBusinessAuditEntry' | 'OrgOauthAppAccessApprovedAuditEntry' | 'OrgOauthAppAccessDeniedAuditEntry' | 'OrgOauthAppAccessRequestedAuditEntry' | 'OrgRemoveBillingManagerAuditEntry' | 'OrgRemoveMemberAuditEntry' | 'OrgRemoveOutsideCollaboratorAuditEntry' | 'OrgRestoreMemberAuditEntry' | 'OrgUnblockUserAuditEntry' | 'OrgUpdateDefaultRepositoryPermissionAuditEntry' | 'OrgUpdateMemberAuditEntry' | 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' | 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' | 'PrivateRepositoryForkingDisableAuditEntry' | 'PrivateRepositoryForkingEnableAuditEntry' | 'RepoAccessAuditEntry' | 'RepoAddMemberAuditEntry' | 'RepoAddTopicAuditEntry' | 'RepoArchivedAuditEntry' | 'RepoChangeMergeSettingAuditEntry' | 'RepoConfigDisableAnonymousGitAccessAuditEntry' | 'RepoConfigDisableCollaboratorsOnlyAuditEntry' | 'RepoConfigDisableContributorsOnlyAuditEntry' | 'RepoConfigDisableSockpuppetDisallowedAuditEntry' | 'RepoConfigEnableAnonymousGitAccessAuditEntry' | 'RepoConfigEnableCollaboratorsOnlyAuditEntry' | 'RepoConfigEnableContributorsOnlyAuditEntry' | 'RepoConfigEnableSockpuppetDisallowedAuditEntry' | 'RepoConfigLockAnonymousGitAccessAuditEntry' | 'RepoConfigUnlockAnonymousGitAccessAuditEntry' | 'RepoCreateAuditEntry' | 'RepoDestroyAuditEntry' | 'RepoRemoveMemberAuditEntry' | 'RepoRemoveTopicAuditEntry' | 'RepositoryVisibilityChangeDisableAuditEntry' | 'RepositoryVisibilityChangeEnableAuditEntry' | 'TeamAddMemberAuditEntry' | 'TeamAddRepositoryAuditEntry' | 'TeamChangeParentTeamAuditEntry' | 'TeamRemoveMemberAuditEntry' | 'TeamRemoveRepositoryAuditEntry' | 'IpAllowListEntry' | 'OrganizationIdentityProvider' | 'ExternalIdentity' | 'EnterpriseServerInstallation' | 'EnterpriseServerUserAccount' | 'EnterpriseServerUserAccountEmail' | 'EnterpriseServerUserAccountsUpload' | 'EnterpriseRepositoryInfo' | 'EnterpriseAdministratorInvitation' | 'RepositoryInvitation' | 'EnterpriseIdentityProvider' | 'MarketplaceCategory' | 'MarketplaceListing' | 'Blob' | 'PackageTag' | 'Tag';
}
export interface GQLEnterpriseTypeResolver<TParent = any> {
  avatarUrl?: EnterpriseToAvatarUrlResolver<TParent>;
  billingInfo?: EnterpriseToBillingInfoResolver<TParent>;
  createdAt?: EnterpriseToCreatedAtResolver<TParent>;
  databaseId?: EnterpriseToDatabaseIdResolver<TParent>;
  description?: EnterpriseToDescriptionResolver<TParent>;
  descriptionHTML?: EnterpriseToDescriptionHTMLResolver<TParent>;
  id?: EnterpriseToIdResolver<TParent>;
  location?: EnterpriseToLocationResolver<TParent>;
  members?: EnterpriseToMembersResolver<TParent>;
  name?: EnterpriseToNameResolver<TParent>;
  organizations?: EnterpriseToOrganizationsResolver<TParent>;
  ownerInfo?: EnterpriseToOwnerInfoResolver<TParent>;
  resourcePath?: EnterpriseToResourcePathResolver<TParent>;
  slug?: EnterpriseToSlugResolver<TParent>;
  url?: EnterpriseToUrlResolver<TParent>;
  userAccounts?: EnterpriseToUserAccountsResolver<TParent>;
  viewerIsAdmin?: EnterpriseToViewerIsAdminResolver<TParent>;
  websiteUrl?: EnterpriseToWebsiteUrlResolver<TParent>;
}

export interface EnterpriseToAvatarUrlArgs {
  size?: number;
}
export interface EnterpriseToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToBillingInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToMembersArgs {
  after?: string;
  before?: string;
  deployment?: GQLEnterpriseUserDeployment;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseMemberOrder;
  organizationLogins?: Array<string>;
  query?: string;
  role?: GQLEnterpriseUserAccountMembershipRole;
}
export interface EnterpriseToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  query?: string;
}
export interface EnterpriseToOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseToOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToOwnerInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToUserAccountsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface EnterpriseToUserAccountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseToUserAccountsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToViewerIsAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseBillingInfoTypeResolver<TParent = any> {
  allLicensableUsersCount?: EnterpriseBillingInfoToAllLicensableUsersCountResolver<TParent>;
  assetPacks?: EnterpriseBillingInfoToAssetPacksResolver<TParent>;
  availableSeats?: EnterpriseBillingInfoToAvailableSeatsResolver<TParent>;
  bandwidthQuota?: EnterpriseBillingInfoToBandwidthQuotaResolver<TParent>;
  bandwidthUsage?: EnterpriseBillingInfoToBandwidthUsageResolver<TParent>;
  bandwidthUsagePercentage?: EnterpriseBillingInfoToBandwidthUsagePercentageResolver<TParent>;
  seats?: EnterpriseBillingInfoToSeatsResolver<TParent>;
  storageQuota?: EnterpriseBillingInfoToStorageQuotaResolver<TParent>;
  storageUsage?: EnterpriseBillingInfoToStorageUsageResolver<TParent>;
  storageUsagePercentage?: EnterpriseBillingInfoToStorageUsagePercentageResolver<TParent>;
  totalAvailableLicenses?: EnterpriseBillingInfoToTotalAvailableLicensesResolver<TParent>;
  totalLicenses?: EnterpriseBillingInfoToTotalLicensesResolver<TParent>;
}

export interface EnterpriseBillingInfoToAllLicensableUsersCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToAssetPacksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToAvailableSeatsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToBandwidthQuotaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToBandwidthUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToBandwidthUsagePercentageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToSeatsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToStorageQuotaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToStorageUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToStorageUsagePercentageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToTotalAvailableLicensesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseBillingInfoToTotalLicensesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseMemberConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseMemberConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseMemberConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseMemberConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseMemberConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseMemberConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseMemberEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseMemberEdgeToCursorResolver<TParent>;
  isUnlicensed?: EnterpriseMemberEdgeToIsUnlicensedResolver<TParent>;
  node?: EnterpriseMemberEdgeToNodeResolver<TParent>;
}

export interface EnterpriseMemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseMemberEdgeToIsUnlicensedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseMemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseMemberTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'EnterpriseUserAccount' | 'User';
}
export interface GQLEnterpriseUserAccountTypeResolver<TParent = any> {
  avatarUrl?: EnterpriseUserAccountToAvatarUrlResolver<TParent>;
  createdAt?: EnterpriseUserAccountToCreatedAtResolver<TParent>;
  enterprise?: EnterpriseUserAccountToEnterpriseResolver<TParent>;
  id?: EnterpriseUserAccountToIdResolver<TParent>;
  login?: EnterpriseUserAccountToLoginResolver<TParent>;
  name?: EnterpriseUserAccountToNameResolver<TParent>;
  organizations?: EnterpriseUserAccountToOrganizationsResolver<TParent>;
  resourcePath?: EnterpriseUserAccountToResourcePathResolver<TParent>;
  updatedAt?: EnterpriseUserAccountToUpdatedAtResolver<TParent>;
  url?: EnterpriseUserAccountToUrlResolver<TParent>;
  user?: EnterpriseUserAccountToUserResolver<TParent>;
}

export interface EnterpriseUserAccountToAvatarUrlArgs {
  size?: number;
}
export interface EnterpriseUserAccountToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseUserAccountToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  query?: string;
  role?: GQLEnterpriseUserAccountMembershipRole;
}
export interface EnterpriseUserAccountToOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseUserAccountToOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'EnterpriseUserAccount' | 'Organization' | 'User' | 'Bot' | 'Mannequin';
}
export interface GQLEnterpriseOrganizationMembershipConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseOrganizationMembershipConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseOrganizationMembershipConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseOrganizationMembershipConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseOrganizationMembershipConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseOrganizationMembershipConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOrganizationMembershipConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOrganizationMembershipConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOrganizationMembershipConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseOrganizationMembershipEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseOrganizationMembershipEdgeToCursorResolver<TParent>;
  node?: EnterpriseOrganizationMembershipEdgeToNodeResolver<TParent>;
  role?: EnterpriseOrganizationMembershipEdgeToRoleResolver<TParent>;
}

export interface EnterpriseOrganizationMembershipEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOrganizationMembershipEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOrganizationMembershipEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationTypeResolver<TParent = any> {
  anyPinnableItems?: OrganizationToAnyPinnableItemsResolver<TParent>;
  auditLog?: OrganizationToAuditLogResolver<TParent>;
  avatarUrl?: OrganizationToAvatarUrlResolver<TParent>;
  createdAt?: OrganizationToCreatedAtResolver<TParent>;
  databaseId?: OrganizationToDatabaseIdResolver<TParent>;
  description?: OrganizationToDescriptionResolver<TParent>;
  descriptionHTML?: OrganizationToDescriptionHTMLResolver<TParent>;
  email?: OrganizationToEmailResolver<TParent>;
  id?: OrganizationToIdResolver<TParent>;
  ipAllowListEnabledSetting?: OrganizationToIpAllowListEnabledSettingResolver<TParent>;
  ipAllowListEntries?: OrganizationToIpAllowListEntriesResolver<TParent>;
  isVerified?: OrganizationToIsVerifiedResolver<TParent>;
  itemShowcase?: OrganizationToItemShowcaseResolver<TParent>;
  location?: OrganizationToLocationResolver<TParent>;
  login?: OrganizationToLoginResolver<TParent>;
  memberStatuses?: OrganizationToMemberStatusesResolver<TParent>;
  membersWithRole?: OrganizationToMembersWithRoleResolver<TParent>;
  name?: OrganizationToNameResolver<TParent>;
  newTeamResourcePath?: OrganizationToNewTeamResourcePathResolver<TParent>;
  newTeamUrl?: OrganizationToNewTeamUrlResolver<TParent>;
  organizationBillingEmail?: OrganizationToOrganizationBillingEmailResolver<TParent>;
  packages?: OrganizationToPackagesResolver<TParent>;
  pendingMembers?: OrganizationToPendingMembersResolver<TParent>;
  pinnableItems?: OrganizationToPinnableItemsResolver<TParent>;
  pinnedItems?: OrganizationToPinnedItemsResolver<TParent>;
  pinnedItemsRemaining?: OrganizationToPinnedItemsRemainingResolver<TParent>;
  project?: OrganizationToProjectResolver<TParent>;
  projects?: OrganizationToProjectsResolver<TParent>;
  projectsResourcePath?: OrganizationToProjectsResourcePathResolver<TParent>;
  projectsUrl?: OrganizationToProjectsUrlResolver<TParent>;
  repositories?: OrganizationToRepositoriesResolver<TParent>;
  repository?: OrganizationToRepositoryResolver<TParent>;
  requiresTwoFactorAuthentication?: OrganizationToRequiresTwoFactorAuthenticationResolver<TParent>;
  resourcePath?: OrganizationToResourcePathResolver<TParent>;
  samlIdentityProvider?: OrganizationToSamlIdentityProviderResolver<TParent>;
  sponsorsListing?: OrganizationToSponsorsListingResolver<TParent>;
  sponsorshipsAsMaintainer?: OrganizationToSponsorshipsAsMaintainerResolver<TParent>;
  sponsorshipsAsSponsor?: OrganizationToSponsorshipsAsSponsorResolver<TParent>;
  team?: OrganizationToTeamResolver<TParent>;
  teams?: OrganizationToTeamsResolver<TParent>;
  teamsResourcePath?: OrganizationToTeamsResourcePathResolver<TParent>;
  teamsUrl?: OrganizationToTeamsUrlResolver<TParent>;
  twitterUsername?: OrganizationToTwitterUsernameResolver<TParent>;
  updatedAt?: OrganizationToUpdatedAtResolver<TParent>;
  url?: OrganizationToUrlResolver<TParent>;
  viewerCanAdminister?: OrganizationToViewerCanAdministerResolver<TParent>;
  viewerCanChangePinnedItems?: OrganizationToViewerCanChangePinnedItemsResolver<TParent>;
  viewerCanCreateProjects?: OrganizationToViewerCanCreateProjectsResolver<TParent>;
  viewerCanCreateRepositories?: OrganizationToViewerCanCreateRepositoriesResolver<TParent>;
  viewerCanCreateTeams?: OrganizationToViewerCanCreateTeamsResolver<TParent>;
  viewerIsAMember?: OrganizationToViewerIsAMemberResolver<TParent>;
  websiteUrl?: OrganizationToWebsiteUrlResolver<TParent>;
}

export interface OrganizationToAnyPinnableItemsArgs {
  type?: GQLPinnableItemType;
}
export interface OrganizationToAnyPinnableItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToAnyPinnableItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToAuditLogArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLAuditLogOrder;
  query?: string;
}
export interface OrganizationToAuditLogResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToAuditLogArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToAvatarUrlArgs {
  size?: number;
}
export interface OrganizationToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIpAllowListEnabledSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIpAllowListEntriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLIpAllowListEntryOrder;
}
export interface OrganizationToIpAllowListEntriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToIpAllowListEntriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIsVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToItemShowcaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToMemberStatusesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLUserStatusOrder;
}
export interface OrganizationToMemberStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToMemberStatusesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToMembersWithRoleArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToMembersWithRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToMembersWithRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNewTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNewTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToOrganizationBillingEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPackagesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  names?: Array<string | null>;
  orderBy?: GQLPackageOrder;
  packageType?: GQLPackageType;
  repositoryId?: string;
}
export interface OrganizationToPackagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPackagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPendingMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToPendingMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPendingMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPinnableItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  types?: Array<GQLPinnableItemType>;
}
export interface OrganizationToPinnableItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPinnableItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPinnedItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  types?: Array<GQLPinnableItemType>;
}
export interface OrganizationToPinnedItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPinnedItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPinnedItemsRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectArgs {
  number: number;
}
export interface OrganizationToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLProjectOrder;
  search?: string;
  states?: Array<GQLProjectState>;
}
export interface OrganizationToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRepositoriesArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isFork?: boolean;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface OrganizationToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRepositoryArgs {
  name: string;
}
export interface OrganizationToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRequiresTwoFactorAuthenticationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToSamlIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToSponsorsListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToSponsorshipsAsMaintainerArgs {
  after?: string;
  before?: string;
  first?: number;
  includePrivate?: boolean;
  last?: number;
  orderBy?: GQLSponsorshipOrder;
}
export interface OrganizationToSponsorshipsAsMaintainerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToSponsorshipsAsMaintainerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToSponsorshipsAsSponsorArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLSponsorshipOrder;
}
export interface OrganizationToSponsorshipsAsSponsorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToSponsorshipsAsSponsorArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamArgs {
  slug: string;
}
export interface OrganizationToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToTeamArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  ldapMapped?: boolean;
  orderBy?: GQLTeamOrder;
  privacy?: GQLTeamPrivacy;
  query?: string;
  role?: GQLTeamRole;
  rootTeamsOnly?: boolean;
  userLogins?: Array<string>;
}
export interface OrganizationToTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTwitterUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanChangePinnedItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerIsAMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMemberStatusableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Team';
}
export interface GQLUserStatusConnectionTypeResolver<TParent = any> {
  edges?: UserStatusConnectionToEdgesResolver<TParent>;
  nodes?: UserStatusConnectionToNodesResolver<TParent>;
  pageInfo?: UserStatusConnectionToPageInfoResolver<TParent>;
  totalCount?: UserStatusConnectionToTotalCountResolver<TParent>;
}

export interface UserStatusConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserStatusEdgeTypeResolver<TParent = any> {
  cursor?: UserStatusEdgeToCursorResolver<TParent>;
  node?: UserStatusEdgeToNodeResolver<TParent>;
}

export interface UserStatusEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserStatusTypeResolver<TParent = any> {
  createdAt?: UserStatusToCreatedAtResolver<TParent>;
  emoji?: UserStatusToEmojiResolver<TParent>;
  emojiHTML?: UserStatusToEmojiHTMLResolver<TParent>;
  expiresAt?: UserStatusToExpiresAtResolver<TParent>;
  id?: UserStatusToIdResolver<TParent>;
  indicatesLimitedAvailability?: UserStatusToIndicatesLimitedAvailabilityResolver<TParent>;
  message?: UserStatusToMessageResolver<TParent>;
  organization?: UserStatusToOrganizationResolver<TParent>;
  updatedAt?: UserStatusToUpdatedAtResolver<TParent>;
  user?: UserStatusToUserResolver<TParent>;
}

export interface UserStatusToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToEmojiResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToEmojiHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToExpiresAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToIndicatesLimitedAvailabilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserStatusToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  anyPinnableItems?: UserToAnyPinnableItemsResolver<TParent>;
  avatarUrl?: UserToAvatarUrlResolver<TParent>;
  bio?: UserToBioResolver<TParent>;
  bioHTML?: UserToBioHTMLResolver<TParent>;
  commitComments?: UserToCommitCommentsResolver<TParent>;
  company?: UserToCompanyResolver<TParent>;
  companyHTML?: UserToCompanyHTMLResolver<TParent>;
  contributionsCollection?: UserToContributionsCollectionResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  databaseId?: UserToDatabaseIdResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  followers?: UserToFollowersResolver<TParent>;
  following?: UserToFollowingResolver<TParent>;
  gist?: UserToGistResolver<TParent>;
  gistComments?: UserToGistCommentsResolver<TParent>;
  gists?: UserToGistsResolver<TParent>;
  hovercard?: UserToHovercardResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  isBountyHunter?: UserToIsBountyHunterResolver<TParent>;
  isCampusExpert?: UserToIsCampusExpertResolver<TParent>;
  isDeveloperProgramMember?: UserToIsDeveloperProgramMemberResolver<TParent>;
  isEmployee?: UserToIsEmployeeResolver<TParent>;
  isHireable?: UserToIsHireableResolver<TParent>;
  isSiteAdmin?: UserToIsSiteAdminResolver<TParent>;
  isViewer?: UserToIsViewerResolver<TParent>;
  issueComments?: UserToIssueCommentsResolver<TParent>;
  issues?: UserToIssuesResolver<TParent>;
  itemShowcase?: UserToItemShowcaseResolver<TParent>;
  location?: UserToLocationResolver<TParent>;
  login?: UserToLoginResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  organization?: UserToOrganizationResolver<TParent>;
  organizationVerifiedDomainEmails?: UserToOrganizationVerifiedDomainEmailsResolver<TParent>;
  organizations?: UserToOrganizationsResolver<TParent>;
  packages?: UserToPackagesResolver<TParent>;
  pinnableItems?: UserToPinnableItemsResolver<TParent>;
  pinnedItems?: UserToPinnedItemsResolver<TParent>;
  pinnedItemsRemaining?: UserToPinnedItemsRemainingResolver<TParent>;
  project?: UserToProjectResolver<TParent>;
  projects?: UserToProjectsResolver<TParent>;
  projectsResourcePath?: UserToProjectsResourcePathResolver<TParent>;
  projectsUrl?: UserToProjectsUrlResolver<TParent>;
  publicKeys?: UserToPublicKeysResolver<TParent>;
  pullRequests?: UserToPullRequestsResolver<TParent>;
  repositories?: UserToRepositoriesResolver<TParent>;
  repositoriesContributedTo?: UserToRepositoriesContributedToResolver<TParent>;
  repository?: UserToRepositoryResolver<TParent>;
  resourcePath?: UserToResourcePathResolver<TParent>;
  savedReplies?: UserToSavedRepliesResolver<TParent>;
  sponsorsListing?: UserToSponsorsListingResolver<TParent>;
  sponsorshipsAsMaintainer?: UserToSponsorshipsAsMaintainerResolver<TParent>;
  sponsorshipsAsSponsor?: UserToSponsorshipsAsSponsorResolver<TParent>;
  starredRepositories?: UserToStarredRepositoriesResolver<TParent>;
  status?: UserToStatusResolver<TParent>;
  topRepositories?: UserToTopRepositoriesResolver<TParent>;
  twitterUsername?: UserToTwitterUsernameResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
  url?: UserToUrlResolver<TParent>;
  viewerCanChangePinnedItems?: UserToViewerCanChangePinnedItemsResolver<TParent>;
  viewerCanCreateProjects?: UserToViewerCanCreateProjectsResolver<TParent>;
  viewerCanFollow?: UserToViewerCanFollowResolver<TParent>;
  viewerIsFollowing?: UserToViewerIsFollowingResolver<TParent>;
  watching?: UserToWatchingResolver<TParent>;
  websiteUrl?: UserToWebsiteUrlResolver<TParent>;
}

export interface UserToAnyPinnableItemsArgs {
  type?: GQLPinnableItemType;
}
export interface UserToAnyPinnableItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToAnyPinnableItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvatarUrlArgs {
  size?: number;
}
export interface UserToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCommitCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToCommitCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToCommitCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToContributionsCollectionArgs {
  from?: GQLDateTime;
  organizationID?: string;
  to?: GQLDateTime;
}
export interface UserToContributionsCollectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToContributionsCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowingArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToFollowingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistArgs {
  name: string;
}
export interface UserToGistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToGistCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLGistOrder;
  privacy?: GQLGistPrivacy;
}
export interface UserToGistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToHovercardArgs {
  primarySubjectId?: string;
}
export interface UserToHovercardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToHovercardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsBountyHunterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsCampusExpertResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsDeveloperProgramMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsEmployeeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsHireableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsSiteAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIssueCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToIssueCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToIssueCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIssuesArgs {
  after?: string;
  before?: string;
  filterBy?: GQLIssueFilters;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface UserToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToItemShowcaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationArgs {
  login: string;
}
export interface UserToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationVerifiedDomainEmailsArgs {
  login: string;
}
export interface UserToOrganizationVerifiedDomainEmailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationVerifiedDomainEmailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPackagesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  names?: Array<string | null>;
  orderBy?: GQLPackageOrder;
  packageType?: GQLPackageType;
  repositoryId?: string;
}
export interface UserToPackagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPackagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPinnableItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  types?: Array<GQLPinnableItemType>;
}
export interface UserToPinnableItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPinnableItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPinnedItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  types?: Array<GQLPinnableItemType>;
}
export interface UserToPinnedItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPinnedItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPinnedItemsRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToProjectArgs {
  number: number;
}
export interface UserToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToProjectsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLProjectOrder;
  search?: string;
  states?: Array<GQLProjectState>;
}
export interface UserToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPublicKeysArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToPublicKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPublicKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface UserToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoriesArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isFork?: boolean;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoriesContributedToArgs {
  after?: string;
  before?: string;
  contributionTypes?: Array<GQLRepositoryContributionType | null>;
  first?: number;
  includeUserRepositories?: boolean;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToRepositoriesContributedToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoriesContributedToArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoryArgs {
  name: string;
}
export interface UserToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSavedRepliesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLSavedReplyOrder;
}
export interface UserToSavedRepliesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToSavedRepliesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSponsorsListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSponsorshipsAsMaintainerArgs {
  after?: string;
  before?: string;
  first?: number;
  includePrivate?: boolean;
  last?: number;
  orderBy?: GQLSponsorshipOrder;
}
export interface UserToSponsorshipsAsMaintainerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToSponsorshipsAsMaintainerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToSponsorshipsAsSponsorArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLSponsorshipOrder;
}
export interface UserToSponsorshipsAsSponsorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToSponsorshipsAsSponsorArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToStarredRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
  ownedByViewer?: boolean;
}
export interface UserToStarredRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToStarredRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToTopRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy: GQLRepositoryOrder;
  since?: GQLDateTime;
}
export interface UserToTopRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToTopRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToTwitterUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerCanChangePinnedItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerCanFollowResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerIsFollowingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWatchingArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface UserToWatchingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToWatchingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Repository';
}
export interface GQLPackageConnectionTypeResolver<TParent = any> {
  edges?: PackageConnectionToEdgesResolver<TParent>;
  nodes?: PackageConnectionToNodesResolver<TParent>;
  pageInfo?: PackageConnectionToPageInfoResolver<TParent>;
  totalCount?: PackageConnectionToTotalCountResolver<TParent>;
}

export interface PackageConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageEdgeTypeResolver<TParent = any> {
  cursor?: PackageEdgeToCursorResolver<TParent>;
  node?: PackageEdgeToNodeResolver<TParent>;
}

export interface PackageEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageTypeResolver<TParent = any> {
  id?: PackageToIdResolver<TParent>;
  latestVersion?: PackageToLatestVersionResolver<TParent>;
  name?: PackageToNameResolver<TParent>;
  packageType?: PackageToPackageTypeResolver<TParent>;
  repository?: PackageToRepositoryResolver<TParent>;
  statistics?: PackageToStatisticsResolver<TParent>;
  version?: PackageToVersionResolver<TParent>;
  versions?: PackageToVersionsResolver<TParent>;
}

export interface PackageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToLatestVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToPackageTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToStatisticsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToVersionArgs {
  version: string;
}
export interface PackageToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PackageToVersionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageToVersionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLPackageVersionOrder;
}
export interface PackageToVersionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PackageToVersionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageVersionTypeResolver<TParent = any> {
  files?: PackageVersionToFilesResolver<TParent>;
  id?: PackageVersionToIdResolver<TParent>;
  package?: PackageVersionToPackageResolver<TParent>;
  platform?: PackageVersionToPlatformResolver<TParent>;
  preRelease?: PackageVersionToPreReleaseResolver<TParent>;
  readme?: PackageVersionToReadmeResolver<TParent>;
  release?: PackageVersionToReleaseResolver<TParent>;
  statistics?: PackageVersionToStatisticsResolver<TParent>;
  summary?: PackageVersionToSummaryResolver<TParent>;
  version?: PackageVersionToVersionResolver<TParent>;
}

export interface PackageVersionToFilesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLPackageFileOrder;
}
export interface PackageVersionToFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PackageVersionToFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToPackageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToPlatformResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToPreReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToReadmeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToStatisticsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageFileConnectionTypeResolver<TParent = any> {
  edges?: PackageFileConnectionToEdgesResolver<TParent>;
  nodes?: PackageFileConnectionToNodesResolver<TParent>;
  pageInfo?: PackageFileConnectionToPageInfoResolver<TParent>;
  totalCount?: PackageFileConnectionToTotalCountResolver<TParent>;
}

export interface PackageFileConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageFileEdgeTypeResolver<TParent = any> {
  cursor?: PackageFileEdgeToCursorResolver<TParent>;
  node?: PackageFileEdgeToNodeResolver<TParent>;
}

export interface PackageFileEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageFileTypeResolver<TParent = any> {
  id?: PackageFileToIdResolver<TParent>;
  md5?: PackageFileToMd5Resolver<TParent>;
  name?: PackageFileToNameResolver<TParent>;
  packageVersion?: PackageFileToPackageVersionResolver<TParent>;
  sha1?: PackageFileToSha1Resolver<TParent>;
  sha256?: PackageFileToSha256Resolver<TParent>;
  size?: PackageFileToSizeResolver<TParent>;
  updatedAt?: PackageFileToUpdatedAtResolver<TParent>;
  url?: PackageFileToUrlResolver<TParent>;
}

export interface PackageFileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToMd5Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToPackageVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToSha1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToSha256Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageFileToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  endCursor?: PageInfoToEndCursorResolver<TParent>;
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  startCursor?: PageInfoToStartCursorResolver<TParent>;
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseTypeResolver<TParent = any> {
  author?: ReleaseToAuthorResolver<TParent>;
  createdAt?: ReleaseToCreatedAtResolver<TParent>;
  description?: ReleaseToDescriptionResolver<TParent>;
  descriptionHTML?: ReleaseToDescriptionHTMLResolver<TParent>;
  id?: ReleaseToIdResolver<TParent>;
  isDraft?: ReleaseToIsDraftResolver<TParent>;
  isPrerelease?: ReleaseToIsPrereleaseResolver<TParent>;
  name?: ReleaseToNameResolver<TParent>;
  publishedAt?: ReleaseToPublishedAtResolver<TParent>;
  releaseAssets?: ReleaseToReleaseAssetsResolver<TParent>;
  resourcePath?: ReleaseToResourcePathResolver<TParent>;
  shortDescriptionHTML?: ReleaseToShortDescriptionHTMLResolver<TParent>;
  tag?: ReleaseToTagResolver<TParent>;
  tagName?: ReleaseToTagNameResolver<TParent>;
  updatedAt?: ReleaseToUpdatedAtResolver<TParent>;
  url?: ReleaseToUrlResolver<TParent>;
}

export interface ReleaseToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIsPrereleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToReleaseAssetsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  name?: string;
}
export interface ReleaseToReleaseAssetsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReleaseToReleaseAssetsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToShortDescriptionHTMLArgs {
  limit?: number;
}
export interface ReleaseToShortDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReleaseToShortDescriptionHTMLArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToTagNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUniformResourceLocatableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Release' | 'PullRequest' | 'Issue' | 'Repository' | 'TeamDiscussion' | 'TeamDiscussionComment' | 'Commit' | 'Milestone' | 'RepositoryTopic' | 'Bot' | 'Mannequin' | 'ClosedEvent' | 'CrossReferencedEvent' | 'PullRequestCommit' | 'MergedEvent' | 'ReviewDismissedEvent' | 'ConvertToDraftEvent' | 'ReadyForReviewEvent' | 'Gist';
}
export interface GQLReleaseAssetConnectionTypeResolver<TParent = any> {
  edges?: ReleaseAssetConnectionToEdgesResolver<TParent>;
  nodes?: ReleaseAssetConnectionToNodesResolver<TParent>;
  pageInfo?: ReleaseAssetConnectionToPageInfoResolver<TParent>;
  totalCount?: ReleaseAssetConnectionToTotalCountResolver<TParent>;
}

export interface ReleaseAssetConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseAssetEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseAssetEdgeToCursorResolver<TParent>;
  node?: ReleaseAssetEdgeToNodeResolver<TParent>;
}

export interface ReleaseAssetEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseAssetTypeResolver<TParent = any> {
  contentType?: ReleaseAssetToContentTypeResolver<TParent>;
  createdAt?: ReleaseAssetToCreatedAtResolver<TParent>;
  downloadCount?: ReleaseAssetToDownloadCountResolver<TParent>;
  downloadUrl?: ReleaseAssetToDownloadUrlResolver<TParent>;
  id?: ReleaseAssetToIdResolver<TParent>;
  name?: ReleaseAssetToNameResolver<TParent>;
  release?: ReleaseAssetToReleaseResolver<TParent>;
  size?: ReleaseAssetToSizeResolver<TParent>;
  updatedAt?: ReleaseAssetToUpdatedAtResolver<TParent>;
  uploadedBy?: ReleaseAssetToUploadedByResolver<TParent>;
  url?: ReleaseAssetToUrlResolver<TParent>;
}

export interface ReleaseAssetToContentTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToDownloadCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUploadedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefTypeResolver<TParent = any> {
  associatedPullRequests?: RefToAssociatedPullRequestsResolver<TParent>;
  id?: RefToIdResolver<TParent>;
  name?: RefToNameResolver<TParent>;
  prefix?: RefToPrefixResolver<TParent>;
  repository?: RefToRepositoryResolver<TParent>;
  target?: RefToTargetResolver<TParent>;
}

export interface RefToAssociatedPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface RefToAssociatedPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RefToAssociatedPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestConnectionTypeResolver<TParent = any> {
  edges?: PullRequestConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestEdgeToCursorResolver<TParent>;
  node?: PullRequestEdgeToNodeResolver<TParent>;
}

export interface PullRequestEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTypeResolver<TParent = any> {
  activeLockReason?: PullRequestToActiveLockReasonResolver<TParent>;
  additions?: PullRequestToAdditionsResolver<TParent>;
  assignees?: PullRequestToAssigneesResolver<TParent>;
  author?: PullRequestToAuthorResolver<TParent>;
  authorAssociation?: PullRequestToAuthorAssociationResolver<TParent>;
  baseRef?: PullRequestToBaseRefResolver<TParent>;
  baseRefName?: PullRequestToBaseRefNameResolver<TParent>;
  baseRefOid?: PullRequestToBaseRefOidResolver<TParent>;
  baseRepository?: PullRequestToBaseRepositoryResolver<TParent>;
  body?: PullRequestToBodyResolver<TParent>;
  bodyHTML?: PullRequestToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestToBodyTextResolver<TParent>;
  changedFiles?: PullRequestToChangedFilesResolver<TParent>;
  checksResourcePath?: PullRequestToChecksResourcePathResolver<TParent>;
  checksUrl?: PullRequestToChecksUrlResolver<TParent>;
  closed?: PullRequestToClosedResolver<TParent>;
  closedAt?: PullRequestToClosedAtResolver<TParent>;
  comments?: PullRequestToCommentsResolver<TParent>;
  commits?: PullRequestToCommitsResolver<TParent>;
  createdAt?: PullRequestToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestToDatabaseIdResolver<TParent>;
  deletions?: PullRequestToDeletionsResolver<TParent>;
  editor?: PullRequestToEditorResolver<TParent>;
  files?: PullRequestToFilesResolver<TParent>;
  headRef?: PullRequestToHeadRefResolver<TParent>;
  headRefName?: PullRequestToHeadRefNameResolver<TParent>;
  headRefOid?: PullRequestToHeadRefOidResolver<TParent>;
  headRepository?: PullRequestToHeadRepositoryResolver<TParent>;
  headRepositoryOwner?: PullRequestToHeadRepositoryOwnerResolver<TParent>;
  hovercard?: PullRequestToHovercardResolver<TParent>;
  id?: PullRequestToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestToIncludesCreatedEditResolver<TParent>;
  isCrossRepository?: PullRequestToIsCrossRepositoryResolver<TParent>;
  isDraft?: PullRequestToIsDraftResolver<TParent>;
  labels?: PullRequestToLabelsResolver<TParent>;
  lastEditedAt?: PullRequestToLastEditedAtResolver<TParent>;
  locked?: PullRequestToLockedResolver<TParent>;
  maintainerCanModify?: PullRequestToMaintainerCanModifyResolver<TParent>;
  mergeCommit?: PullRequestToMergeCommitResolver<TParent>;
  mergeable?: PullRequestToMergeableResolver<TParent>;
  merged?: PullRequestToMergedResolver<TParent>;
  mergedAt?: PullRequestToMergedAtResolver<TParent>;
  mergedBy?: PullRequestToMergedByResolver<TParent>;
  milestone?: PullRequestToMilestoneResolver<TParent>;
  number?: PullRequestToNumberResolver<TParent>;
  participants?: PullRequestToParticipantsResolver<TParent>;
  permalink?: PullRequestToPermalinkResolver<TParent>;
  potentialMergeCommit?: PullRequestToPotentialMergeCommitResolver<TParent>;
  projectCards?: PullRequestToProjectCardsResolver<TParent>;
  publishedAt?: PullRequestToPublishedAtResolver<TParent>;
  reactionGroups?: PullRequestToReactionGroupsResolver<TParent>;
  reactions?: PullRequestToReactionsResolver<TParent>;
  repository?: PullRequestToRepositoryResolver<TParent>;
  resourcePath?: PullRequestToResourcePathResolver<TParent>;
  revertResourcePath?: PullRequestToRevertResourcePathResolver<TParent>;
  revertUrl?: PullRequestToRevertUrlResolver<TParent>;
  reviewDecision?: PullRequestToReviewDecisionResolver<TParent>;
  reviewRequests?: PullRequestToReviewRequestsResolver<TParent>;
  reviewThreads?: PullRequestToReviewThreadsResolver<TParent>;
  reviews?: PullRequestToReviewsResolver<TParent>;
  state?: PullRequestToStateResolver<TParent>;
  suggestedReviewers?: PullRequestToSuggestedReviewersResolver<TParent>;
  timeline?: PullRequestToTimelineResolver<TParent>;
  timelineItems?: PullRequestToTimelineItemsResolver<TParent>;
  title?: PullRequestToTitleResolver<TParent>;
  updatedAt?: PullRequestToUpdatedAtResolver<TParent>;
  url?: PullRequestToUrlResolver<TParent>;
  userContentEdits?: PullRequestToUserContentEditsResolver<TParent>;
  viewerCanApplySuggestion?: PullRequestToViewerCanApplySuggestionResolver<TParent>;
  viewerCanReact?: PullRequestToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: PullRequestToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: PullRequestToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: PullRequestToViewerSubscriptionResolver<TParent>;
}

export interface PullRequestToActiveLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAssigneesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToAssigneesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToAssigneesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToChangedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToChecksResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToChecksUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCommitsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToCommitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToCommitsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToFilesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRepositoryOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHovercardArgs {
  includeNotificationContexts?: boolean;
}
export interface PullRequestToHovercardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToHovercardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLLabelOrder;
}
export interface PullRequestToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMaintainerCanModifyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergeableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToParticipantsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPermalinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPotentialMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToProjectCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToProjectCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToProjectCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface PullRequestToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRevertResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRevertUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewDecisionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewRequestsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToReviewRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewThreadsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToReviewThreadsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewThreadsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewsArgs {
  after?: string;
  author?: string;
  before?: string;
  first?: number;
  last?: number;
  states?: Array<GQLPullRequestReviewState>;
}
export interface PullRequestToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToSuggestedReviewersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTimelineArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  since?: GQLDateTime;
}
export interface PullRequestToTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToTimelineArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTimelineItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  itemTypes?: Array<GQLPullRequestTimelineItemsItemType>;
  last?: number;
  since?: GQLDateTime;
  skip?: number;
}
export interface PullRequestToTimelineItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToTimelineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanApplySuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssignableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue';
}
export interface GQLUserConnectionTypeResolver<TParent = any> {
  edges?: UserConnectionToEdgesResolver<TParent>;
  nodes?: UserConnectionToNodesResolver<TParent>;
  pageInfo?: UserConnectionToPageInfoResolver<TParent>;
  totalCount?: UserConnectionToTotalCountResolver<TParent>;
}

export interface UserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserEdgeTypeResolver<TParent = any> {
  cursor?: UserEdgeToCursorResolver<TParent>;
  node?: UserEdgeToNodeResolver<TParent>;
}

export interface UserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClosableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'Project' | 'Milestone';
}
export interface GQLCommentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'TeamDiscussion' | 'TeamDiscussionComment' | 'CommitComment' | 'IssueComment' | 'PullRequestReviewComment' | 'PullRequestReview' | 'GistComment';
}
export interface GQLUserContentEditConnectionTypeResolver<TParent = any> {
  edges?: UserContentEditConnectionToEdgesResolver<TParent>;
  nodes?: UserContentEditConnectionToNodesResolver<TParent>;
  pageInfo?: UserContentEditConnectionToPageInfoResolver<TParent>;
  totalCount?: UserContentEditConnectionToTotalCountResolver<TParent>;
}

export interface UserContentEditConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserContentEditEdgeTypeResolver<TParent = any> {
  cursor?: UserContentEditEdgeToCursorResolver<TParent>;
  node?: UserContentEditEdgeToNodeResolver<TParent>;
}

export interface UserContentEditEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserContentEditTypeResolver<TParent = any> {
  createdAt?: UserContentEditToCreatedAtResolver<TParent>;
  deletedAt?: UserContentEditToDeletedAtResolver<TParent>;
  deletedBy?: UserContentEditToDeletedByResolver<TParent>;
  diff?: UserContentEditToDiffResolver<TParent>;
  editedAt?: UserContentEditToEditedAtResolver<TParent>;
  editor?: UserContentEditToEditorResolver<TParent>;
  id?: UserContentEditToIdResolver<TParent>;
  updatedAt?: UserContentEditToUpdatedAtResolver<TParent>;
}

export interface UserContentEditToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDeletedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDiffResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabelableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue';
}
export interface GQLLabelConnectionTypeResolver<TParent = any> {
  edges?: LabelConnectionToEdgesResolver<TParent>;
  nodes?: LabelConnectionToNodesResolver<TParent>;
  pageInfo?: LabelConnectionToPageInfoResolver<TParent>;
  totalCount?: LabelConnectionToTotalCountResolver<TParent>;
}

export interface LabelConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabelEdgeTypeResolver<TParent = any> {
  cursor?: LabelEdgeToCursorResolver<TParent>;
  node?: LabelEdgeToNodeResolver<TParent>;
}

export interface LabelEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLabelTypeResolver<TParent = any> {
  color?: LabelToColorResolver<TParent>;
  createdAt?: LabelToCreatedAtResolver<TParent>;
  description?: LabelToDescriptionResolver<TParent>;
  id?: LabelToIdResolver<TParent>;
  isDefault?: LabelToIsDefaultResolver<TParent>;
  issues?: LabelToIssuesResolver<TParent>;
  name?: LabelToNameResolver<TParent>;
  pullRequests?: LabelToPullRequestsResolver<TParent>;
  repository?: LabelToRepositoryResolver<TParent>;
  resourcePath?: LabelToResourcePathResolver<TParent>;
  updatedAt?: LabelToUpdatedAtResolver<TParent>;
  url?: LabelToUrlResolver<TParent>;
}

export interface LabelToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIsDefaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIssuesArgs {
  after?: string;
  before?: string;
  filterBy?: GQLIssueFilters;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface LabelToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LabelToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface LabelToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LabelToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueConnectionTypeResolver<TParent = any> {
  edges?: IssueConnectionToEdgesResolver<TParent>;
  nodes?: IssueConnectionToNodesResolver<TParent>;
  pageInfo?: IssueConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueConnectionToTotalCountResolver<TParent>;
}

export interface IssueConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueEdgeTypeResolver<TParent = any> {
  cursor?: IssueEdgeToCursorResolver<TParent>;
  node?: IssueEdgeToNodeResolver<TParent>;
}

export interface IssueEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTypeResolver<TParent = any> {
  activeLockReason?: IssueToActiveLockReasonResolver<TParent>;
  assignees?: IssueToAssigneesResolver<TParent>;
  author?: IssueToAuthorResolver<TParent>;
  authorAssociation?: IssueToAuthorAssociationResolver<TParent>;
  body?: IssueToBodyResolver<TParent>;
  bodyHTML?: IssueToBodyHTMLResolver<TParent>;
  bodyText?: IssueToBodyTextResolver<TParent>;
  closed?: IssueToClosedResolver<TParent>;
  closedAt?: IssueToClosedAtResolver<TParent>;
  comments?: IssueToCommentsResolver<TParent>;
  createdAt?: IssueToCreatedAtResolver<TParent>;
  createdViaEmail?: IssueToCreatedViaEmailResolver<TParent>;
  databaseId?: IssueToDatabaseIdResolver<TParent>;
  editor?: IssueToEditorResolver<TParent>;
  hovercard?: IssueToHovercardResolver<TParent>;
  id?: IssueToIdResolver<TParent>;
  includesCreatedEdit?: IssueToIncludesCreatedEditResolver<TParent>;
  labels?: IssueToLabelsResolver<TParent>;
  lastEditedAt?: IssueToLastEditedAtResolver<TParent>;
  locked?: IssueToLockedResolver<TParent>;
  milestone?: IssueToMilestoneResolver<TParent>;
  number?: IssueToNumberResolver<TParent>;
  participants?: IssueToParticipantsResolver<TParent>;
  projectCards?: IssueToProjectCardsResolver<TParent>;
  publishedAt?: IssueToPublishedAtResolver<TParent>;
  reactionGroups?: IssueToReactionGroupsResolver<TParent>;
  reactions?: IssueToReactionsResolver<TParent>;
  repository?: IssueToRepositoryResolver<TParent>;
  resourcePath?: IssueToResourcePathResolver<TParent>;
  state?: IssueToStateResolver<TParent>;
  timeline?: IssueToTimelineResolver<TParent>;
  timelineItems?: IssueToTimelineItemsResolver<TParent>;
  title?: IssueToTitleResolver<TParent>;
  updatedAt?: IssueToUpdatedAtResolver<TParent>;
  url?: IssueToUrlResolver<TParent>;
  userContentEdits?: IssueToUserContentEditsResolver<TParent>;
  viewerCanReact?: IssueToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: IssueToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: IssueToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: IssueToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: IssueToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: IssueToViewerSubscriptionResolver<TParent>;
}

export interface IssueToActiveLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAssigneesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToAssigneesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToAssigneesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToHovercardArgs {
  includeNotificationContexts?: boolean;
}
export interface IssueToHovercardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToHovercardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLLabelOrder;
}
export interface IssueToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToParticipantsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToProjectCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToProjectCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToProjectCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface IssueToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTimelineArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  since?: GQLDateTime;
}
export interface IssueToTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToTimelineArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTimelineItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  itemTypes?: Array<GQLIssueTimelineItemsItemType>;
  last?: number;
  since?: GQLDateTime;
  skip?: number;
}
export interface IssueToTimelineItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToTimelineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLockableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue';
}
export interface GQLReactableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'TeamDiscussion' | 'TeamDiscussionComment' | 'CommitComment' | 'IssueComment' | 'PullRequestReviewComment' | 'PullRequestReview';
}
export interface GQLReactionGroupTypeResolver<TParent = any> {
  content?: ReactionGroupToContentResolver<TParent>;
  createdAt?: ReactionGroupToCreatedAtResolver<TParent>;
  subject?: ReactionGroupToSubjectResolver<TParent>;
  users?: ReactionGroupToUsersResolver<TParent>;
  viewerHasReacted?: ReactionGroupToViewerHasReactedResolver<TParent>;
}

export interface ReactionGroupToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ReactionGroupToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReactionGroupToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToViewerHasReactedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactingUserConnectionTypeResolver<TParent = any> {
  edges?: ReactingUserConnectionToEdgesResolver<TParent>;
  nodes?: ReactingUserConnectionToNodesResolver<TParent>;
  pageInfo?: ReactingUserConnectionToPageInfoResolver<TParent>;
  totalCount?: ReactingUserConnectionToTotalCountResolver<TParent>;
}

export interface ReactingUserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactingUserEdgeTypeResolver<TParent = any> {
  cursor?: ReactingUserEdgeToCursorResolver<TParent>;
  node?: ReactingUserEdgeToNodeResolver<TParent>;
  reactedAt?: ReactingUserEdgeToReactedAtResolver<TParent>;
}

export interface ReactingUserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeToReactedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactionConnectionTypeResolver<TParent = any> {
  edges?: ReactionConnectionToEdgesResolver<TParent>;
  nodes?: ReactionConnectionToNodesResolver<TParent>;
  pageInfo?: ReactionConnectionToPageInfoResolver<TParent>;
  totalCount?: ReactionConnectionToTotalCountResolver<TParent>;
  viewerHasReacted?: ReactionConnectionToViewerHasReactedResolver<TParent>;
}

export interface ReactionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToViewerHasReactedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactionEdgeTypeResolver<TParent = any> {
  cursor?: ReactionEdgeToCursorResolver<TParent>;
  node?: ReactionEdgeToNodeResolver<TParent>;
}

export interface ReactionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReactionTypeResolver<TParent = any> {
  content?: ReactionToContentResolver<TParent>;
  createdAt?: ReactionToCreatedAtResolver<TParent>;
  databaseId?: ReactionToDatabaseIdResolver<TParent>;
  id?: ReactionToIdResolver<TParent>;
  reactable?: ReactionToReactableResolver<TParent>;
  user?: ReactionToUserResolver<TParent>;
}

export interface ReactionToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToReactableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'CommitComment' | 'RepositoryVulnerabilityAlert' | 'IssueComment' | 'PullRequestReviewComment' | 'PullRequestReview' | 'CommitCommentThread' | 'PullRequestCommitCommentThread';
}
export interface GQLRepositoryTypeResolver<TParent = any> {
  assignableUsers?: RepositoryToAssignableUsersResolver<TParent>;
  branchProtectionRules?: RepositoryToBranchProtectionRulesResolver<TParent>;
  codeOfConduct?: RepositoryToCodeOfConductResolver<TParent>;
  collaborators?: RepositoryToCollaboratorsResolver<TParent>;
  commitComments?: RepositoryToCommitCommentsResolver<TParent>;
  createdAt?: RepositoryToCreatedAtResolver<TParent>;
  databaseId?: RepositoryToDatabaseIdResolver<TParent>;
  defaultBranchRef?: RepositoryToDefaultBranchRefResolver<TParent>;
  deleteBranchOnMerge?: RepositoryToDeleteBranchOnMergeResolver<TParent>;
  deployKeys?: RepositoryToDeployKeysResolver<TParent>;
  deployments?: RepositoryToDeploymentsResolver<TParent>;
  description?: RepositoryToDescriptionResolver<TParent>;
  descriptionHTML?: RepositoryToDescriptionHTMLResolver<TParent>;
  diskUsage?: RepositoryToDiskUsageResolver<TParent>;
  forkCount?: RepositoryToForkCountResolver<TParent>;
  forks?: RepositoryToForksResolver<TParent>;
  fundingLinks?: RepositoryToFundingLinksResolver<TParent>;
  hasIssuesEnabled?: RepositoryToHasIssuesEnabledResolver<TParent>;
  hasProjectsEnabled?: RepositoryToHasProjectsEnabledResolver<TParent>;
  hasWikiEnabled?: RepositoryToHasWikiEnabledResolver<TParent>;
  homepageUrl?: RepositoryToHomepageUrlResolver<TParent>;
  id?: RepositoryToIdResolver<TParent>;
  isArchived?: RepositoryToIsArchivedResolver<TParent>;
  isDisabled?: RepositoryToIsDisabledResolver<TParent>;
  isFork?: RepositoryToIsForkResolver<TParent>;
  isLocked?: RepositoryToIsLockedResolver<TParent>;
  isMirror?: RepositoryToIsMirrorResolver<TParent>;
  isPrivate?: RepositoryToIsPrivateResolver<TParent>;
  isTemplate?: RepositoryToIsTemplateResolver<TParent>;
  issue?: RepositoryToIssueResolver<TParent>;
  issueOrPullRequest?: RepositoryToIssueOrPullRequestResolver<TParent>;
  issues?: RepositoryToIssuesResolver<TParent>;
  label?: RepositoryToLabelResolver<TParent>;
  labels?: RepositoryToLabelsResolver<TParent>;
  languages?: RepositoryToLanguagesResolver<TParent>;
  licenseInfo?: RepositoryToLicenseInfoResolver<TParent>;
  lockReason?: RepositoryToLockReasonResolver<TParent>;
  mentionableUsers?: RepositoryToMentionableUsersResolver<TParent>;
  mergeCommitAllowed?: RepositoryToMergeCommitAllowedResolver<TParent>;
  milestone?: RepositoryToMilestoneResolver<TParent>;
  milestones?: RepositoryToMilestonesResolver<TParent>;
  mirrorUrl?: RepositoryToMirrorUrlResolver<TParent>;
  name?: RepositoryToNameResolver<TParent>;
  nameWithOwner?: RepositoryToNameWithOwnerResolver<TParent>;
  object?: RepositoryToObjectResolver<TParent>;
  openGraphImageUrl?: RepositoryToOpenGraphImageUrlResolver<TParent>;
  owner?: RepositoryToOwnerResolver<TParent>;
  packages?: RepositoryToPackagesResolver<TParent>;
  parent?: RepositoryToParentResolver<TParent>;
  primaryLanguage?: RepositoryToPrimaryLanguageResolver<TParent>;
  project?: RepositoryToProjectResolver<TParent>;
  projects?: RepositoryToProjectsResolver<TParent>;
  projectsResourcePath?: RepositoryToProjectsResourcePathResolver<TParent>;
  projectsUrl?: RepositoryToProjectsUrlResolver<TParent>;
  pullRequest?: RepositoryToPullRequestResolver<TParent>;
  pullRequests?: RepositoryToPullRequestsResolver<TParent>;
  pushedAt?: RepositoryToPushedAtResolver<TParent>;
  rebaseMergeAllowed?: RepositoryToRebaseMergeAllowedResolver<TParent>;
  ref?: RepositoryToRefResolver<TParent>;
  refs?: RepositoryToRefsResolver<TParent>;
  release?: RepositoryToReleaseResolver<TParent>;
  releases?: RepositoryToReleasesResolver<TParent>;
  repositoryTopics?: RepositoryToRepositoryTopicsResolver<TParent>;
  resourcePath?: RepositoryToResourcePathResolver<TParent>;
  shortDescriptionHTML?: RepositoryToShortDescriptionHTMLResolver<TParent>;
  squashMergeAllowed?: RepositoryToSquashMergeAllowedResolver<TParent>;
  sshUrl?: RepositoryToSshUrlResolver<TParent>;
  stargazers?: RepositoryToStargazersResolver<TParent>;
  submodules?: RepositoryToSubmodulesResolver<TParent>;
  tempCloneToken?: RepositoryToTempCloneTokenResolver<TParent>;
  templateRepository?: RepositoryToTemplateRepositoryResolver<TParent>;
  updatedAt?: RepositoryToUpdatedAtResolver<TParent>;
  url?: RepositoryToUrlResolver<TParent>;
  usesCustomOpenGraphImage?: RepositoryToUsesCustomOpenGraphImageResolver<TParent>;
  viewerCanAdminister?: RepositoryToViewerCanAdministerResolver<TParent>;
  viewerCanCreateProjects?: RepositoryToViewerCanCreateProjectsResolver<TParent>;
  viewerCanSubscribe?: RepositoryToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdateTopics?: RepositoryToViewerCanUpdateTopicsResolver<TParent>;
  viewerHasStarred?: RepositoryToViewerHasStarredResolver<TParent>;
  viewerPermission?: RepositoryToViewerPermissionResolver<TParent>;
  viewerSubscription?: RepositoryToViewerSubscriptionResolver<TParent>;
  vulnerabilityAlerts?: RepositoryToVulnerabilityAlertsResolver<TParent>;
  watchers?: RepositoryToWatchersResolver<TParent>;
}

export interface RepositoryToAssignableUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface RepositoryToAssignableUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToAssignableUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToBranchProtectionRulesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToBranchProtectionRulesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToBranchProtectionRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCodeOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCollaboratorsArgs {
  affiliation?: GQLCollaboratorAffiliation;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface RepositoryToCollaboratorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToCollaboratorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCommitCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToCommitCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToCommitCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDefaultBranchRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeleteBranchOnMergeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeployKeysArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToDeployKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToDeployKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeploymentsArgs {
  after?: string;
  before?: string;
  environments?: Array<string>;
  first?: number;
  last?: number;
  orderBy?: GQLDeploymentOrder;
}
export interface RepositoryToDeploymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDiskUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToForkCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToForksArgs {
  affiliations?: Array<GQLRepositoryAffiliation | null>;
  after?: string;
  before?: string;
  first?: number;
  isLocked?: boolean;
  last?: number;
  orderBy?: GQLRepositoryOrder;
  ownerAffiliations?: Array<GQLRepositoryAffiliation | null>;
  privacy?: GQLRepositoryPrivacy;
}
export interface RepositoryToForksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToForksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToFundingLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasIssuesEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasProjectsEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasWikiEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHomepageUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsDisabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsForkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsMirrorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsPrivateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsTemplateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssueArgs {
  number: number;
}
export interface RepositoryToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssueOrPullRequestArgs {
  number: number;
}
export interface RepositoryToIssueOrPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssueOrPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssuesArgs {
  after?: string;
  before?: string;
  filterBy?: GQLIssueFilters;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface RepositoryToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLabelArgs {
  name: string;
}
export interface RepositoryToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLabelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLLabelOrder;
  query?: string;
}
export interface RepositoryToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLanguagesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLLanguageOrder;
}
export interface RepositoryToLanguagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLanguagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLicenseInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMentionableUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface RepositoryToMentionableUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMentionableUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMergeCommitAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMilestoneArgs {
  number: number;
}
export interface RepositoryToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMilestoneArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMilestonesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLMilestoneOrder;
  states?: Array<GQLMilestoneState>;
}
export interface RepositoryToMilestonesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMilestonesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMirrorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToNameWithOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToObjectArgs {
  expression?: string;
  oid?: GQLGitObjectID;
}
export interface RepositoryToObjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToObjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToOpenGraphImageUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPackagesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  names?: Array<string | null>;
  orderBy?: GQLPackageOrder;
  packageType?: GQLPackageType;
  repositoryId?: string;
}
export interface RepositoryToPackagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPackagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPrimaryLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectArgs {
  number: number;
}
export interface RepositoryToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLProjectOrder;
  search?: string;
  states?: Array<GQLProjectState>;
}
export interface RepositoryToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPullRequestArgs {
  number: number;
}
export interface RepositoryToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface RepositoryToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPushedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRebaseMergeAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRefArgs {
  qualifiedName: string;
}
export interface RepositoryToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRefArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRefsArgs {
  after?: string;
  before?: string;
  direction?: GQLOrderDirection;
  first?: number;
  last?: number;
  orderBy?: GQLRefOrder;
  query?: string;
  refPrefix: string;
}
export interface RepositoryToRefsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRefsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToReleaseArgs {
  tagName: string;
}
export interface RepositoryToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToReleaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToReleasesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLReleaseOrder;
}
export interface RepositoryToReleasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToReleasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRepositoryTopicsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToRepositoryTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRepositoryTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToShortDescriptionHTMLArgs {
  limit?: number;
}
export interface RepositoryToShortDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToShortDescriptionHTMLArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSquashMergeAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSshUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
}
export interface RepositoryToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSubmodulesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToSubmodulesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToSubmodulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToTempCloneTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToTemplateRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUsesCustomOpenGraphImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanUpdateTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToVulnerabilityAlertsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToVulnerabilityAlertsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToVulnerabilityAlertsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToWatchersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToWatchersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToWatchersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Repository';
}
export interface GQLProjectTypeResolver<TParent = any> {
  body?: ProjectToBodyResolver<TParent>;
  bodyHTML?: ProjectToBodyHTMLResolver<TParent>;
  closed?: ProjectToClosedResolver<TParent>;
  closedAt?: ProjectToClosedAtResolver<TParent>;
  columns?: ProjectToColumnsResolver<TParent>;
  createdAt?: ProjectToCreatedAtResolver<TParent>;
  creator?: ProjectToCreatorResolver<TParent>;
  databaseId?: ProjectToDatabaseIdResolver<TParent>;
  id?: ProjectToIdResolver<TParent>;
  name?: ProjectToNameResolver<TParent>;
  number?: ProjectToNumberResolver<TParent>;
  owner?: ProjectToOwnerResolver<TParent>;
  pendingCards?: ProjectToPendingCardsResolver<TParent>;
  resourcePath?: ProjectToResourcePathResolver<TParent>;
  state?: ProjectToStateResolver<TParent>;
  updatedAt?: ProjectToUpdatedAtResolver<TParent>;
  url?: ProjectToUrlResolver<TParent>;
  viewerCanUpdate?: ProjectToViewerCanUpdateResolver<TParent>;
}

export interface ProjectToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToColumnsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectToColumnsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectToColumnsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToPendingCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectToPendingCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectToPendingCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdatableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'Project' | 'TeamDiscussion' | 'TeamDiscussionComment' | 'CommitComment' | 'IssueComment' | 'PullRequestReviewComment' | 'PullRequestReview' | 'GistComment';
}
export interface GQLProjectColumnConnectionTypeResolver<TParent = any> {
  edges?: ProjectColumnConnectionToEdgesResolver<TParent>;
  nodes?: ProjectColumnConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectColumnConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectColumnConnectionToTotalCountResolver<TParent>;
}

export interface ProjectColumnConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectColumnEdgeTypeResolver<TParent = any> {
  cursor?: ProjectColumnEdgeToCursorResolver<TParent>;
  node?: ProjectColumnEdgeToNodeResolver<TParent>;
}

export interface ProjectColumnEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectColumnTypeResolver<TParent = any> {
  cards?: ProjectColumnToCardsResolver<TParent>;
  createdAt?: ProjectColumnToCreatedAtResolver<TParent>;
  databaseId?: ProjectColumnToDatabaseIdResolver<TParent>;
  id?: ProjectColumnToIdResolver<TParent>;
  name?: ProjectColumnToNameResolver<TParent>;
  project?: ProjectColumnToProjectResolver<TParent>;
  purpose?: ProjectColumnToPurposeResolver<TParent>;
  resourcePath?: ProjectColumnToResourcePathResolver<TParent>;
  updatedAt?: ProjectColumnToUpdatedAtResolver<TParent>;
  url?: ProjectColumnToUrlResolver<TParent>;
}

export interface ProjectColumnToCardsArgs {
  after?: string;
  archivedStates?: Array<GQLProjectCardArchivedState | null>;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectColumnToCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectColumnToCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToPurposeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardConnectionTypeResolver<TParent = any> {
  edges?: ProjectCardConnectionToEdgesResolver<TParent>;
  nodes?: ProjectCardConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectCardConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectCardConnectionToTotalCountResolver<TParent>;
}

export interface ProjectCardConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardEdgeTypeResolver<TParent = any> {
  cursor?: ProjectCardEdgeToCursorResolver<TParent>;
  node?: ProjectCardEdgeToNodeResolver<TParent>;
}

export interface ProjectCardEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardTypeResolver<TParent = any> {
  column?: ProjectCardToColumnResolver<TParent>;
  content?: ProjectCardToContentResolver<TParent>;
  createdAt?: ProjectCardToCreatedAtResolver<TParent>;
  creator?: ProjectCardToCreatorResolver<TParent>;
  databaseId?: ProjectCardToDatabaseIdResolver<TParent>;
  id?: ProjectCardToIdResolver<TParent>;
  isArchived?: ProjectCardToIsArchivedResolver<TParent>;
  note?: ProjectCardToNoteResolver<TParent>;
  project?: ProjectCardToProjectResolver<TParent>;
  resourcePath?: ProjectCardToResourcePathResolver<TParent>;
  state?: ProjectCardToStateResolver<TParent>;
  updatedAt?: ProjectCardToUpdatedAtResolver<TParent>;
  url?: ProjectCardToUrlResolver<TParent>;
}

export interface ProjectCardToColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToNoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectCardItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLProjectConnectionTypeResolver<TParent = any> {
  edges?: ProjectConnectionToEdgesResolver<TParent>;
  nodes?: ProjectConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectConnectionToTotalCountResolver<TParent>;
}

export interface ProjectConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProjectEdgeTypeResolver<TParent = any> {
  cursor?: ProjectEdgeToCursorResolver<TParent>;
  node?: ProjectEdgeToNodeResolver<TParent>;
}

export interface ProjectEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInfoTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository';
}
export interface GQLLicenseTypeResolver<TParent = any> {
  body?: LicenseToBodyResolver<TParent>;
  conditions?: LicenseToConditionsResolver<TParent>;
  description?: LicenseToDescriptionResolver<TParent>;
  featured?: LicenseToFeaturedResolver<TParent>;
  hidden?: LicenseToHiddenResolver<TParent>;
  id?: LicenseToIdResolver<TParent>;
  implementation?: LicenseToImplementationResolver<TParent>;
  key?: LicenseToKeyResolver<TParent>;
  limitations?: LicenseToLimitationsResolver<TParent>;
  name?: LicenseToNameResolver<TParent>;
  nickname?: LicenseToNicknameResolver<TParent>;
  permissions?: LicenseToPermissionsResolver<TParent>;
  pseudoLicense?: LicenseToPseudoLicenseResolver<TParent>;
  spdxId?: LicenseToSpdxIdResolver<TParent>;
  url?: LicenseToUrlResolver<TParent>;
}

export interface LicenseToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToConditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToFeaturedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToHiddenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToImplementationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToLimitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToNicknameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToPseudoLicenseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToSpdxIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLicenseRuleTypeResolver<TParent = any> {
  description?: LicenseRuleToDescriptionResolver<TParent>;
  key?: LicenseRuleToKeyResolver<TParent>;
  label?: LicenseRuleToLabelResolver<TParent>;
}

export interface LicenseRuleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface GQLRepositoryConnectionTypeResolver<TParent = any> {
  edges?: RepositoryConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryConnectionToTotalCountResolver<TParent>;
  totalDiskUsage?: RepositoryConnectionToTotalDiskUsageResolver<TParent>;
}

export interface RepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToTotalDiskUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryEdgeToCursorResolver<TParent>;
  node?: RepositoryEdgeToNodeResolver<TParent>;
}

export interface RepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStarrableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository' | 'Topic' | 'Gist';
}
export interface GQLStargazerConnectionTypeResolver<TParent = any> {
  edges?: StargazerConnectionToEdgesResolver<TParent>;
  nodes?: StargazerConnectionToNodesResolver<TParent>;
  pageInfo?: StargazerConnectionToPageInfoResolver<TParent>;
  totalCount?: StargazerConnectionToTotalCountResolver<TParent>;
}

export interface StargazerConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStargazerEdgeTypeResolver<TParent = any> {
  cursor?: StargazerEdgeToCursorResolver<TParent>;
  node?: StargazerEdgeToNodeResolver<TParent>;
  starredAt?: StargazerEdgeToStarredAtResolver<TParent>;
}

export interface StargazerEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeToStarredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscribableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'Repository' | 'Team' | 'TeamDiscussion' | 'Commit';
}
export interface GQLBranchProtectionRuleConnectionTypeResolver<TParent = any> {
  edges?: BranchProtectionRuleConnectionToEdgesResolver<TParent>;
  nodes?: BranchProtectionRuleConnectionToNodesResolver<TParent>;
  pageInfo?: BranchProtectionRuleConnectionToPageInfoResolver<TParent>;
  totalCount?: BranchProtectionRuleConnectionToTotalCountResolver<TParent>;
}

export interface BranchProtectionRuleConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleEdgeTypeResolver<TParent = any> {
  cursor?: BranchProtectionRuleEdgeToCursorResolver<TParent>;
  node?: BranchProtectionRuleEdgeToNodeResolver<TParent>;
}

export interface BranchProtectionRuleEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleTypeResolver<TParent = any> {
  branchProtectionRuleConflicts?: BranchProtectionRuleToBranchProtectionRuleConflictsResolver<TParent>;
  creator?: BranchProtectionRuleToCreatorResolver<TParent>;
  databaseId?: BranchProtectionRuleToDatabaseIdResolver<TParent>;
  dismissesStaleReviews?: BranchProtectionRuleToDismissesStaleReviewsResolver<TParent>;
  id?: BranchProtectionRuleToIdResolver<TParent>;
  isAdminEnforced?: BranchProtectionRuleToIsAdminEnforcedResolver<TParent>;
  matchingRefs?: BranchProtectionRuleToMatchingRefsResolver<TParent>;
  pattern?: BranchProtectionRuleToPatternResolver<TParent>;
  pushAllowances?: BranchProtectionRuleToPushAllowancesResolver<TParent>;
  repository?: BranchProtectionRuleToRepositoryResolver<TParent>;
  requiredApprovingReviewCount?: BranchProtectionRuleToRequiredApprovingReviewCountResolver<TParent>;
  requiredStatusCheckContexts?: BranchProtectionRuleToRequiredStatusCheckContextsResolver<TParent>;
  requiresApprovingReviews?: BranchProtectionRuleToRequiresApprovingReviewsResolver<TParent>;
  requiresCodeOwnerReviews?: BranchProtectionRuleToRequiresCodeOwnerReviewsResolver<TParent>;
  requiresCommitSignatures?: BranchProtectionRuleToRequiresCommitSignaturesResolver<TParent>;
  requiresStatusChecks?: BranchProtectionRuleToRequiresStatusChecksResolver<TParent>;
  requiresStrictStatusChecks?: BranchProtectionRuleToRequiresStrictStatusChecksResolver<TParent>;
  restrictsPushes?: BranchProtectionRuleToRestrictsPushesResolver<TParent>;
  restrictsReviewDismissals?: BranchProtectionRuleToRestrictsReviewDismissalsResolver<TParent>;
  reviewDismissalAllowances?: BranchProtectionRuleToReviewDismissalAllowancesResolver<TParent>;
}

export interface BranchProtectionRuleToBranchProtectionRuleConflictsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToBranchProtectionRuleConflictsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToBranchProtectionRuleConflictsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToDismissesStaleReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToIsAdminEnforcedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToMatchingRefsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface BranchProtectionRuleToMatchingRefsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToMatchingRefsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToPatternResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToPushAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToPushAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToPushAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiredApprovingReviewCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiredStatusCheckContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresApprovingReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresCodeOwnerReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresCommitSignaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresStrictStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRestrictsPushesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRestrictsReviewDismissalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToReviewDismissalAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToReviewDismissalAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToReviewDismissalAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleConflictConnectionTypeResolver<TParent = any> {
  edges?: BranchProtectionRuleConflictConnectionToEdgesResolver<TParent>;
  nodes?: BranchProtectionRuleConflictConnectionToNodesResolver<TParent>;
  pageInfo?: BranchProtectionRuleConflictConnectionToPageInfoResolver<TParent>;
  totalCount?: BranchProtectionRuleConflictConnectionToTotalCountResolver<TParent>;
}

export interface BranchProtectionRuleConflictConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleConflictEdgeTypeResolver<TParent = any> {
  cursor?: BranchProtectionRuleConflictEdgeToCursorResolver<TParent>;
  node?: BranchProtectionRuleConflictEdgeToNodeResolver<TParent>;
}

export interface BranchProtectionRuleConflictEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBranchProtectionRuleConflictTypeResolver<TParent = any> {
  branchProtectionRule?: BranchProtectionRuleConflictToBranchProtectionRuleResolver<TParent>;
  conflictingBranchProtectionRule?: BranchProtectionRuleConflictToConflictingBranchProtectionRuleResolver<TParent>;
  ref?: BranchProtectionRuleConflictToRefResolver<TParent>;
}

export interface BranchProtectionRuleConflictToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictToConflictingBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefConnectionTypeResolver<TParent = any> {
  edges?: RefConnectionToEdgesResolver<TParent>;
  nodes?: RefConnectionToNodesResolver<TParent>;
  pageInfo?: RefConnectionToPageInfoResolver<TParent>;
  totalCount?: RefConnectionToTotalCountResolver<TParent>;
}

export interface RefConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefEdgeTypeResolver<TParent = any> {
  cursor?: RefEdgeToCursorResolver<TParent>;
  node?: RefEdgeToNodeResolver<TParent>;
}

export interface RefEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceConnectionTypeResolver<TParent = any> {
  edges?: PushAllowanceConnectionToEdgesResolver<TParent>;
  nodes?: PushAllowanceConnectionToNodesResolver<TParent>;
  pageInfo?: PushAllowanceConnectionToPageInfoResolver<TParent>;
  totalCount?: PushAllowanceConnectionToTotalCountResolver<TParent>;
}

export interface PushAllowanceConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceEdgeTypeResolver<TParent = any> {
  cursor?: PushAllowanceEdgeToCursorResolver<TParent>;
  node?: PushAllowanceEdgeToNodeResolver<TParent>;
}

export interface PushAllowanceEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceTypeResolver<TParent = any> {
  actor?: PushAllowanceToActorResolver<TParent>;
  branchProtectionRule?: PushAllowanceToBranchProtectionRuleResolver<TParent>;
  id?: PushAllowanceToIdResolver<TParent>;
}

export interface PushAllowanceToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPushAllowanceActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'App' | 'Team' | 'User';
}
export interface GQLAppTypeResolver<TParent = any> {
  createdAt?: AppToCreatedAtResolver<TParent>;
  databaseId?: AppToDatabaseIdResolver<TParent>;
  description?: AppToDescriptionResolver<TParent>;
  id?: AppToIdResolver<TParent>;
  logoBackgroundColor?: AppToLogoBackgroundColorResolver<TParent>;
  logoUrl?: AppToLogoUrlResolver<TParent>;
  name?: AppToNameResolver<TParent>;
  slug?: AppToSlugResolver<TParent>;
  updatedAt?: AppToUpdatedAtResolver<TParent>;
  url?: AppToUrlResolver<TParent>;
}

export interface AppToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToLogoBackgroundColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToLogoUrlArgs {
  size?: number;
}
export interface AppToLogoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: AppToLogoUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamTypeResolver<TParent = any> {
  ancestors?: TeamToAncestorsResolver<TParent>;
  avatarUrl?: TeamToAvatarUrlResolver<TParent>;
  childTeams?: TeamToChildTeamsResolver<TParent>;
  combinedSlug?: TeamToCombinedSlugResolver<TParent>;
  createdAt?: TeamToCreatedAtResolver<TParent>;
  databaseId?: TeamToDatabaseIdResolver<TParent>;
  description?: TeamToDescriptionResolver<TParent>;
  discussion?: TeamToDiscussionResolver<TParent>;
  discussions?: TeamToDiscussionsResolver<TParent>;
  discussionsResourcePath?: TeamToDiscussionsResourcePathResolver<TParent>;
  discussionsUrl?: TeamToDiscussionsUrlResolver<TParent>;
  editTeamResourcePath?: TeamToEditTeamResourcePathResolver<TParent>;
  editTeamUrl?: TeamToEditTeamUrlResolver<TParent>;
  id?: TeamToIdResolver<TParent>;
  invitations?: TeamToInvitationsResolver<TParent>;
  memberStatuses?: TeamToMemberStatusesResolver<TParent>;
  members?: TeamToMembersResolver<TParent>;
  membersResourcePath?: TeamToMembersResourcePathResolver<TParent>;
  membersUrl?: TeamToMembersUrlResolver<TParent>;
  name?: TeamToNameResolver<TParent>;
  newTeamResourcePath?: TeamToNewTeamResourcePathResolver<TParent>;
  newTeamUrl?: TeamToNewTeamUrlResolver<TParent>;
  organization?: TeamToOrganizationResolver<TParent>;
  parentTeam?: TeamToParentTeamResolver<TParent>;
  privacy?: TeamToPrivacyResolver<TParent>;
  repositories?: TeamToRepositoriesResolver<TParent>;
  repositoriesResourcePath?: TeamToRepositoriesResourcePathResolver<TParent>;
  repositoriesUrl?: TeamToRepositoriesUrlResolver<TParent>;
  resourcePath?: TeamToResourcePathResolver<TParent>;
  slug?: TeamToSlugResolver<TParent>;
  teamsResourcePath?: TeamToTeamsResourcePathResolver<TParent>;
  teamsUrl?: TeamToTeamsUrlResolver<TParent>;
  updatedAt?: TeamToUpdatedAtResolver<TParent>;
  url?: TeamToUrlResolver<TParent>;
  viewerCanAdminister?: TeamToViewerCanAdministerResolver<TParent>;
  viewerCanSubscribe?: TeamToViewerCanSubscribeResolver<TParent>;
  viewerSubscription?: TeamToViewerSubscriptionResolver<TParent>;
}

export interface TeamToAncestorsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToAncestorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToAncestorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToAvatarUrlArgs {
  size?: number;
}
export interface TeamToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToChildTeamsArgs {
  after?: string;
  before?: string;
  first?: number;
  immediateOnly?: boolean;
  last?: number;
  orderBy?: GQLTeamOrder;
  userLogins?: Array<string>;
}
export interface TeamToChildTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToChildTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToCombinedSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDiscussionArgs {
  number: number;
}
export interface TeamToDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToDiscussionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDiscussionsArgs {
  after?: string;
  before?: string;
  first?: number;
  isPinned?: boolean;
  last?: number;
  orderBy?: GQLTeamDiscussionOrder;
}
export interface TeamToDiscussionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToDiscussionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDiscussionsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDiscussionsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToEditTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToEditTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToInvitationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMemberStatusesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLUserStatusOrder;
}
export interface TeamToMemberStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToMemberStatusesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  membership?: GQLTeamMembershipType;
  orderBy?: GQLTeamMemberOrder;
  query?: string;
  role?: GQLTeamMemberRole;
}
export interface TeamToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNewTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNewTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToParentTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToPrivacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLTeamRepositoryOrder;
  query?: string;
}
export interface TeamToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamConnectionTypeResolver<TParent = any> {
  edges?: TeamConnectionToEdgesResolver<TParent>;
  nodes?: TeamConnectionToNodesResolver<TParent>;
  pageInfo?: TeamConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamConnectionToTotalCountResolver<TParent>;
}

export interface TeamConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamEdgeTypeResolver<TParent = any> {
  cursor?: TeamEdgeToCursorResolver<TParent>;
  node?: TeamEdgeToNodeResolver<TParent>;
}

export interface TeamEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamDiscussionTypeResolver<TParent = any> {
  author?: TeamDiscussionToAuthorResolver<TParent>;
  authorAssociation?: TeamDiscussionToAuthorAssociationResolver<TParent>;
  body?: TeamDiscussionToBodyResolver<TParent>;
  bodyHTML?: TeamDiscussionToBodyHTMLResolver<TParent>;
  bodyText?: TeamDiscussionToBodyTextResolver<TParent>;
  bodyVersion?: TeamDiscussionToBodyVersionResolver<TParent>;
  comments?: TeamDiscussionToCommentsResolver<TParent>;
  commentsResourcePath?: TeamDiscussionToCommentsResourcePathResolver<TParent>;
  commentsUrl?: TeamDiscussionToCommentsUrlResolver<TParent>;
  createdAt?: TeamDiscussionToCreatedAtResolver<TParent>;
  createdViaEmail?: TeamDiscussionToCreatedViaEmailResolver<TParent>;
  databaseId?: TeamDiscussionToDatabaseIdResolver<TParent>;
  editor?: TeamDiscussionToEditorResolver<TParent>;
  id?: TeamDiscussionToIdResolver<TParent>;
  includesCreatedEdit?: TeamDiscussionToIncludesCreatedEditResolver<TParent>;
  isPinned?: TeamDiscussionToIsPinnedResolver<TParent>;
  isPrivate?: TeamDiscussionToIsPrivateResolver<TParent>;
  lastEditedAt?: TeamDiscussionToLastEditedAtResolver<TParent>;
  number?: TeamDiscussionToNumberResolver<TParent>;
  publishedAt?: TeamDiscussionToPublishedAtResolver<TParent>;
  reactionGroups?: TeamDiscussionToReactionGroupsResolver<TParent>;
  reactions?: TeamDiscussionToReactionsResolver<TParent>;
  resourcePath?: TeamDiscussionToResourcePathResolver<TParent>;
  team?: TeamDiscussionToTeamResolver<TParent>;
  title?: TeamDiscussionToTitleResolver<TParent>;
  updatedAt?: TeamDiscussionToUpdatedAtResolver<TParent>;
  url?: TeamDiscussionToUrlResolver<TParent>;
  userContentEdits?: TeamDiscussionToUserContentEditsResolver<TParent>;
  viewerCanDelete?: TeamDiscussionToViewerCanDeleteResolver<TParent>;
  viewerCanPin?: TeamDiscussionToViewerCanPinResolver<TParent>;
  viewerCanReact?: TeamDiscussionToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: TeamDiscussionToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: TeamDiscussionToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: TeamDiscussionToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: TeamDiscussionToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: TeamDiscussionToViewerSubscriptionResolver<TParent>;
}

export interface TeamDiscussionToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToBodyVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  fromComment?: number;
  last?: number;
  orderBy?: GQLTeamDiscussionCommentOrder;
}
export interface TeamDiscussionToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamDiscussionToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToCommentsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToCommentsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToIsPinnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToIsPrivateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface TeamDiscussionToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamDiscussionToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamDiscussionToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamDiscussionToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerCanPinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeletableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'TeamDiscussion' | 'TeamDiscussionComment' | 'CommitComment' | 'IssueComment' | 'PullRequestReviewComment' | 'PullRequestReview' | 'GistComment';
}
export interface GQLUpdatableCommentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequest' | 'Issue' | 'TeamDiscussion' | 'TeamDiscussionComment' | 'CommitComment' | 'IssueComment' | 'PullRequestReviewComment' | 'PullRequestReview' | 'GistComment';
}
export interface GQLTeamDiscussionCommentConnectionTypeResolver<TParent = any> {
  edges?: TeamDiscussionCommentConnectionToEdgesResolver<TParent>;
  nodes?: TeamDiscussionCommentConnectionToNodesResolver<TParent>;
  pageInfo?: TeamDiscussionCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamDiscussionCommentConnectionToTotalCountResolver<TParent>;
}

export interface TeamDiscussionCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamDiscussionCommentEdgeTypeResolver<TParent = any> {
  cursor?: TeamDiscussionCommentEdgeToCursorResolver<TParent>;
  node?: TeamDiscussionCommentEdgeToNodeResolver<TParent>;
}

export interface TeamDiscussionCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamDiscussionCommentTypeResolver<TParent = any> {
  author?: TeamDiscussionCommentToAuthorResolver<TParent>;
  authorAssociation?: TeamDiscussionCommentToAuthorAssociationResolver<TParent>;
  body?: TeamDiscussionCommentToBodyResolver<TParent>;
  bodyHTML?: TeamDiscussionCommentToBodyHTMLResolver<TParent>;
  bodyText?: TeamDiscussionCommentToBodyTextResolver<TParent>;
  bodyVersion?: TeamDiscussionCommentToBodyVersionResolver<TParent>;
  createdAt?: TeamDiscussionCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: TeamDiscussionCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: TeamDiscussionCommentToDatabaseIdResolver<TParent>;
  discussion?: TeamDiscussionCommentToDiscussionResolver<TParent>;
  editor?: TeamDiscussionCommentToEditorResolver<TParent>;
  id?: TeamDiscussionCommentToIdResolver<TParent>;
  includesCreatedEdit?: TeamDiscussionCommentToIncludesCreatedEditResolver<TParent>;
  lastEditedAt?: TeamDiscussionCommentToLastEditedAtResolver<TParent>;
  number?: TeamDiscussionCommentToNumberResolver<TParent>;
  publishedAt?: TeamDiscussionCommentToPublishedAtResolver<TParent>;
  reactionGroups?: TeamDiscussionCommentToReactionGroupsResolver<TParent>;
  reactions?: TeamDiscussionCommentToReactionsResolver<TParent>;
  resourcePath?: TeamDiscussionCommentToResourcePathResolver<TParent>;
  updatedAt?: TeamDiscussionCommentToUpdatedAtResolver<TParent>;
  url?: TeamDiscussionCommentToUrlResolver<TParent>;
  userContentEdits?: TeamDiscussionCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: TeamDiscussionCommentToViewerCanDeleteResolver<TParent>;
  viewerCanReact?: TeamDiscussionCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: TeamDiscussionCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: TeamDiscussionCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: TeamDiscussionCommentToViewerDidAuthorResolver<TParent>;
}

export interface TeamDiscussionCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToBodyVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface TeamDiscussionCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamDiscussionCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamDiscussionCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamDiscussionCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamDiscussionConnectionTypeResolver<TParent = any> {
  edges?: TeamDiscussionConnectionToEdgesResolver<TParent>;
  nodes?: TeamDiscussionConnectionToNodesResolver<TParent>;
  pageInfo?: TeamDiscussionConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamDiscussionConnectionToTotalCountResolver<TParent>;
}

export interface TeamDiscussionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamDiscussionEdgeTypeResolver<TParent = any> {
  cursor?: TeamDiscussionEdgeToCursorResolver<TParent>;
  node?: TeamDiscussionEdgeToNodeResolver<TParent>;
}

export interface TeamDiscussionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamDiscussionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationInvitationConnectionTypeResolver<TParent = any> {
  edges?: OrganizationInvitationConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationInvitationConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationInvitationConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationInvitationConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationInvitationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationInvitationEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationInvitationEdgeToCursorResolver<TParent>;
  node?: OrganizationInvitationEdgeToNodeResolver<TParent>;
}

export interface OrganizationInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationInvitationTypeResolver<TParent = any> {
  createdAt?: OrganizationInvitationToCreatedAtResolver<TParent>;
  email?: OrganizationInvitationToEmailResolver<TParent>;
  id?: OrganizationInvitationToIdResolver<TParent>;
  invitationType?: OrganizationInvitationToInvitationTypeResolver<TParent>;
  invitee?: OrganizationInvitationToInviteeResolver<TParent>;
  inviter?: OrganizationInvitationToInviterResolver<TParent>;
  organization?: OrganizationInvitationToOrganizationResolver<TParent>;
  role?: OrganizationInvitationToRoleResolver<TParent>;
}

export interface OrganizationInvitationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInvitationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamMemberConnectionTypeResolver<TParent = any> {
  edges?: TeamMemberConnectionToEdgesResolver<TParent>;
  nodes?: TeamMemberConnectionToNodesResolver<TParent>;
  pageInfo?: TeamMemberConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamMemberConnectionToTotalCountResolver<TParent>;
}

export interface TeamMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamMemberEdgeTypeResolver<TParent = any> {
  cursor?: TeamMemberEdgeToCursorResolver<TParent>;
  memberAccessResourcePath?: TeamMemberEdgeToMemberAccessResourcePathResolver<TParent>;
  memberAccessUrl?: TeamMemberEdgeToMemberAccessUrlResolver<TParent>;
  node?: TeamMemberEdgeToNodeResolver<TParent>;
  role?: TeamMemberEdgeToRoleResolver<TParent>;
}

export interface TeamMemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToMemberAccessResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToMemberAccessUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamRepositoryConnectionTypeResolver<TParent = any> {
  edges?: TeamRepositoryConnectionToEdgesResolver<TParent>;
  nodes?: TeamRepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: TeamRepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamRepositoryConnectionToTotalCountResolver<TParent>;
}

export interface TeamRepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: TeamRepositoryEdgeToCursorResolver<TParent>;
  node?: TeamRepositoryEdgeToNodeResolver<TParent>;
  permission?: TeamRepositoryEdgeToPermissionResolver<TParent>;
}

export interface TeamRepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceConnectionTypeResolver<TParent = any> {
  edges?: ReviewDismissalAllowanceConnectionToEdgesResolver<TParent>;
  nodes?: ReviewDismissalAllowanceConnectionToNodesResolver<TParent>;
  pageInfo?: ReviewDismissalAllowanceConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewDismissalAllowanceConnectionToTotalCountResolver<TParent>;
}

export interface ReviewDismissalAllowanceConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceEdgeTypeResolver<TParent = any> {
  cursor?: ReviewDismissalAllowanceEdgeToCursorResolver<TParent>;
  node?: ReviewDismissalAllowanceEdgeToNodeResolver<TParent>;
}

export interface ReviewDismissalAllowanceEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceTypeResolver<TParent = any> {
  actor?: ReviewDismissalAllowanceToActorResolver<TParent>;
  branchProtectionRule?: ReviewDismissalAllowanceToBranchProtectionRuleResolver<TParent>;
  id?: ReviewDismissalAllowanceToIdResolver<TParent>;
}

export interface ReviewDismissalAllowanceToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissalAllowanceActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Team' | 'User';
}
export interface GQLRepositoryCollaboratorConnectionTypeResolver<TParent = any> {
  edges?: RepositoryCollaboratorConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryCollaboratorConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryCollaboratorConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryCollaboratorConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryCollaboratorConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryCollaboratorEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryCollaboratorEdgeToCursorResolver<TParent>;
  node?: RepositoryCollaboratorEdgeToNodeResolver<TParent>;
  permission?: RepositoryCollaboratorEdgeToPermissionResolver<TParent>;
  permissionSources?: RepositoryCollaboratorEdgeToPermissionSourcesResolver<TParent>;
}

export interface RepositoryCollaboratorEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToPermissionSourcesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPermissionSourceTypeResolver<TParent = any> {
  organization?: PermissionSourceToOrganizationResolver<TParent>;
  permission?: PermissionSourceToPermissionResolver<TParent>;
  source?: PermissionSourceToSourceResolver<TParent>;
}

export interface PermissionSourceToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionSourceToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionSourceToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPermissionGranterTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Repository' | 'Team';
}
export interface GQLCommitCommentConnectionTypeResolver<TParent = any> {
  edges?: CommitCommentConnectionToEdgesResolver<TParent>;
  nodes?: CommitCommentConnectionToNodesResolver<TParent>;
  pageInfo?: CommitCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitCommentConnectionToTotalCountResolver<TParent>;
}

export interface CommitCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitCommentEdgeTypeResolver<TParent = any> {
  cursor?: CommitCommentEdgeToCursorResolver<TParent>;
  node?: CommitCommentEdgeToNodeResolver<TParent>;
}

export interface CommitCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitCommentTypeResolver<TParent = any> {
  author?: CommitCommentToAuthorResolver<TParent>;
  authorAssociation?: CommitCommentToAuthorAssociationResolver<TParent>;
  body?: CommitCommentToBodyResolver<TParent>;
  bodyHTML?: CommitCommentToBodyHTMLResolver<TParent>;
  bodyText?: CommitCommentToBodyTextResolver<TParent>;
  commit?: CommitCommentToCommitResolver<TParent>;
  createdAt?: CommitCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: CommitCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: CommitCommentToDatabaseIdResolver<TParent>;
  editor?: CommitCommentToEditorResolver<TParent>;
  id?: CommitCommentToIdResolver<TParent>;
  includesCreatedEdit?: CommitCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: CommitCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: CommitCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: CommitCommentToMinimizedReasonResolver<TParent>;
  path?: CommitCommentToPathResolver<TParent>;
  position?: CommitCommentToPositionResolver<TParent>;
  publishedAt?: CommitCommentToPublishedAtResolver<TParent>;
  reactionGroups?: CommitCommentToReactionGroupsResolver<TParent>;
  reactions?: CommitCommentToReactionsResolver<TParent>;
  repository?: CommitCommentToRepositoryResolver<TParent>;
  resourcePath?: CommitCommentToResourcePathResolver<TParent>;
  updatedAt?: CommitCommentToUpdatedAtResolver<TParent>;
  url?: CommitCommentToUrlResolver<TParent>;
  userContentEdits?: CommitCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: CommitCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: CommitCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: CommitCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: CommitCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: CommitCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: CommitCommentToViewerDidAuthorResolver<TParent>;
}

export interface CommitCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface CommitCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMinimizableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CommitComment' | 'IssueComment' | 'PullRequestReviewComment' | 'GistComment';
}
export interface GQLCommitTypeResolver<TParent = any> {
  abbreviatedOid?: CommitToAbbreviatedOidResolver<TParent>;
  additions?: CommitToAdditionsResolver<TParent>;
  associatedPullRequests?: CommitToAssociatedPullRequestsResolver<TParent>;
  author?: CommitToAuthorResolver<TParent>;
  authoredByCommitter?: CommitToAuthoredByCommitterResolver<TParent>;
  authoredDate?: CommitToAuthoredDateResolver<TParent>;
  blame?: CommitToBlameResolver<TParent>;
  changedFiles?: CommitToChangedFilesResolver<TParent>;
  comments?: CommitToCommentsResolver<TParent>;
  commitResourcePath?: CommitToCommitResourcePathResolver<TParent>;
  commitUrl?: CommitToCommitUrlResolver<TParent>;
  committedDate?: CommitToCommittedDateResolver<TParent>;
  committedViaWeb?: CommitToCommittedViaWebResolver<TParent>;
  committer?: CommitToCommitterResolver<TParent>;
  deletions?: CommitToDeletionsResolver<TParent>;
  deployments?: CommitToDeploymentsResolver<TParent>;
  history?: CommitToHistoryResolver<TParent>;
  id?: CommitToIdResolver<TParent>;
  message?: CommitToMessageResolver<TParent>;
  messageBody?: CommitToMessageBodyResolver<TParent>;
  messageBodyHTML?: CommitToMessageBodyHTMLResolver<TParent>;
  messageHeadline?: CommitToMessageHeadlineResolver<TParent>;
  messageHeadlineHTML?: CommitToMessageHeadlineHTMLResolver<TParent>;
  oid?: CommitToOidResolver<TParent>;
  onBehalfOf?: CommitToOnBehalfOfResolver<TParent>;
  parents?: CommitToParentsResolver<TParent>;
  pushedDate?: CommitToPushedDateResolver<TParent>;
  repository?: CommitToRepositoryResolver<TParent>;
  resourcePath?: CommitToResourcePathResolver<TParent>;
  signature?: CommitToSignatureResolver<TParent>;
  status?: CommitToStatusResolver<TParent>;
  statusCheckRollup?: CommitToStatusCheckRollupResolver<TParent>;
  submodules?: CommitToSubmodulesResolver<TParent>;
  tarballUrl?: CommitToTarballUrlResolver<TParent>;
  tree?: CommitToTreeResolver<TParent>;
  treeResourcePath?: CommitToTreeResourcePathResolver<TParent>;
  treeUrl?: CommitToTreeUrlResolver<TParent>;
  url?: CommitToUrlResolver<TParent>;
  viewerCanSubscribe?: CommitToViewerCanSubscribeResolver<TParent>;
  viewerSubscription?: CommitToViewerSubscriptionResolver<TParent>;
  zipballUrl?: CommitToZipballUrlResolver<TParent>;
}

export interface CommitToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAssociatedPullRequestsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLPullRequestOrder;
}
export interface CommitToAssociatedPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToAssociatedPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthoredByCommitterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthoredDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToBlameArgs {
  path: string;
}
export interface CommitToBlameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToBlameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToChangedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommittedDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommittedViaWebResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToDeploymentsArgs {
  after?: string;
  before?: string;
  environments?: Array<string>;
  first?: number;
  last?: number;
  orderBy?: GQLDeploymentOrder;
}
export interface CommitToDeploymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToHistoryArgs {
  after?: string;
  author?: GQLCommitAuthor;
  before?: string;
  first?: number;
  last?: number;
  path?: string;
  since?: GQLGitTimestamp;
  until?: GQLGitTimestamp;
}
export interface CommitToHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageHeadlineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageHeadlineHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToOnBehalfOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToParentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToParentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToParentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToPushedDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToStatusCheckRollupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToSubmodulesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToSubmodulesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToSubmodulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTarballUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToZipballUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGitObjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'Tree' | 'Blob' | 'Tag';
}
export interface GQLGitActorTypeResolver<TParent = any> {
  avatarUrl?: GitActorToAvatarUrlResolver<TParent>;
  date?: GitActorToDateResolver<TParent>;
  email?: GitActorToEmailResolver<TParent>;
  name?: GitActorToNameResolver<TParent>;
  user?: GitActorToUserResolver<TParent>;
}

export interface GitActorToAvatarUrlArgs {
  size?: number;
}
export interface GitActorToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GitActorToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlameTypeResolver<TParent = any> {
  ranges?: BlameToRangesResolver<TParent>;
}

export interface BlameToRangesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlameRangeTypeResolver<TParent = any> {
  age?: BlameRangeToAgeResolver<TParent>;
  commit?: BlameRangeToCommitResolver<TParent>;
  endingLine?: BlameRangeToEndingLineResolver<TParent>;
  startingLine?: BlameRangeToStartingLineResolver<TParent>;
}

export interface BlameRangeToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToEndingLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToStartingLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentConnectionTypeResolver<TParent = any> {
  edges?: DeploymentConnectionToEdgesResolver<TParent>;
  nodes?: DeploymentConnectionToNodesResolver<TParent>;
  pageInfo?: DeploymentConnectionToPageInfoResolver<TParent>;
  totalCount?: DeploymentConnectionToTotalCountResolver<TParent>;
}

export interface DeploymentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentEdgeTypeResolver<TParent = any> {
  cursor?: DeploymentEdgeToCursorResolver<TParent>;
  node?: DeploymentEdgeToNodeResolver<TParent>;
}

export interface DeploymentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentTypeResolver<TParent = any> {
  commit?: DeploymentToCommitResolver<TParent>;
  commitOid?: DeploymentToCommitOidResolver<TParent>;
  createdAt?: DeploymentToCreatedAtResolver<TParent>;
  creator?: DeploymentToCreatorResolver<TParent>;
  databaseId?: DeploymentToDatabaseIdResolver<TParent>;
  description?: DeploymentToDescriptionResolver<TParent>;
  environment?: DeploymentToEnvironmentResolver<TParent>;
  id?: DeploymentToIdResolver<TParent>;
  latestEnvironment?: DeploymentToLatestEnvironmentResolver<TParent>;
  latestStatus?: DeploymentToLatestStatusResolver<TParent>;
  originalEnvironment?: DeploymentToOriginalEnvironmentResolver<TParent>;
  payload?: DeploymentToPayloadResolver<TParent>;
  ref?: DeploymentToRefResolver<TParent>;
  repository?: DeploymentToRepositoryResolver<TParent>;
  state?: DeploymentToStateResolver<TParent>;
  statuses?: DeploymentToStatusesResolver<TParent>;
  task?: DeploymentToTaskResolver<TParent>;
  updatedAt?: DeploymentToUpdatedAtResolver<TParent>;
}

export interface DeploymentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCommitOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToEnvironmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToLatestEnvironmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToLatestStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToOriginalEnvironmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToStatusesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface DeploymentToStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DeploymentToStatusesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentStatusTypeResolver<TParent = any> {
  createdAt?: DeploymentStatusToCreatedAtResolver<TParent>;
  creator?: DeploymentStatusToCreatorResolver<TParent>;
  deployment?: DeploymentStatusToDeploymentResolver<TParent>;
  description?: DeploymentStatusToDescriptionResolver<TParent>;
  environmentUrl?: DeploymentStatusToEnvironmentUrlResolver<TParent>;
  id?: DeploymentStatusToIdResolver<TParent>;
  logUrl?: DeploymentStatusToLogUrlResolver<TParent>;
  state?: DeploymentStatusToStateResolver<TParent>;
  updatedAt?: DeploymentStatusToUpdatedAtResolver<TParent>;
}

export interface DeploymentStatusToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToEnvironmentUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToLogUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentStatusConnectionTypeResolver<TParent = any> {
  edges?: DeploymentStatusConnectionToEdgesResolver<TParent>;
  nodes?: DeploymentStatusConnectionToNodesResolver<TParent>;
  pageInfo?: DeploymentStatusConnectionToPageInfoResolver<TParent>;
  totalCount?: DeploymentStatusConnectionToTotalCountResolver<TParent>;
}

export interface DeploymentStatusConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentStatusEdgeTypeResolver<TParent = any> {
  cursor?: DeploymentStatusEdgeToCursorResolver<TParent>;
  node?: DeploymentStatusEdgeToNodeResolver<TParent>;
}

export interface DeploymentStatusEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitHistoryConnectionTypeResolver<TParent = any> {
  edges?: CommitHistoryConnectionToEdgesResolver<TParent>;
  nodes?: CommitHistoryConnectionToNodesResolver<TParent>;
  pageInfo?: CommitHistoryConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitHistoryConnectionToTotalCountResolver<TParent>;
}

export interface CommitHistoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitEdgeTypeResolver<TParent = any> {
  cursor?: CommitEdgeToCursorResolver<TParent>;
  node?: CommitEdgeToNodeResolver<TParent>;
}

export interface CommitEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitConnectionTypeResolver<TParent = any> {
  edges?: CommitConnectionToEdgesResolver<TParent>;
  nodes?: CommitConnectionToNodesResolver<TParent>;
  pageInfo?: CommitConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitConnectionToTotalCountResolver<TParent>;
}

export interface CommitConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGitSignatureTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'GpgSignature' | 'SmimeSignature' | 'UnknownSignature';
}
export interface GQLStatusTypeResolver<TParent = any> {
  commit?: StatusToCommitResolver<TParent>;
  context?: StatusToContextResolver<TParent>;
  contexts?: StatusToContextsResolver<TParent>;
  id?: StatusToIdResolver<TParent>;
  state?: StatusToStateResolver<TParent>;
}

export interface StatusToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToContextArgs {
  name: string;
}
export interface StatusToContextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: StatusToContextArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatusContextTypeResolver<TParent = any> {
  avatarUrl?: StatusContextToAvatarUrlResolver<TParent>;
  commit?: StatusContextToCommitResolver<TParent>;
  context?: StatusContextToContextResolver<TParent>;
  createdAt?: StatusContextToCreatedAtResolver<TParent>;
  creator?: StatusContextToCreatorResolver<TParent>;
  description?: StatusContextToDescriptionResolver<TParent>;
  id?: StatusContextToIdResolver<TParent>;
  state?: StatusContextToStateResolver<TParent>;
  targetUrl?: StatusContextToTargetUrlResolver<TParent>;
}

export interface StatusContextToAvatarUrlArgs {
  size?: number;
}
export interface StatusContextToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: StatusContextToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToContextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToTargetUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatusCheckRollupTypeResolver<TParent = any> {
  commit?: StatusCheckRollupToCommitResolver<TParent>;
  contexts?: StatusCheckRollupToContextsResolver<TParent>;
  id?: StatusCheckRollupToIdResolver<TParent>;
  state?: StatusCheckRollupToStateResolver<TParent>;
}

export interface StatusCheckRollupToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupToContextsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface StatusCheckRollupToContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: StatusCheckRollupToContextsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatusCheckRollupContextConnectionTypeResolver<TParent = any> {
  edges?: StatusCheckRollupContextConnectionToEdgesResolver<TParent>;
  nodes?: StatusCheckRollupContextConnectionToNodesResolver<TParent>;
  pageInfo?: StatusCheckRollupContextConnectionToPageInfoResolver<TParent>;
  totalCount?: StatusCheckRollupContextConnectionToTotalCountResolver<TParent>;
}

export interface StatusCheckRollupContextConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupContextConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupContextConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupContextConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatusCheckRollupContextEdgeTypeResolver<TParent = any> {
  cursor?: StatusCheckRollupContextEdgeToCursorResolver<TParent>;
  node?: StatusCheckRollupContextEdgeToNodeResolver<TParent>;
}

export interface StatusCheckRollupContextEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusCheckRollupContextEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStatusCheckRollupContextTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'StatusContext';
}
export interface GQLSubmoduleConnectionTypeResolver<TParent = any> {
  edges?: SubmoduleConnectionToEdgesResolver<TParent>;
  nodes?: SubmoduleConnectionToNodesResolver<TParent>;
  pageInfo?: SubmoduleConnectionToPageInfoResolver<TParent>;
  totalCount?: SubmoduleConnectionToTotalCountResolver<TParent>;
}

export interface SubmoduleConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubmoduleEdgeTypeResolver<TParent = any> {
  cursor?: SubmoduleEdgeToCursorResolver<TParent>;
  node?: SubmoduleEdgeToNodeResolver<TParent>;
}

export interface SubmoduleEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubmoduleTypeResolver<TParent = any> {
  branch?: SubmoduleToBranchResolver<TParent>;
  gitUrl?: SubmoduleToGitUrlResolver<TParent>;
  name?: SubmoduleToNameResolver<TParent>;
  path?: SubmoduleToPathResolver<TParent>;
  subprojectCommitOid?: SubmoduleToSubprojectCommitOidResolver<TParent>;
}

export interface SubmoduleToBranchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleToGitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmoduleToSubprojectCommitOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTreeTypeResolver<TParent = any> {
  abbreviatedOid?: TreeToAbbreviatedOidResolver<TParent>;
  commitResourcePath?: TreeToCommitResourcePathResolver<TParent>;
  commitUrl?: TreeToCommitUrlResolver<TParent>;
  entries?: TreeToEntriesResolver<TParent>;
  id?: TreeToIdResolver<TParent>;
  oid?: TreeToOidResolver<TParent>;
  repository?: TreeToRepositoryResolver<TParent>;
}

export interface TreeToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToEntriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTreeEntryTypeResolver<TParent = any> {
  mode?: TreeEntryToModeResolver<TParent>;
  name?: TreeEntryToNameResolver<TParent>;
  object?: TreeEntryToObjectResolver<TParent>;
  oid?: TreeEntryToOidResolver<TParent>;
  repository?: TreeEntryToRepositoryResolver<TParent>;
  submodule?: TreeEntryToSubmoduleResolver<TParent>;
  type?: TreeEntryToTypeResolver<TParent>;
}

export interface TreeEntryToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToObjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToSubmoduleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployKeyConnectionTypeResolver<TParent = any> {
  edges?: DeployKeyConnectionToEdgesResolver<TParent>;
  nodes?: DeployKeyConnectionToNodesResolver<TParent>;
  pageInfo?: DeployKeyConnectionToPageInfoResolver<TParent>;
  totalCount?: DeployKeyConnectionToTotalCountResolver<TParent>;
}

export interface DeployKeyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployKeyEdgeTypeResolver<TParent = any> {
  cursor?: DeployKeyEdgeToCursorResolver<TParent>;
  node?: DeployKeyEdgeToNodeResolver<TParent>;
}

export interface DeployKeyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployKeyTypeResolver<TParent = any> {
  createdAt?: DeployKeyToCreatedAtResolver<TParent>;
  id?: DeployKeyToIdResolver<TParent>;
  key?: DeployKeyToKeyResolver<TParent>;
  readOnly?: DeployKeyToReadOnlyResolver<TParent>;
  title?: DeployKeyToTitleResolver<TParent>;
  verified?: DeployKeyToVerifiedResolver<TParent>;
}

export interface DeployKeyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToReadOnlyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFundingLinkTypeResolver<TParent = any> {
  platform?: FundingLinkToPlatformResolver<TParent>;
  url?: FundingLinkToUrlResolver<TParent>;
}

export interface FundingLinkToPlatformResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FundingLinkToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueOrPullRequestTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLLanguageConnectionTypeResolver<TParent = any> {
  edges?: LanguageConnectionToEdgesResolver<TParent>;
  nodes?: LanguageConnectionToNodesResolver<TParent>;
  pageInfo?: LanguageConnectionToPageInfoResolver<TParent>;
  totalCount?: LanguageConnectionToTotalCountResolver<TParent>;
  totalSize?: LanguageConnectionToTotalSizeResolver<TParent>;
}

export interface LanguageConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToTotalSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLanguageEdgeTypeResolver<TParent = any> {
  cursor?: LanguageEdgeToCursorResolver<TParent>;
  node?: LanguageEdgeToNodeResolver<TParent>;
  size?: LanguageEdgeToSizeResolver<TParent>;
}

export interface LanguageEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLanguageTypeResolver<TParent = any> {
  color?: LanguageToColorResolver<TParent>;
  id?: LanguageToIdResolver<TParent>;
  name?: LanguageToNameResolver<TParent>;
}

export interface LanguageToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneTypeResolver<TParent = any> {
  closed?: MilestoneToClosedResolver<TParent>;
  closedAt?: MilestoneToClosedAtResolver<TParent>;
  createdAt?: MilestoneToCreatedAtResolver<TParent>;
  creator?: MilestoneToCreatorResolver<TParent>;
  description?: MilestoneToDescriptionResolver<TParent>;
  dueOn?: MilestoneToDueOnResolver<TParent>;
  id?: MilestoneToIdResolver<TParent>;
  issuePrioritiesDebug?: MilestoneToIssuePrioritiesDebugResolver<TParent>;
  issues?: MilestoneToIssuesResolver<TParent>;
  number?: MilestoneToNumberResolver<TParent>;
  pullRequests?: MilestoneToPullRequestsResolver<TParent>;
  repository?: MilestoneToRepositoryResolver<TParent>;
  resourcePath?: MilestoneToResourcePathResolver<TParent>;
  state?: MilestoneToStateResolver<TParent>;
  title?: MilestoneToTitleResolver<TParent>;
  updatedAt?: MilestoneToUpdatedAtResolver<TParent>;
  url?: MilestoneToUrlResolver<TParent>;
}

export interface MilestoneToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToDueOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIssuePrioritiesDebugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIssuesArgs {
  after?: string;
  before?: string;
  filterBy?: GQLIssueFilters;
  first?: number;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLIssueState>;
}
export interface MilestoneToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MilestoneToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToPullRequestsArgs {
  after?: string;
  baseRefName?: string;
  before?: string;
  first?: number;
  headRefName?: string;
  labels?: Array<string>;
  last?: number;
  orderBy?: GQLIssueOrder;
  states?: Array<GQLPullRequestState>;
}
export interface MilestoneToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MilestoneToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneConnectionTypeResolver<TParent = any> {
  edges?: MilestoneConnectionToEdgesResolver<TParent>;
  nodes?: MilestoneConnectionToNodesResolver<TParent>;
  pageInfo?: MilestoneConnectionToPageInfoResolver<TParent>;
  totalCount?: MilestoneConnectionToTotalCountResolver<TParent>;
}

export interface MilestoneConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneEdgeTypeResolver<TParent = any> {
  cursor?: MilestoneEdgeToCursorResolver<TParent>;
  node?: MilestoneEdgeToNodeResolver<TParent>;
}

export interface MilestoneEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseConnectionTypeResolver<TParent = any> {
  edges?: ReleaseConnectionToEdgesResolver<TParent>;
  nodes?: ReleaseConnectionToNodesResolver<TParent>;
  pageInfo?: ReleaseConnectionToPageInfoResolver<TParent>;
  totalCount?: ReleaseConnectionToTotalCountResolver<TParent>;
}

export interface ReleaseConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseEdgeToCursorResolver<TParent>;
  node?: ReleaseEdgeToNodeResolver<TParent>;
}

export interface ReleaseEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTopicConnectionTypeResolver<TParent = any> {
  edges?: RepositoryTopicConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryTopicConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryTopicConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryTopicConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryTopicConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTopicEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryTopicEdgeToCursorResolver<TParent>;
  node?: RepositoryTopicEdgeToNodeResolver<TParent>;
}

export interface RepositoryTopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryTopicTypeResolver<TParent = any> {
  id?: RepositoryTopicToIdResolver<TParent>;
  resourcePath?: RepositoryTopicToResourcePathResolver<TParent>;
  topic?: RepositoryTopicToTopicResolver<TParent>;
  url?: RepositoryTopicToUrlResolver<TParent>;
}

export interface RepositoryTopicToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTopicTypeResolver<TParent = any> {
  id?: TopicToIdResolver<TParent>;
  name?: TopicToNameResolver<TParent>;
  relatedTopics?: TopicToRelatedTopicsResolver<TParent>;
  stargazers?: TopicToStargazersResolver<TParent>;
  viewerHasStarred?: TopicToViewerHasStarredResolver<TParent>;
}

export interface TopicToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToRelatedTopicsArgs {
  first?: number;
}
export interface TopicToRelatedTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TopicToRelatedTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
}
export interface TopicToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TopicToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryVulnerabilityAlertConnectionTypeResolver<TParent = any> {
  edges?: RepositoryVulnerabilityAlertConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryVulnerabilityAlertConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryVulnerabilityAlertConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryVulnerabilityAlertConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryVulnerabilityAlertConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryVulnerabilityAlertEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryVulnerabilityAlertEdgeToCursorResolver<TParent>;
  node?: RepositoryVulnerabilityAlertEdgeToNodeResolver<TParent>;
}

export interface RepositoryVulnerabilityAlertEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryVulnerabilityAlertTypeResolver<TParent = any> {
  createdAt?: RepositoryVulnerabilityAlertToCreatedAtResolver<TParent>;
  dismissReason?: RepositoryVulnerabilityAlertToDismissReasonResolver<TParent>;
  dismissedAt?: RepositoryVulnerabilityAlertToDismissedAtResolver<TParent>;
  dismisser?: RepositoryVulnerabilityAlertToDismisserResolver<TParent>;
  id?: RepositoryVulnerabilityAlertToIdResolver<TParent>;
  repository?: RepositoryVulnerabilityAlertToRepositoryResolver<TParent>;
  securityAdvisory?: RepositoryVulnerabilityAlertToSecurityAdvisoryResolver<TParent>;
  securityVulnerability?: RepositoryVulnerabilityAlertToSecurityVulnerabilityResolver<TParent>;
  vulnerableManifestFilename?: RepositoryVulnerabilityAlertToVulnerableManifestFilenameResolver<TParent>;
  vulnerableManifestPath?: RepositoryVulnerabilityAlertToVulnerableManifestPathResolver<TParent>;
  vulnerableRequirements?: RepositoryVulnerabilityAlertToVulnerableRequirementsResolver<TParent>;
}

export interface RepositoryVulnerabilityAlertToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToDismissReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToDismissedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToDismisserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToSecurityAdvisoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToSecurityVulnerabilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToVulnerableManifestFilenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToVulnerableManifestPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVulnerabilityAlertToVulnerableRequirementsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryTypeResolver<TParent = any> {
  databaseId?: SecurityAdvisoryToDatabaseIdResolver<TParent>;
  description?: SecurityAdvisoryToDescriptionResolver<TParent>;
  ghsaId?: SecurityAdvisoryToGhsaIdResolver<TParent>;
  id?: SecurityAdvisoryToIdResolver<TParent>;
  identifiers?: SecurityAdvisoryToIdentifiersResolver<TParent>;
  origin?: SecurityAdvisoryToOriginResolver<TParent>;
  permalink?: SecurityAdvisoryToPermalinkResolver<TParent>;
  publishedAt?: SecurityAdvisoryToPublishedAtResolver<TParent>;
  references?: SecurityAdvisoryToReferencesResolver<TParent>;
  severity?: SecurityAdvisoryToSeverityResolver<TParent>;
  summary?: SecurityAdvisoryToSummaryResolver<TParent>;
  updatedAt?: SecurityAdvisoryToUpdatedAtResolver<TParent>;
  vulnerabilities?: SecurityAdvisoryToVulnerabilitiesResolver<TParent>;
  withdrawnAt?: SecurityAdvisoryToWithdrawnAtResolver<TParent>;
}

export interface SecurityAdvisoryToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToGhsaIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToIdentifiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToPermalinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToReferencesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToSeverityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToVulnerabilitiesArgs {
  after?: string;
  before?: string;
  ecosystem?: GQLSecurityAdvisoryEcosystem;
  first?: number;
  last?: number;
  orderBy?: GQLSecurityVulnerabilityOrder;
  package?: string;
  severities?: Array<GQLSecurityAdvisorySeverity>;
}
export interface SecurityAdvisoryToVulnerabilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SecurityAdvisoryToVulnerabilitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToWithdrawnAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryIdentifierTypeResolver<TParent = any> {
  type?: SecurityAdvisoryIdentifierToTypeResolver<TParent>;
  value?: SecurityAdvisoryIdentifierToValueResolver<TParent>;
}

export interface SecurityAdvisoryIdentifierToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryIdentifierToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryReferenceTypeResolver<TParent = any> {
  url?: SecurityAdvisoryReferenceToUrlResolver<TParent>;
}

export interface SecurityAdvisoryReferenceToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityVulnerabilityConnectionTypeResolver<TParent = any> {
  edges?: SecurityVulnerabilityConnectionToEdgesResolver<TParent>;
  nodes?: SecurityVulnerabilityConnectionToNodesResolver<TParent>;
  pageInfo?: SecurityVulnerabilityConnectionToPageInfoResolver<TParent>;
  totalCount?: SecurityVulnerabilityConnectionToTotalCountResolver<TParent>;
}

export interface SecurityVulnerabilityConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityVulnerabilityEdgeTypeResolver<TParent = any> {
  cursor?: SecurityVulnerabilityEdgeToCursorResolver<TParent>;
  node?: SecurityVulnerabilityEdgeToNodeResolver<TParent>;
}

export interface SecurityVulnerabilityEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityVulnerabilityTypeResolver<TParent = any> {
  advisory?: SecurityVulnerabilityToAdvisoryResolver<TParent>;
  firstPatchedVersion?: SecurityVulnerabilityToFirstPatchedVersionResolver<TParent>;
  package?: SecurityVulnerabilityToPackageResolver<TParent>;
  severity?: SecurityVulnerabilityToSeverityResolver<TParent>;
  updatedAt?: SecurityVulnerabilityToUpdatedAtResolver<TParent>;
  vulnerableVersionRange?: SecurityVulnerabilityToVulnerableVersionRangeResolver<TParent>;
}

export interface SecurityVulnerabilityToAdvisoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToFirstPatchedVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToPackageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToSeverityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToVulnerableVersionRangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryPackageVersionTypeResolver<TParent = any> {
  identifier?: SecurityAdvisoryPackageVersionToIdentifierResolver<TParent>;
}

export interface SecurityAdvisoryPackageVersionToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryPackageTypeResolver<TParent = any> {
  ecosystem?: SecurityAdvisoryPackageToEcosystemResolver<TParent>;
  name?: SecurityAdvisoryPackageToNameResolver<TParent>;
}

export interface SecurityAdvisoryPackageToEcosystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryPackageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueCommentConnectionTypeResolver<TParent = any> {
  edges?: IssueCommentConnectionToEdgesResolver<TParent>;
  nodes?: IssueCommentConnectionToNodesResolver<TParent>;
  pageInfo?: IssueCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueCommentConnectionToTotalCountResolver<TParent>;
}

export interface IssueCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueCommentEdgeTypeResolver<TParent = any> {
  cursor?: IssueCommentEdgeToCursorResolver<TParent>;
  node?: IssueCommentEdgeToNodeResolver<TParent>;
}

export interface IssueCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueCommentTypeResolver<TParent = any> {
  author?: IssueCommentToAuthorResolver<TParent>;
  authorAssociation?: IssueCommentToAuthorAssociationResolver<TParent>;
  body?: IssueCommentToBodyResolver<TParent>;
  bodyHTML?: IssueCommentToBodyHTMLResolver<TParent>;
  bodyText?: IssueCommentToBodyTextResolver<TParent>;
  createdAt?: IssueCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: IssueCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: IssueCommentToDatabaseIdResolver<TParent>;
  editor?: IssueCommentToEditorResolver<TParent>;
  id?: IssueCommentToIdResolver<TParent>;
  includesCreatedEdit?: IssueCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: IssueCommentToIsMinimizedResolver<TParent>;
  issue?: IssueCommentToIssueResolver<TParent>;
  lastEditedAt?: IssueCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: IssueCommentToMinimizedReasonResolver<TParent>;
  publishedAt?: IssueCommentToPublishedAtResolver<TParent>;
  pullRequest?: IssueCommentToPullRequestResolver<TParent>;
  reactionGroups?: IssueCommentToReactionGroupsResolver<TParent>;
  reactions?: IssueCommentToReactionsResolver<TParent>;
  repository?: IssueCommentToRepositoryResolver<TParent>;
  resourcePath?: IssueCommentToResourcePathResolver<TParent>;
  updatedAt?: IssueCommentToUpdatedAtResolver<TParent>;
  url?: IssueCommentToUrlResolver<TParent>;
  userContentEdits?: IssueCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: IssueCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: IssueCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: IssueCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: IssueCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: IssueCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: IssueCommentToViewerDidAuthorResolver<TParent>;
}

export interface IssueCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface IssueCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHovercardTypeResolver<TParent = any> {
  contexts?: HovercardToContextsResolver<TParent>;
}

export interface HovercardToContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHovercardContextTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'GenericHovercardContext' | 'OrganizationTeamsHovercardContext' | 'OrganizationsHovercardContext' | 'ReviewStatusHovercardContext' | 'ViewerHovercardContext';
}
export interface GQLIssueTimelineConnectionTypeResolver<TParent = any> {
  edges?: IssueTimelineConnectionToEdgesResolver<TParent>;
  nodes?: IssueTimelineConnectionToNodesResolver<TParent>;
  pageInfo?: IssueTimelineConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueTimelineConnectionToTotalCountResolver<TParent>;
}

export interface IssueTimelineConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemEdgeTypeResolver<TParent = any> {
  cursor?: IssueTimelineItemEdgeToCursorResolver<TParent>;
  node?: IssueTimelineItemEdgeToNodeResolver<TParent>;
}

export interface IssueTimelineItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AssignedEvent' | 'ClosedEvent' | 'Commit' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MilestonedEvent' | 'ReferencedEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent' | 'UserBlockedEvent';
}
export interface GQLAssignedEventTypeResolver<TParent = any> {
  actor?: AssignedEventToActorResolver<TParent>;
  assignable?: AssignedEventToAssignableResolver<TParent>;
  assignee?: AssignedEventToAssigneeResolver<TParent>;
  createdAt?: AssignedEventToCreatedAtResolver<TParent>;
  id?: AssignedEventToIdResolver<TParent>;
  user?: AssignedEventToUserResolver<TParent>;
}

export interface AssignedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToAssigneeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssigneeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Bot' | 'Mannequin' | 'Organization' | 'User';
}
export interface GQLBotTypeResolver<TParent = any> {
  avatarUrl?: BotToAvatarUrlResolver<TParent>;
  createdAt?: BotToCreatedAtResolver<TParent>;
  databaseId?: BotToDatabaseIdResolver<TParent>;
  id?: BotToIdResolver<TParent>;
  login?: BotToLoginResolver<TParent>;
  resourcePath?: BotToResourcePathResolver<TParent>;
  updatedAt?: BotToUpdatedAtResolver<TParent>;
  url?: BotToUrlResolver<TParent>;
}

export interface BotToAvatarUrlArgs {
  size?: number;
}
export interface BotToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BotToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMannequinTypeResolver<TParent = any> {
  avatarUrl?: MannequinToAvatarUrlResolver<TParent>;
  createdAt?: MannequinToCreatedAtResolver<TParent>;
  databaseId?: MannequinToDatabaseIdResolver<TParent>;
  email?: MannequinToEmailResolver<TParent>;
  id?: MannequinToIdResolver<TParent>;
  login?: MannequinToLoginResolver<TParent>;
  resourcePath?: MannequinToResourcePathResolver<TParent>;
  updatedAt?: MannequinToUpdatedAtResolver<TParent>;
  url?: MannequinToUrlResolver<TParent>;
}

export interface MannequinToAvatarUrlArgs {
  size?: number;
}
export interface MannequinToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MannequinToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MannequinToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClosedEventTypeResolver<TParent = any> {
  actor?: ClosedEventToActorResolver<TParent>;
  closable?: ClosedEventToClosableResolver<TParent>;
  closer?: ClosedEventToCloserResolver<TParent>;
  createdAt?: ClosedEventToCreatedAtResolver<TParent>;
  id?: ClosedEventToIdResolver<TParent>;
  resourcePath?: ClosedEventToResourcePathResolver<TParent>;
  url?: ClosedEventToUrlResolver<TParent>;
}

export interface ClosedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToClosableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToCloserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCloserTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'PullRequest';
}
export interface GQLCrossReferencedEventTypeResolver<TParent = any> {
  actor?: CrossReferencedEventToActorResolver<TParent>;
  createdAt?: CrossReferencedEventToCreatedAtResolver<TParent>;
  id?: CrossReferencedEventToIdResolver<TParent>;
  isCrossRepository?: CrossReferencedEventToIsCrossRepositoryResolver<TParent>;
  referencedAt?: CrossReferencedEventToReferencedAtResolver<TParent>;
  resourcePath?: CrossReferencedEventToResourcePathResolver<TParent>;
  source?: CrossReferencedEventToSourceResolver<TParent>;
  target?: CrossReferencedEventToTargetResolver<TParent>;
  url?: CrossReferencedEventToUrlResolver<TParent>;
  willCloseTarget?: CrossReferencedEventToWillCloseTargetResolver<TParent>;
}

export interface CrossReferencedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToReferencedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToWillCloseTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReferencedSubjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLDemilestonedEventTypeResolver<TParent = any> {
  actor?: DemilestonedEventToActorResolver<TParent>;
  createdAt?: DemilestonedEventToCreatedAtResolver<TParent>;
  id?: DemilestonedEventToIdResolver<TParent>;
  milestoneTitle?: DemilestonedEventToMilestoneTitleResolver<TParent>;
  subject?: DemilestonedEventToSubjectResolver<TParent>;
}

export interface DemilestonedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToMilestoneTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestoneItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLLabeledEventTypeResolver<TParent = any> {
  actor?: LabeledEventToActorResolver<TParent>;
  createdAt?: LabeledEventToCreatedAtResolver<TParent>;
  id?: LabeledEventToIdResolver<TParent>;
  label?: LabeledEventToLabelResolver<TParent>;
  labelable?: LabeledEventToLabelableResolver<TParent>;
}

export interface LabeledEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLockedEventTypeResolver<TParent = any> {
  actor?: LockedEventToActorResolver<TParent>;
  createdAt?: LockedEventToCreatedAtResolver<TParent>;
  id?: LockedEventToIdResolver<TParent>;
  lockReason?: LockedEventToLockReasonResolver<TParent>;
  lockable?: LockedEventToLockableResolver<TParent>;
}

export interface LockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMilestonedEventTypeResolver<TParent = any> {
  actor?: MilestonedEventToActorResolver<TParent>;
  createdAt?: MilestonedEventToCreatedAtResolver<TParent>;
  id?: MilestonedEventToIdResolver<TParent>;
  milestoneTitle?: MilestonedEventToMilestoneTitleResolver<TParent>;
  subject?: MilestonedEventToSubjectResolver<TParent>;
}

export interface MilestonedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToMilestoneTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReferencedEventTypeResolver<TParent = any> {
  actor?: ReferencedEventToActorResolver<TParent>;
  commit?: ReferencedEventToCommitResolver<TParent>;
  commitRepository?: ReferencedEventToCommitRepositoryResolver<TParent>;
  createdAt?: ReferencedEventToCreatedAtResolver<TParent>;
  id?: ReferencedEventToIdResolver<TParent>;
  isCrossRepository?: ReferencedEventToIsCrossRepositoryResolver<TParent>;
  isDirectReference?: ReferencedEventToIsDirectReferenceResolver<TParent>;
  subject?: ReferencedEventToSubjectResolver<TParent>;
}

export interface ReferencedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCommitRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIsDirectReferenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRenamedTitleEventTypeResolver<TParent = any> {
  actor?: RenamedTitleEventToActorResolver<TParent>;
  createdAt?: RenamedTitleEventToCreatedAtResolver<TParent>;
  currentTitle?: RenamedTitleEventToCurrentTitleResolver<TParent>;
  id?: RenamedTitleEventToIdResolver<TParent>;
  previousTitle?: RenamedTitleEventToPreviousTitleResolver<TParent>;
  subject?: RenamedTitleEventToSubjectResolver<TParent>;
}

export interface RenamedTitleEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToCurrentTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToPreviousTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRenamedTitleSubjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface GQLReopenedEventTypeResolver<TParent = any> {
  actor?: ReopenedEventToActorResolver<TParent>;
  closable?: ReopenedEventToClosableResolver<TParent>;
  createdAt?: ReopenedEventToCreatedAtResolver<TParent>;
  id?: ReopenedEventToIdResolver<TParent>;
}

export interface ReopenedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToClosableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscribedEventTypeResolver<TParent = any> {
  actor?: SubscribedEventToActorResolver<TParent>;
  createdAt?: SubscribedEventToCreatedAtResolver<TParent>;
  id?: SubscribedEventToIdResolver<TParent>;
  subscribable?: SubscribedEventToSubscribableResolver<TParent>;
}

export interface SubscribedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTransferredEventTypeResolver<TParent = any> {
  actor?: TransferredEventToActorResolver<TParent>;
  createdAt?: TransferredEventToCreatedAtResolver<TParent>;
  fromRepository?: TransferredEventToFromRepositoryResolver<TParent>;
  id?: TransferredEventToIdResolver<TParent>;
  issue?: TransferredEventToIssueResolver<TParent>;
}

export interface TransferredEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToFromRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnassignedEventTypeResolver<TParent = any> {
  actor?: UnassignedEventToActorResolver<TParent>;
  assignable?: UnassignedEventToAssignableResolver<TParent>;
  assignee?: UnassignedEventToAssigneeResolver<TParent>;
  createdAt?: UnassignedEventToCreatedAtResolver<TParent>;
  id?: UnassignedEventToIdResolver<TParent>;
  user?: UnassignedEventToUserResolver<TParent>;
}

export interface UnassignedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToAssigneeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlabeledEventTypeResolver<TParent = any> {
  actor?: UnlabeledEventToActorResolver<TParent>;
  createdAt?: UnlabeledEventToCreatedAtResolver<TParent>;
  id?: UnlabeledEventToIdResolver<TParent>;
  label?: UnlabeledEventToLabelResolver<TParent>;
  labelable?: UnlabeledEventToLabelableResolver<TParent>;
}

export interface UnlabeledEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlockedEventTypeResolver<TParent = any> {
  actor?: UnlockedEventToActorResolver<TParent>;
  createdAt?: UnlockedEventToCreatedAtResolver<TParent>;
  id?: UnlockedEventToIdResolver<TParent>;
  lockable?: UnlockedEventToLockableResolver<TParent>;
}

export interface UnlockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnsubscribedEventTypeResolver<TParent = any> {
  actor?: UnsubscribedEventToActorResolver<TParent>;
  createdAt?: UnsubscribedEventToCreatedAtResolver<TParent>;
  id?: UnsubscribedEventToIdResolver<TParent>;
  subscribable?: UnsubscribedEventToSubscribableResolver<TParent>;
}

export interface UnsubscribedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserBlockedEventTypeResolver<TParent = any> {
  actor?: UserBlockedEventToActorResolver<TParent>;
  blockDuration?: UserBlockedEventToBlockDurationResolver<TParent>;
  createdAt?: UserBlockedEventToCreatedAtResolver<TParent>;
  id?: UserBlockedEventToIdResolver<TParent>;
  subject?: UserBlockedEventToSubjectResolver<TParent>;
}

export interface UserBlockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserBlockedEventToBlockDurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserBlockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserBlockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserBlockedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemsConnectionTypeResolver<TParent = any> {
  edges?: IssueTimelineItemsConnectionToEdgesResolver<TParent>;
  filteredCount?: IssueTimelineItemsConnectionToFilteredCountResolver<TParent>;
  nodes?: IssueTimelineItemsConnectionToNodesResolver<TParent>;
  pageCount?: IssueTimelineItemsConnectionToPageCountResolver<TParent>;
  pageInfo?: IssueTimelineItemsConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueTimelineItemsConnectionToTotalCountResolver<TParent>;
  updatedAt?: IssueTimelineItemsConnectionToUpdatedAtResolver<TParent>;
}

export interface IssueTimelineItemsConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsConnectionToFilteredCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsConnectionToPageCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsConnectionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemsEdgeTypeResolver<TParent = any> {
  cursor?: IssueTimelineItemsEdgeToCursorResolver<TParent>;
  node?: IssueTimelineItemsEdgeToNodeResolver<TParent>;
}

export interface IssueTimelineItemsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueTimelineItemsTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AddedToProjectEvent' | 'AssignedEvent' | 'ClosedEvent' | 'CommentDeletedEvent' | 'ConnectedEvent' | 'ConvertedNoteToIssueEvent' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'DisconnectedEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MarkedAsDuplicateEvent' | 'MentionedEvent' | 'MilestonedEvent' | 'MovedColumnsInProjectEvent' | 'PinnedEvent' | 'ReferencedEvent' | 'RemovedFromProjectEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnmarkedAsDuplicateEvent' | 'UnpinnedEvent' | 'UnsubscribedEvent' | 'UserBlockedEvent';
}
export interface GQLAddedToProjectEventTypeResolver<TParent = any> {
  actor?: AddedToProjectEventToActorResolver<TParent>;
  createdAt?: AddedToProjectEventToCreatedAtResolver<TParent>;
  databaseId?: AddedToProjectEventToDatabaseIdResolver<TParent>;
  id?: AddedToProjectEventToIdResolver<TParent>;
}

export interface AddedToProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentDeletedEventTypeResolver<TParent = any> {
  actor?: CommentDeletedEventToActorResolver<TParent>;
  createdAt?: CommentDeletedEventToCreatedAtResolver<TParent>;
  databaseId?: CommentDeletedEventToDatabaseIdResolver<TParent>;
  id?: CommentDeletedEventToIdResolver<TParent>;
}

export interface CommentDeletedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConnectedEventTypeResolver<TParent = any> {
  actor?: ConnectedEventToActorResolver<TParent>;
  createdAt?: ConnectedEventToCreatedAtResolver<TParent>;
  id?: ConnectedEventToIdResolver<TParent>;
  isCrossRepository?: ConnectedEventToIsCrossRepositoryResolver<TParent>;
  source?: ConnectedEventToSourceResolver<TParent>;
  subject?: ConnectedEventToSubjectResolver<TParent>;
}

export interface ConnectedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConnectedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConnectedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConnectedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConnectedEventToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConnectedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConvertedNoteToIssueEventTypeResolver<TParent = any> {
  actor?: ConvertedNoteToIssueEventToActorResolver<TParent>;
  createdAt?: ConvertedNoteToIssueEventToCreatedAtResolver<TParent>;
  databaseId?: ConvertedNoteToIssueEventToDatabaseIdResolver<TParent>;
  id?: ConvertedNoteToIssueEventToIdResolver<TParent>;
}

export interface ConvertedNoteToIssueEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDisconnectedEventTypeResolver<TParent = any> {
  actor?: DisconnectedEventToActorResolver<TParent>;
  createdAt?: DisconnectedEventToCreatedAtResolver<TParent>;
  id?: DisconnectedEventToIdResolver<TParent>;
  isCrossRepository?: DisconnectedEventToIsCrossRepositoryResolver<TParent>;
  source?: DisconnectedEventToSourceResolver<TParent>;
  subject?: DisconnectedEventToSubjectResolver<TParent>;
}

export interface DisconnectedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DisconnectedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DisconnectedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DisconnectedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DisconnectedEventToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DisconnectedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarkedAsDuplicateEventTypeResolver<TParent = any> {
  actor?: MarkedAsDuplicateEventToActorResolver<TParent>;
  createdAt?: MarkedAsDuplicateEventToCreatedAtResolver<TParent>;
  id?: MarkedAsDuplicateEventToIdResolver<TParent>;
}

export interface MarkedAsDuplicateEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarkedAsDuplicateEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarkedAsDuplicateEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMentionedEventTypeResolver<TParent = any> {
  actor?: MentionedEventToActorResolver<TParent>;
  createdAt?: MentionedEventToCreatedAtResolver<TParent>;
  databaseId?: MentionedEventToDatabaseIdResolver<TParent>;
  id?: MentionedEventToIdResolver<TParent>;
}

export interface MentionedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMovedColumnsInProjectEventTypeResolver<TParent = any> {
  actor?: MovedColumnsInProjectEventToActorResolver<TParent>;
  createdAt?: MovedColumnsInProjectEventToCreatedAtResolver<TParent>;
  databaseId?: MovedColumnsInProjectEventToDatabaseIdResolver<TParent>;
  id?: MovedColumnsInProjectEventToIdResolver<TParent>;
}

export interface MovedColumnsInProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPinnedEventTypeResolver<TParent = any> {
  actor?: PinnedEventToActorResolver<TParent>;
  createdAt?: PinnedEventToCreatedAtResolver<TParent>;
  id?: PinnedEventToIdResolver<TParent>;
  issue?: PinnedEventToIssueResolver<TParent>;
}

export interface PinnedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemovedFromProjectEventTypeResolver<TParent = any> {
  actor?: RemovedFromProjectEventToActorResolver<TParent>;
  createdAt?: RemovedFromProjectEventToCreatedAtResolver<TParent>;
  databaseId?: RemovedFromProjectEventToDatabaseIdResolver<TParent>;
  id?: RemovedFromProjectEventToIdResolver<TParent>;
}

export interface RemovedFromProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnmarkedAsDuplicateEventTypeResolver<TParent = any> {
  actor?: UnmarkedAsDuplicateEventToActorResolver<TParent>;
  createdAt?: UnmarkedAsDuplicateEventToCreatedAtResolver<TParent>;
  id?: UnmarkedAsDuplicateEventToIdResolver<TParent>;
}

export interface UnmarkedAsDuplicateEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnmarkedAsDuplicateEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnmarkedAsDuplicateEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnpinnedEventTypeResolver<TParent = any> {
  actor?: UnpinnedEventToActorResolver<TParent>;
  createdAt?: UnpinnedEventToCreatedAtResolver<TParent>;
  id?: UnpinnedEventToIdResolver<TParent>;
  issue?: UnpinnedEventToIssueResolver<TParent>;
}

export interface UnpinnedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestCommitConnectionTypeResolver<TParent = any> {
  edges?: PullRequestCommitConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestCommitConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestCommitConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestCommitConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestCommitConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestCommitEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestCommitEdgeToCursorResolver<TParent>;
  node?: PullRequestCommitEdgeToNodeResolver<TParent>;
}

export interface PullRequestCommitEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestCommitTypeResolver<TParent = any> {
  commit?: PullRequestCommitToCommitResolver<TParent>;
  id?: PullRequestCommitToIdResolver<TParent>;
  pullRequest?: PullRequestCommitToPullRequestResolver<TParent>;
  resourcePath?: PullRequestCommitToResourcePathResolver<TParent>;
  url?: PullRequestCommitToUrlResolver<TParent>;
}

export interface PullRequestCommitToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestChangedFileConnectionTypeResolver<TParent = any> {
  edges?: PullRequestChangedFileConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestChangedFileConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestChangedFileConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestChangedFileConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestChangedFileConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestChangedFileConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestChangedFileConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestChangedFileConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestChangedFileEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestChangedFileEdgeToCursorResolver<TParent>;
  node?: PullRequestChangedFileEdgeToNodeResolver<TParent>;
}

export interface PullRequestChangedFileEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestChangedFileEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestChangedFileTypeResolver<TParent = any> {
  additions?: PullRequestChangedFileToAdditionsResolver<TParent>;
  deletions?: PullRequestChangedFileToDeletionsResolver<TParent>;
  path?: PullRequestChangedFileToPathResolver<TParent>;
}

export interface PullRequestChangedFileToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestChangedFileToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestChangedFileToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestConnectionTypeResolver<TParent = any> {
  edges?: ReviewRequestConnectionToEdgesResolver<TParent>;
  nodes?: ReviewRequestConnectionToNodesResolver<TParent>;
  pageInfo?: ReviewRequestConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewRequestConnectionToTotalCountResolver<TParent>;
}

export interface ReviewRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestEdgeTypeResolver<TParent = any> {
  cursor?: ReviewRequestEdgeToCursorResolver<TParent>;
  node?: ReviewRequestEdgeToNodeResolver<TParent>;
}

export interface ReviewRequestEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestTypeResolver<TParent = any> {
  databaseId?: ReviewRequestToDatabaseIdResolver<TParent>;
  id?: ReviewRequestToIdResolver<TParent>;
  pullRequest?: ReviewRequestToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRequestedReviewerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Mannequin' | 'Team' | 'User';
}
export interface GQLPullRequestReviewThreadConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewThreadConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewThreadConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewThreadConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewThreadConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewThreadConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewThreadEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewThreadEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewThreadEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewThreadEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewThreadTypeResolver<TParent = any> {
  comments?: PullRequestReviewThreadToCommentsResolver<TParent>;
  diffSide?: PullRequestReviewThreadToDiffSideResolver<TParent>;
  id?: PullRequestReviewThreadToIdResolver<TParent>;
  isResolved?: PullRequestReviewThreadToIsResolvedResolver<TParent>;
  line?: PullRequestReviewThreadToLineResolver<TParent>;
  originalLine?: PullRequestReviewThreadToOriginalLineResolver<TParent>;
  originalStartLine?: PullRequestReviewThreadToOriginalStartLineResolver<TParent>;
  pullRequest?: PullRequestReviewThreadToPullRequestResolver<TParent>;
  repository?: PullRequestReviewThreadToRepositoryResolver<TParent>;
  resolvedBy?: PullRequestReviewThreadToResolvedByResolver<TParent>;
  startDiffSide?: PullRequestReviewThreadToStartDiffSideResolver<TParent>;
  startLine?: PullRequestReviewThreadToStartLineResolver<TParent>;
  viewerCanResolve?: PullRequestReviewThreadToViewerCanResolveResolver<TParent>;
  viewerCanUnresolve?: PullRequestReviewThreadToViewerCanUnresolveResolver<TParent>;
}

export interface PullRequestReviewThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  skip?: number;
}
export interface PullRequestReviewThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToDiffSideResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToIsResolvedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToOriginalLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToOriginalStartLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToResolvedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToStartDiffSideResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToStartLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToViewerCanResolveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToViewerCanUnresolveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewCommentConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewCommentConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewCommentConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewCommentConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewCommentEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewCommentEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewCommentEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewCommentTypeResolver<TParent = any> {
  author?: PullRequestReviewCommentToAuthorResolver<TParent>;
  authorAssociation?: PullRequestReviewCommentToAuthorAssociationResolver<TParent>;
  body?: PullRequestReviewCommentToBodyResolver<TParent>;
  bodyHTML?: PullRequestReviewCommentToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestReviewCommentToBodyTextResolver<TParent>;
  commit?: PullRequestReviewCommentToCommitResolver<TParent>;
  createdAt?: PullRequestReviewCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestReviewCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestReviewCommentToDatabaseIdResolver<TParent>;
  diffHunk?: PullRequestReviewCommentToDiffHunkResolver<TParent>;
  draftedAt?: PullRequestReviewCommentToDraftedAtResolver<TParent>;
  editor?: PullRequestReviewCommentToEditorResolver<TParent>;
  id?: PullRequestReviewCommentToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestReviewCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: PullRequestReviewCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: PullRequestReviewCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: PullRequestReviewCommentToMinimizedReasonResolver<TParent>;
  originalCommit?: PullRequestReviewCommentToOriginalCommitResolver<TParent>;
  originalPosition?: PullRequestReviewCommentToOriginalPositionResolver<TParent>;
  outdated?: PullRequestReviewCommentToOutdatedResolver<TParent>;
  path?: PullRequestReviewCommentToPathResolver<TParent>;
  position?: PullRequestReviewCommentToPositionResolver<TParent>;
  publishedAt?: PullRequestReviewCommentToPublishedAtResolver<TParent>;
  pullRequest?: PullRequestReviewCommentToPullRequestResolver<TParent>;
  pullRequestReview?: PullRequestReviewCommentToPullRequestReviewResolver<TParent>;
  reactionGroups?: PullRequestReviewCommentToReactionGroupsResolver<TParent>;
  reactions?: PullRequestReviewCommentToReactionsResolver<TParent>;
  replyTo?: PullRequestReviewCommentToReplyToResolver<TParent>;
  repository?: PullRequestReviewCommentToRepositoryResolver<TParent>;
  resourcePath?: PullRequestReviewCommentToResourcePathResolver<TParent>;
  state?: PullRequestReviewCommentToStateResolver<TParent>;
  updatedAt?: PullRequestReviewCommentToUpdatedAtResolver<TParent>;
  url?: PullRequestReviewCommentToUrlResolver<TParent>;
  userContentEdits?: PullRequestReviewCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: PullRequestReviewCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: PullRequestReviewCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: PullRequestReviewCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: PullRequestReviewCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestReviewCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestReviewCommentToViewerDidAuthorResolver<TParent>;
}

export interface PullRequestReviewCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDiffHunkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDraftedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOriginalCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOriginalPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOutdatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface PullRequestReviewCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReplyToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewTypeResolver<TParent = any> {
  author?: PullRequestReviewToAuthorResolver<TParent>;
  authorAssociation?: PullRequestReviewToAuthorAssociationResolver<TParent>;
  body?: PullRequestReviewToBodyResolver<TParent>;
  bodyHTML?: PullRequestReviewToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestReviewToBodyTextResolver<TParent>;
  comments?: PullRequestReviewToCommentsResolver<TParent>;
  commit?: PullRequestReviewToCommitResolver<TParent>;
  createdAt?: PullRequestReviewToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestReviewToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestReviewToDatabaseIdResolver<TParent>;
  editor?: PullRequestReviewToEditorResolver<TParent>;
  id?: PullRequestReviewToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestReviewToIncludesCreatedEditResolver<TParent>;
  lastEditedAt?: PullRequestReviewToLastEditedAtResolver<TParent>;
  onBehalfOf?: PullRequestReviewToOnBehalfOfResolver<TParent>;
  publishedAt?: PullRequestReviewToPublishedAtResolver<TParent>;
  pullRequest?: PullRequestReviewToPullRequestResolver<TParent>;
  reactionGroups?: PullRequestReviewToReactionGroupsResolver<TParent>;
  reactions?: PullRequestReviewToReactionsResolver<TParent>;
  repository?: PullRequestReviewToRepositoryResolver<TParent>;
  resourcePath?: PullRequestReviewToResourcePathResolver<TParent>;
  state?: PullRequestReviewToStateResolver<TParent>;
  submittedAt?: PullRequestReviewToSubmittedAtResolver<TParent>;
  updatedAt?: PullRequestReviewToUpdatedAtResolver<TParent>;
  url?: PullRequestReviewToUrlResolver<TParent>;
  userContentEdits?: PullRequestReviewToUserContentEditsResolver<TParent>;
  viewerCanDelete?: PullRequestReviewToViewerCanDeleteResolver<TParent>;
  viewerCanReact?: PullRequestReviewToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: PullRequestReviewToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestReviewToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestReviewToViewerDidAuthorResolver<TParent>;
}

export interface PullRequestReviewToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToOnBehalfOfArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToOnBehalfOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToOnBehalfOfArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToReactionsArgs {
  after?: string;
  before?: string;
  content?: GQLReactionContent;
  first?: number;
  last?: number;
  orderBy?: GQLReactionOrder;
}
export interface PullRequestReviewToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToSubmittedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSuggestedReviewerTypeResolver<TParent = any> {
  isAuthor?: SuggestedReviewerToIsAuthorResolver<TParent>;
  isCommenter?: SuggestedReviewerToIsCommenterResolver<TParent>;
  reviewer?: SuggestedReviewerToReviewerResolver<TParent>;
}

export interface SuggestedReviewerToIsAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerToIsCommenterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerToReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineConnectionTypeResolver<TParent = any> {
  edges?: PullRequestTimelineConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestTimelineConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestTimelineConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestTimelineConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestTimelineConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestTimelineItemEdgeToCursorResolver<TParent>;
  node?: PullRequestTimelineItemEdgeToNodeResolver<TParent>;
}

export interface PullRequestTimelineItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AssignedEvent' | 'BaseRefForcePushedEvent' | 'ClosedEvent' | 'Commit' | 'CommitCommentThread' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MergedEvent' | 'MilestonedEvent' | 'PullRequestReview' | 'PullRequestReviewComment' | 'PullRequestReviewThread' | 'ReferencedEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewRequestedEvent' | 'SubscribedEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnsubscribedEvent' | 'UserBlockedEvent';
}
export interface GQLBaseRefForcePushedEventTypeResolver<TParent = any> {
  actor?: BaseRefForcePushedEventToActorResolver<TParent>;
  afterCommit?: BaseRefForcePushedEventToAfterCommitResolver<TParent>;
  beforeCommit?: BaseRefForcePushedEventToBeforeCommitResolver<TParent>;
  createdAt?: BaseRefForcePushedEventToCreatedAtResolver<TParent>;
  id?: BaseRefForcePushedEventToIdResolver<TParent>;
  pullRequest?: BaseRefForcePushedEventToPullRequestResolver<TParent>;
  ref?: BaseRefForcePushedEventToRefResolver<TParent>;
}

export interface BaseRefForcePushedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToAfterCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToBeforeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitCommentThreadTypeResolver<TParent = any> {
  comments?: CommitCommentThreadToCommentsResolver<TParent>;
  commit?: CommitCommentThreadToCommitResolver<TParent>;
  id?: CommitCommentThreadToIdResolver<TParent>;
  path?: CommitCommentThreadToPathResolver<TParent>;
  position?: CommitCommentThreadToPositionResolver<TParent>;
  repository?: CommitCommentThreadToRepositoryResolver<TParent>;
}

export interface CommitCommentThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitCommentThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployedEventTypeResolver<TParent = any> {
  actor?: DeployedEventToActorResolver<TParent>;
  createdAt?: DeployedEventToCreatedAtResolver<TParent>;
  databaseId?: DeployedEventToDatabaseIdResolver<TParent>;
  deployment?: DeployedEventToDeploymentResolver<TParent>;
  id?: DeployedEventToIdResolver<TParent>;
  pullRequest?: DeployedEventToPullRequestResolver<TParent>;
  ref?: DeployedEventToRefResolver<TParent>;
}

export interface DeployedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeploymentEnvironmentChangedEventTypeResolver<TParent = any> {
  actor?: DeploymentEnvironmentChangedEventToActorResolver<TParent>;
  createdAt?: DeploymentEnvironmentChangedEventToCreatedAtResolver<TParent>;
  deploymentStatus?: DeploymentEnvironmentChangedEventToDeploymentStatusResolver<TParent>;
  id?: DeploymentEnvironmentChangedEventToIdResolver<TParent>;
  pullRequest?: DeploymentEnvironmentChangedEventToPullRequestResolver<TParent>;
}

export interface DeploymentEnvironmentChangedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToDeploymentStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHeadRefDeletedEventTypeResolver<TParent = any> {
  actor?: HeadRefDeletedEventToActorResolver<TParent>;
  createdAt?: HeadRefDeletedEventToCreatedAtResolver<TParent>;
  headRef?: HeadRefDeletedEventToHeadRefResolver<TParent>;
  headRefName?: HeadRefDeletedEventToHeadRefNameResolver<TParent>;
  id?: HeadRefDeletedEventToIdResolver<TParent>;
  pullRequest?: HeadRefDeletedEventToPullRequestResolver<TParent>;
}

export interface HeadRefDeletedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToHeadRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToHeadRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHeadRefForcePushedEventTypeResolver<TParent = any> {
  actor?: HeadRefForcePushedEventToActorResolver<TParent>;
  afterCommit?: HeadRefForcePushedEventToAfterCommitResolver<TParent>;
  beforeCommit?: HeadRefForcePushedEventToBeforeCommitResolver<TParent>;
  createdAt?: HeadRefForcePushedEventToCreatedAtResolver<TParent>;
  id?: HeadRefForcePushedEventToIdResolver<TParent>;
  pullRequest?: HeadRefForcePushedEventToPullRequestResolver<TParent>;
  ref?: HeadRefForcePushedEventToRefResolver<TParent>;
}

export interface HeadRefForcePushedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToAfterCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToBeforeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHeadRefRestoredEventTypeResolver<TParent = any> {
  actor?: HeadRefRestoredEventToActorResolver<TParent>;
  createdAt?: HeadRefRestoredEventToCreatedAtResolver<TParent>;
  id?: HeadRefRestoredEventToIdResolver<TParent>;
  pullRequest?: HeadRefRestoredEventToPullRequestResolver<TParent>;
}

export interface HeadRefRestoredEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMergedEventTypeResolver<TParent = any> {
  actor?: MergedEventToActorResolver<TParent>;
  commit?: MergedEventToCommitResolver<TParent>;
  createdAt?: MergedEventToCreatedAtResolver<TParent>;
  id?: MergedEventToIdResolver<TParent>;
  mergeRef?: MergedEventToMergeRefResolver<TParent>;
  mergeRefName?: MergedEventToMergeRefNameResolver<TParent>;
  pullRequest?: MergedEventToPullRequestResolver<TParent>;
  resourcePath?: MergedEventToResourcePathResolver<TParent>;
  url?: MergedEventToUrlResolver<TParent>;
}

export interface MergedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToMergeRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToMergeRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewDismissedEventTypeResolver<TParent = any> {
  actor?: ReviewDismissedEventToActorResolver<TParent>;
  createdAt?: ReviewDismissedEventToCreatedAtResolver<TParent>;
  databaseId?: ReviewDismissedEventToDatabaseIdResolver<TParent>;
  dismissalMessage?: ReviewDismissedEventToDismissalMessageResolver<TParent>;
  dismissalMessageHTML?: ReviewDismissedEventToDismissalMessageHTMLResolver<TParent>;
  id?: ReviewDismissedEventToIdResolver<TParent>;
  previousReviewState?: ReviewDismissedEventToPreviousReviewStateResolver<TParent>;
  pullRequest?: ReviewDismissedEventToPullRequestResolver<TParent>;
  pullRequestCommit?: ReviewDismissedEventToPullRequestCommitResolver<TParent>;
  resourcePath?: ReviewDismissedEventToResourcePathResolver<TParent>;
  review?: ReviewDismissedEventToReviewResolver<TParent>;
  url?: ReviewDismissedEventToUrlResolver<TParent>;
}

export interface ReviewDismissedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToDismissalMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToDismissalMessageHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPreviousReviewStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPullRequestCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestRemovedEventTypeResolver<TParent = any> {
  actor?: ReviewRequestRemovedEventToActorResolver<TParent>;
  createdAt?: ReviewRequestRemovedEventToCreatedAtResolver<TParent>;
  id?: ReviewRequestRemovedEventToIdResolver<TParent>;
  pullRequest?: ReviewRequestRemovedEventToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestRemovedEventToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestRemovedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewRequestedEventTypeResolver<TParent = any> {
  actor?: ReviewRequestedEventToActorResolver<TParent>;
  createdAt?: ReviewRequestedEventToCreatedAtResolver<TParent>;
  id?: ReviewRequestedEventToIdResolver<TParent>;
  pullRequest?: ReviewRequestedEventToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestedEventToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemsConnectionTypeResolver<TParent = any> {
  edges?: PullRequestTimelineItemsConnectionToEdgesResolver<TParent>;
  filteredCount?: PullRequestTimelineItemsConnectionToFilteredCountResolver<TParent>;
  nodes?: PullRequestTimelineItemsConnectionToNodesResolver<TParent>;
  pageCount?: PullRequestTimelineItemsConnectionToPageCountResolver<TParent>;
  pageInfo?: PullRequestTimelineItemsConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestTimelineItemsConnectionToTotalCountResolver<TParent>;
  updatedAt?: PullRequestTimelineItemsConnectionToUpdatedAtResolver<TParent>;
}

export interface PullRequestTimelineItemsConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsConnectionToFilteredCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsConnectionToPageCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsConnectionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemsEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestTimelineItemsEdgeToCursorResolver<TParent>;
  node?: PullRequestTimelineItemsEdgeToNodeResolver<TParent>;
}

export interface PullRequestTimelineItemsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestTimelineItemsTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AddedToProjectEvent' | 'AssignedEvent' | 'AutomaticBaseChangeFailedEvent' | 'AutomaticBaseChangeSucceededEvent' | 'BaseRefChangedEvent' | 'BaseRefForcePushedEvent' | 'ClosedEvent' | 'CommentDeletedEvent' | 'ConnectedEvent' | 'ConvertToDraftEvent' | 'ConvertedNoteToIssueEvent' | 'CrossReferencedEvent' | 'DemilestonedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'DisconnectedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'IssueComment' | 'LabeledEvent' | 'LockedEvent' | 'MarkedAsDuplicateEvent' | 'MentionedEvent' | 'MergedEvent' | 'MilestonedEvent' | 'MovedColumnsInProjectEvent' | 'PinnedEvent' | 'PullRequestCommit' | 'PullRequestCommitCommentThread' | 'PullRequestReview' | 'PullRequestReviewThread' | 'PullRequestRevisionMarker' | 'ReadyForReviewEvent' | 'ReferencedEvent' | 'RemovedFromProjectEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewRequestedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnmarkedAsDuplicateEvent' | 'UnpinnedEvent' | 'UnsubscribedEvent' | 'UserBlockedEvent';
}
export interface GQLAutomaticBaseChangeFailedEventTypeResolver<TParent = any> {
  actor?: AutomaticBaseChangeFailedEventToActorResolver<TParent>;
  createdAt?: AutomaticBaseChangeFailedEventToCreatedAtResolver<TParent>;
  id?: AutomaticBaseChangeFailedEventToIdResolver<TParent>;
  newBase?: AutomaticBaseChangeFailedEventToNewBaseResolver<TParent>;
  oldBase?: AutomaticBaseChangeFailedEventToOldBaseResolver<TParent>;
  pullRequest?: AutomaticBaseChangeFailedEventToPullRequestResolver<TParent>;
}

export interface AutomaticBaseChangeFailedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeFailedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeFailedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeFailedEventToNewBaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeFailedEventToOldBaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeFailedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutomaticBaseChangeSucceededEventTypeResolver<TParent = any> {
  actor?: AutomaticBaseChangeSucceededEventToActorResolver<TParent>;
  createdAt?: AutomaticBaseChangeSucceededEventToCreatedAtResolver<TParent>;
  id?: AutomaticBaseChangeSucceededEventToIdResolver<TParent>;
  newBase?: AutomaticBaseChangeSucceededEventToNewBaseResolver<TParent>;
  oldBase?: AutomaticBaseChangeSucceededEventToOldBaseResolver<TParent>;
  pullRequest?: AutomaticBaseChangeSucceededEventToPullRequestResolver<TParent>;
}

export interface AutomaticBaseChangeSucceededEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeSucceededEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeSucceededEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeSucceededEventToNewBaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeSucceededEventToOldBaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutomaticBaseChangeSucceededEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBaseRefChangedEventTypeResolver<TParent = any> {
  actor?: BaseRefChangedEventToActorResolver<TParent>;
  createdAt?: BaseRefChangedEventToCreatedAtResolver<TParent>;
  databaseId?: BaseRefChangedEventToDatabaseIdResolver<TParent>;
  id?: BaseRefChangedEventToIdResolver<TParent>;
}

export interface BaseRefChangedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConvertToDraftEventTypeResolver<TParent = any> {
  actor?: ConvertToDraftEventToActorResolver<TParent>;
  createdAt?: ConvertToDraftEventToCreatedAtResolver<TParent>;
  id?: ConvertToDraftEventToIdResolver<TParent>;
  pullRequest?: ConvertToDraftEventToPullRequestResolver<TParent>;
  resourcePath?: ConvertToDraftEventToResourcePathResolver<TParent>;
  url?: ConvertToDraftEventToUrlResolver<TParent>;
}

export interface ConvertToDraftEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertToDraftEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertToDraftEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertToDraftEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertToDraftEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertToDraftEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestCommitCommentThreadTypeResolver<TParent = any> {
  comments?: PullRequestCommitCommentThreadToCommentsResolver<TParent>;
  commit?: PullRequestCommitCommentThreadToCommitResolver<TParent>;
  id?: PullRequestCommitCommentThreadToIdResolver<TParent>;
  path?: PullRequestCommitCommentThreadToPathResolver<TParent>;
  position?: PullRequestCommitCommentThreadToPositionResolver<TParent>;
  pullRequest?: PullRequestCommitCommentThreadToPullRequestResolver<TParent>;
  repository?: PullRequestCommitCommentThreadToRepositoryResolver<TParent>;
}

export interface PullRequestCommitCommentThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestCommitCommentThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestCommitCommentThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitCommentThreadToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitCommentThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitCommentThreadToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitCommentThreadToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitCommentThreadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitCommentThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestRevisionMarkerTypeResolver<TParent = any> {
  createdAt?: PullRequestRevisionMarkerToCreatedAtResolver<TParent>;
  lastSeenCommit?: PullRequestRevisionMarkerToLastSeenCommitResolver<TParent>;
  pullRequest?: PullRequestRevisionMarkerToPullRequestResolver<TParent>;
}

export interface PullRequestRevisionMarkerToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestRevisionMarkerToLastSeenCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestRevisionMarkerToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReadyForReviewEventTypeResolver<TParent = any> {
  actor?: ReadyForReviewEventToActorResolver<TParent>;
  createdAt?: ReadyForReviewEventToCreatedAtResolver<TParent>;
  id?: ReadyForReviewEventToIdResolver<TParent>;
  pullRequest?: ReadyForReviewEventToPullRequestResolver<TParent>;
  resourcePath?: ReadyForReviewEventToResourcePathResolver<TParent>;
  url?: ReadyForReviewEventToUrlResolver<TParent>;
}

export interface ReadyForReviewEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReadyForReviewEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReadyForReviewEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReadyForReviewEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReadyForReviewEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReadyForReviewEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageVersionStatisticsTypeResolver<TParent = any> {
  downloadsTotalCount?: PackageVersionStatisticsToDownloadsTotalCountResolver<TParent>;
}

export interface PackageVersionStatisticsToDownloadsTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageStatisticsTypeResolver<TParent = any> {
  downloadsTotalCount?: PackageStatisticsToDownloadsTotalCountResolver<TParent>;
}

export interface PackageStatisticsToDownloadsTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageVersionConnectionTypeResolver<TParent = any> {
  edges?: PackageVersionConnectionToEdgesResolver<TParent>;
  nodes?: PackageVersionConnectionToNodesResolver<TParent>;
  pageInfo?: PackageVersionConnectionToPageInfoResolver<TParent>;
  totalCount?: PackageVersionConnectionToTotalCountResolver<TParent>;
}

export interface PackageVersionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageVersionEdgeTypeResolver<TParent = any> {
  cursor?: PackageVersionEdgeToCursorResolver<TParent>;
  node?: PackageVersionEdgeToNodeResolver<TParent>;
}

export interface PackageVersionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageVersionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProfileOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface GQLProfileItemShowcaseTypeResolver<TParent = any> {
  hasPinnedItems?: ProfileItemShowcaseToHasPinnedItemsResolver<TParent>;
  items?: ProfileItemShowcaseToItemsResolver<TParent>;
}

export interface ProfileItemShowcaseToHasPinnedItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProfileItemShowcaseToItemsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProfileItemShowcaseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProfileItemShowcaseToItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPinnableItemConnectionTypeResolver<TParent = any> {
  edges?: PinnableItemConnectionToEdgesResolver<TParent>;
  nodes?: PinnableItemConnectionToNodesResolver<TParent>;
  pageInfo?: PinnableItemConnectionToPageInfoResolver<TParent>;
  totalCount?: PinnableItemConnectionToTotalCountResolver<TParent>;
}

export interface PinnableItemConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnableItemConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnableItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnableItemConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPinnableItemEdgeTypeResolver<TParent = any> {
  cursor?: PinnableItemEdgeToCursorResolver<TParent>;
  node?: PinnableItemEdgeToNodeResolver<TParent>;
}

export interface PinnableItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnableItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPinnableItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Gist' | 'Repository';
}
export interface GQLGistTypeResolver<TParent = any> {
  comments?: GistToCommentsResolver<TParent>;
  createdAt?: GistToCreatedAtResolver<TParent>;
  description?: GistToDescriptionResolver<TParent>;
  files?: GistToFilesResolver<TParent>;
  forks?: GistToForksResolver<TParent>;
  id?: GistToIdResolver<TParent>;
  isFork?: GistToIsForkResolver<TParent>;
  isPublic?: GistToIsPublicResolver<TParent>;
  name?: GistToNameResolver<TParent>;
  owner?: GistToOwnerResolver<TParent>;
  pushedAt?: GistToPushedAtResolver<TParent>;
  resourcePath?: GistToResourcePathResolver<TParent>;
  stargazers?: GistToStargazersResolver<TParent>;
  updatedAt?: GistToUpdatedAtResolver<TParent>;
  url?: GistToUrlResolver<TParent>;
  viewerHasStarred?: GistToViewerHasStarredResolver<TParent>;
}

export interface GistToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface GistToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToFilesArgs {
  limit?: number;
  oid?: GQLGitObjectID;
}
export interface GistToFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToForksArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLGistOrder;
}
export interface GistToForksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToForksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIsForkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToPushedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLStarOrder;
}
export interface GistToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistCommentConnectionTypeResolver<TParent = any> {
  edges?: GistCommentConnectionToEdgesResolver<TParent>;
  nodes?: GistCommentConnectionToNodesResolver<TParent>;
  pageInfo?: GistCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: GistCommentConnectionToTotalCountResolver<TParent>;
}

export interface GistCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistCommentEdgeTypeResolver<TParent = any> {
  cursor?: GistCommentEdgeToCursorResolver<TParent>;
  node?: GistCommentEdgeToNodeResolver<TParent>;
}

export interface GistCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistCommentTypeResolver<TParent = any> {
  author?: GistCommentToAuthorResolver<TParent>;
  authorAssociation?: GistCommentToAuthorAssociationResolver<TParent>;
  body?: GistCommentToBodyResolver<TParent>;
  bodyHTML?: GistCommentToBodyHTMLResolver<TParent>;
  bodyText?: GistCommentToBodyTextResolver<TParent>;
  createdAt?: GistCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: GistCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: GistCommentToDatabaseIdResolver<TParent>;
  editor?: GistCommentToEditorResolver<TParent>;
  gist?: GistCommentToGistResolver<TParent>;
  id?: GistCommentToIdResolver<TParent>;
  includesCreatedEdit?: GistCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: GistCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: GistCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: GistCommentToMinimizedReasonResolver<TParent>;
  publishedAt?: GistCommentToPublishedAtResolver<TParent>;
  updatedAt?: GistCommentToUpdatedAtResolver<TParent>;
  userContentEdits?: GistCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: GistCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: GistCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanUpdate?: GistCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: GistCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: GistCommentToViewerDidAuthorResolver<TParent>;
}

export interface GistCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToGistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface GistCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistFileTypeResolver<TParent = any> {
  encodedName?: GistFileToEncodedNameResolver<TParent>;
  encoding?: GistFileToEncodingResolver<TParent>;
  extension?: GistFileToExtensionResolver<TParent>;
  isImage?: GistFileToIsImageResolver<TParent>;
  isTruncated?: GistFileToIsTruncatedResolver<TParent>;
  language?: GistFileToLanguageResolver<TParent>;
  name?: GistFileToNameResolver<TParent>;
  size?: GistFileToSizeResolver<TParent>;
  text?: GistFileToTextResolver<TParent>;
}

export interface GistFileToEncodedNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToEncodingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToExtensionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToIsImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToIsTruncatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistFileToTextArgs {
  truncate?: number;
}
export interface GistFileToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistFileToTextArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistConnectionTypeResolver<TParent = any> {
  edges?: GistConnectionToEdgesResolver<TParent>;
  nodes?: GistConnectionToNodesResolver<TParent>;
  pageInfo?: GistConnectionToPageInfoResolver<TParent>;
  totalCount?: GistConnectionToTotalCountResolver<TParent>;
}

export interface GistConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGistEdgeTypeResolver<TParent = any> {
  cursor?: GistEdgeToCursorResolver<TParent>;
  node?: GistEdgeToNodeResolver<TParent>;
}

export interface GistEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface GQLSponsorsListingTypeResolver<TParent = any> {
  createdAt?: SponsorsListingToCreatedAtResolver<TParent>;
  fullDescription?: SponsorsListingToFullDescriptionResolver<TParent>;
  fullDescriptionHTML?: SponsorsListingToFullDescriptionHTMLResolver<TParent>;
  id?: SponsorsListingToIdResolver<TParent>;
  name?: SponsorsListingToNameResolver<TParent>;
  shortDescription?: SponsorsListingToShortDescriptionResolver<TParent>;
  slug?: SponsorsListingToSlugResolver<TParent>;
  tiers?: SponsorsListingToTiersResolver<TParent>;
}

export interface SponsorsListingToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToFullDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToFullDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsListingToTiersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLSponsorsTierOrder;
}
export interface SponsorsListingToTiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SponsorsListingToTiersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorsTierConnectionTypeResolver<TParent = any> {
  edges?: SponsorsTierConnectionToEdgesResolver<TParent>;
  nodes?: SponsorsTierConnectionToNodesResolver<TParent>;
  pageInfo?: SponsorsTierConnectionToPageInfoResolver<TParent>;
  totalCount?: SponsorsTierConnectionToTotalCountResolver<TParent>;
}

export interface SponsorsTierConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorsTierEdgeTypeResolver<TParent = any> {
  cursor?: SponsorsTierEdgeToCursorResolver<TParent>;
  node?: SponsorsTierEdgeToNodeResolver<TParent>;
}

export interface SponsorsTierEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorsTierTypeResolver<TParent = any> {
  adminInfo?: SponsorsTierToAdminInfoResolver<TParent>;
  createdAt?: SponsorsTierToCreatedAtResolver<TParent>;
  description?: SponsorsTierToDescriptionResolver<TParent>;
  descriptionHTML?: SponsorsTierToDescriptionHTMLResolver<TParent>;
  id?: SponsorsTierToIdResolver<TParent>;
  monthlyPriceInCents?: SponsorsTierToMonthlyPriceInCentsResolver<TParent>;
  monthlyPriceInDollars?: SponsorsTierToMonthlyPriceInDollarsResolver<TParent>;
  name?: SponsorsTierToNameResolver<TParent>;
  sponsorsListing?: SponsorsTierToSponsorsListingResolver<TParent>;
  updatedAt?: SponsorsTierToUpdatedAtResolver<TParent>;
}

export interface SponsorsTierToAdminInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToMonthlyPriceInCentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToMonthlyPriceInDollarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToSponsorsListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorsTierToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorsTierAdminInfoTypeResolver<TParent = any> {
  sponsorships?: SponsorsTierAdminInfoToSponsorshipsResolver<TParent>;
}

export interface SponsorsTierAdminInfoToSponsorshipsArgs {
  after?: string;
  before?: string;
  first?: number;
  includePrivate?: boolean;
  last?: number;
  orderBy?: GQLSponsorshipOrder;
}
export interface SponsorsTierAdminInfoToSponsorshipsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SponsorsTierAdminInfoToSponsorshipsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorshipConnectionTypeResolver<TParent = any> {
  edges?: SponsorshipConnectionToEdgesResolver<TParent>;
  nodes?: SponsorshipConnectionToNodesResolver<TParent>;
  pageInfo?: SponsorshipConnectionToPageInfoResolver<TParent>;
  totalCount?: SponsorshipConnectionToTotalCountResolver<TParent>;
}

export interface SponsorshipConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorshipEdgeTypeResolver<TParent = any> {
  cursor?: SponsorshipEdgeToCursorResolver<TParent>;
  node?: SponsorshipEdgeToNodeResolver<TParent>;
}

export interface SponsorshipEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorshipTypeResolver<TParent = any> {
  createdAt?: SponsorshipToCreatedAtResolver<TParent>;
  id?: SponsorshipToIdResolver<TParent>;
  maintainer?: SponsorshipToMaintainerResolver<TParent>;
  privacyLevel?: SponsorshipToPrivacyLevelResolver<TParent>;
  sponsor?: SponsorshipToSponsorResolver<TParent>;
  sponsorEntity?: SponsorshipToSponsorEntityResolver<TParent>;
  sponsorable?: SponsorshipToSponsorableResolver<TParent>;
  tier?: SponsorshipToTierResolver<TParent>;
}

export interface SponsorshipToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToMaintainerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToPrivacyLevelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToSponsorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToSponsorEntityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToSponsorableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SponsorshipToTierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSponsorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface GQLContributionsCollectionTypeResolver<TParent = any> {
  commitContributionsByRepository?: ContributionsCollectionToCommitContributionsByRepositoryResolver<TParent>;
  contributionCalendar?: ContributionsCollectionToContributionCalendarResolver<TParent>;
  contributionYears?: ContributionsCollectionToContributionYearsResolver<TParent>;
  doesEndInCurrentMonth?: ContributionsCollectionToDoesEndInCurrentMonthResolver<TParent>;
  earliestRestrictedContributionDate?: ContributionsCollectionToEarliestRestrictedContributionDateResolver<TParent>;
  endedAt?: ContributionsCollectionToEndedAtResolver<TParent>;
  firstIssueContribution?: ContributionsCollectionToFirstIssueContributionResolver<TParent>;
  firstPullRequestContribution?: ContributionsCollectionToFirstPullRequestContributionResolver<TParent>;
  firstRepositoryContribution?: ContributionsCollectionToFirstRepositoryContributionResolver<TParent>;
  hasActivityInThePast?: ContributionsCollectionToHasActivityInThePastResolver<TParent>;
  hasAnyContributions?: ContributionsCollectionToHasAnyContributionsResolver<TParent>;
  hasAnyRestrictedContributions?: ContributionsCollectionToHasAnyRestrictedContributionsResolver<TParent>;
  isSingleDay?: ContributionsCollectionToIsSingleDayResolver<TParent>;
  issueContributions?: ContributionsCollectionToIssueContributionsResolver<TParent>;
  issueContributionsByRepository?: ContributionsCollectionToIssueContributionsByRepositoryResolver<TParent>;
  joinedGitHubContribution?: ContributionsCollectionToJoinedGitHubContributionResolver<TParent>;
  latestRestrictedContributionDate?: ContributionsCollectionToLatestRestrictedContributionDateResolver<TParent>;
  mostRecentCollectionWithActivity?: ContributionsCollectionToMostRecentCollectionWithActivityResolver<TParent>;
  mostRecentCollectionWithoutActivity?: ContributionsCollectionToMostRecentCollectionWithoutActivityResolver<TParent>;
  popularIssueContribution?: ContributionsCollectionToPopularIssueContributionResolver<TParent>;
  popularPullRequestContribution?: ContributionsCollectionToPopularPullRequestContributionResolver<TParent>;
  pullRequestContributions?: ContributionsCollectionToPullRequestContributionsResolver<TParent>;
  pullRequestContributionsByRepository?: ContributionsCollectionToPullRequestContributionsByRepositoryResolver<TParent>;
  pullRequestReviewContributions?: ContributionsCollectionToPullRequestReviewContributionsResolver<TParent>;
  pullRequestReviewContributionsByRepository?: ContributionsCollectionToPullRequestReviewContributionsByRepositoryResolver<TParent>;
  repositoryContributions?: ContributionsCollectionToRepositoryContributionsResolver<TParent>;
  restrictedContributionsCount?: ContributionsCollectionToRestrictedContributionsCountResolver<TParent>;
  startedAt?: ContributionsCollectionToStartedAtResolver<TParent>;
  totalCommitContributions?: ContributionsCollectionToTotalCommitContributionsResolver<TParent>;
  totalIssueContributions?: ContributionsCollectionToTotalIssueContributionsResolver<TParent>;
  totalPullRequestContributions?: ContributionsCollectionToTotalPullRequestContributionsResolver<TParent>;
  totalPullRequestReviewContributions?: ContributionsCollectionToTotalPullRequestReviewContributionsResolver<TParent>;
  totalRepositoriesWithContributedCommits?: ContributionsCollectionToTotalRepositoriesWithContributedCommitsResolver<TParent>;
  totalRepositoriesWithContributedIssues?: ContributionsCollectionToTotalRepositoriesWithContributedIssuesResolver<TParent>;
  totalRepositoriesWithContributedPullRequestReviews?: ContributionsCollectionToTotalRepositoriesWithContributedPullRequestReviewsResolver<TParent>;
  totalRepositoriesWithContributedPullRequests?: ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsResolver<TParent>;
  totalRepositoryContributions?: ContributionsCollectionToTotalRepositoryContributionsResolver<TParent>;
  user?: ContributionsCollectionToUserResolver<TParent>;
}

export interface ContributionsCollectionToCommitContributionsByRepositoryArgs {
  maxRepositories?: number;
}
export interface ContributionsCollectionToCommitContributionsByRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToCommitContributionsByRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToContributionCalendarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToContributionYearsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToDoesEndInCurrentMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToEarliestRestrictedContributionDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToEndedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToFirstIssueContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToFirstPullRequestContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToFirstRepositoryContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToHasActivityInThePastResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToHasAnyContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToHasAnyRestrictedContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToIsSingleDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToIssueContributionsArgs {
  after?: string;
  before?: string;
  excludeFirst?: boolean;
  excludePopular?: boolean;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface ContributionsCollectionToIssueContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToIssueContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToIssueContributionsByRepositoryArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
  maxRepositories?: number;
}
export interface ContributionsCollectionToIssueContributionsByRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToIssueContributionsByRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToJoinedGitHubContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToLatestRestrictedContributionDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToMostRecentCollectionWithActivityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToMostRecentCollectionWithoutActivityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPopularIssueContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPopularPullRequestContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPullRequestContributionsArgs {
  after?: string;
  before?: string;
  excludeFirst?: boolean;
  excludePopular?: boolean;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface ContributionsCollectionToPullRequestContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToPullRequestContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPullRequestContributionsByRepositoryArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
  maxRepositories?: number;
}
export interface ContributionsCollectionToPullRequestContributionsByRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToPullRequestContributionsByRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPullRequestReviewContributionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface ContributionsCollectionToPullRequestReviewContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToPullRequestReviewContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPullRequestReviewContributionsByRepositoryArgs {
  maxRepositories?: number;
}
export interface ContributionsCollectionToPullRequestReviewContributionsByRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToPullRequestReviewContributionsByRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToRepositoryContributionsArgs {
  after?: string;
  before?: string;
  excludeFirst?: boolean;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface ContributionsCollectionToRepositoryContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToRepositoryContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToRestrictedContributionsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToStartedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalCommitContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalIssueContributionsArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalIssueContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalIssueContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalPullRequestContributionsArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalPullRequestContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalPullRequestContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalPullRequestReviewContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedCommitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedIssuesArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalRepositoriesWithContributedIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalRepositoriesWithContributedIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedPullRequestReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoryContributionsArgs {
  excludeFirst?: boolean;
}
export interface ContributionsCollectionToTotalRepositoryContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalRepositoryContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommitContributionsByRepositoryTypeResolver<TParent = any> {
  contributions?: CommitContributionsByRepositoryToContributionsResolver<TParent>;
  repository?: CommitContributionsByRepositoryToRepositoryResolver<TParent>;
  resourcePath?: CommitContributionsByRepositoryToResourcePathResolver<TParent>;
  url?: CommitContributionsByRepositoryToUrlResolver<TParent>;
}

export interface CommitContributionsByRepositoryToContributionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLCommitContributionOrder;
}
export interface CommitContributionsByRepositoryToContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitContributionsByRepositoryToContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitContributionsByRepositoryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitContributionsByRepositoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitContributionsByRepositoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedCommitContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedCommitContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedCommitContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedCommitContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedCommitContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedCommitContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedCommitContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedCommitContributionEdgeToCursorResolver<TParent>;
  node?: CreatedCommitContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedCommitContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedCommitContributionTypeResolver<TParent = any> {
  commitCount?: CreatedCommitContributionToCommitCountResolver<TParent>;
  isRestricted?: CreatedCommitContributionToIsRestrictedResolver<TParent>;
  occurredAt?: CreatedCommitContributionToOccurredAtResolver<TParent>;
  repository?: CreatedCommitContributionToRepositoryResolver<TParent>;
  resourcePath?: CreatedCommitContributionToResourcePathResolver<TParent>;
  url?: CreatedCommitContributionToUrlResolver<TParent>;
  user?: CreatedCommitContributionToUserResolver<TParent>;
}

export interface CreatedCommitContributionToCommitCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedCommitContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedCommitContribution' | 'CreatedIssueContribution' | 'RestrictedContribution' | 'CreatedPullRequestContribution' | 'CreatedRepositoryContribution' | 'JoinedGitHubContribution' | 'CreatedPullRequestReviewContribution';
}
export interface GQLContributionCalendarTypeResolver<TParent = any> {
  colors?: ContributionCalendarToColorsResolver<TParent>;
  isHalloween?: ContributionCalendarToIsHalloweenResolver<TParent>;
  months?: ContributionCalendarToMonthsResolver<TParent>;
  totalContributions?: ContributionCalendarToTotalContributionsResolver<TParent>;
  weeks?: ContributionCalendarToWeeksResolver<TParent>;
}

export interface ContributionCalendarToColorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToIsHalloweenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToMonthsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToTotalContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToWeeksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContributionCalendarMonthTypeResolver<TParent = any> {
  firstDay?: ContributionCalendarMonthToFirstDayResolver<TParent>;
  name?: ContributionCalendarMonthToNameResolver<TParent>;
  totalWeeks?: ContributionCalendarMonthToTotalWeeksResolver<TParent>;
  year?: ContributionCalendarMonthToYearResolver<TParent>;
}

export interface ContributionCalendarMonthToFirstDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthToTotalWeeksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContributionCalendarWeekTypeResolver<TParent = any> {
  contributionDays?: ContributionCalendarWeekToContributionDaysResolver<TParent>;
  firstDay?: ContributionCalendarWeekToFirstDayResolver<TParent>;
}

export interface ContributionCalendarWeekToContributionDaysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarWeekToFirstDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContributionCalendarDayTypeResolver<TParent = any> {
  color?: ContributionCalendarDayToColorResolver<TParent>;
  contributionCount?: ContributionCalendarDayToContributionCountResolver<TParent>;
  date?: ContributionCalendarDayToDateResolver<TParent>;
  weekday?: ContributionCalendarDayToWeekdayResolver<TParent>;
}

export interface ContributionCalendarDayToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayToContributionCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayToWeekdayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedIssueOrRestrictedContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedIssueContribution' | 'RestrictedContribution';
}
export interface GQLCreatedIssueContributionTypeResolver<TParent = any> {
  isRestricted?: CreatedIssueContributionToIsRestrictedResolver<TParent>;
  issue?: CreatedIssueContributionToIssueResolver<TParent>;
  occurredAt?: CreatedIssueContributionToOccurredAtResolver<TParent>;
  resourcePath?: CreatedIssueContributionToResourcePathResolver<TParent>;
  url?: CreatedIssueContributionToUrlResolver<TParent>;
  user?: CreatedIssueContributionToUserResolver<TParent>;
}

export interface CreatedIssueContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRestrictedContributionTypeResolver<TParent = any> {
  isRestricted?: RestrictedContributionToIsRestrictedResolver<TParent>;
  occurredAt?: RestrictedContributionToOccurredAtResolver<TParent>;
  resourcePath?: RestrictedContributionToResourcePathResolver<TParent>;
  url?: RestrictedContributionToUrlResolver<TParent>;
  user?: RestrictedContributionToUserResolver<TParent>;
}

export interface RestrictedContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedPullRequestOrRestrictedContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedPullRequestContribution' | 'RestrictedContribution';
}
export interface GQLCreatedPullRequestContributionTypeResolver<TParent = any> {
  isRestricted?: CreatedPullRequestContributionToIsRestrictedResolver<TParent>;
  occurredAt?: CreatedPullRequestContributionToOccurredAtResolver<TParent>;
  pullRequest?: CreatedPullRequestContributionToPullRequestResolver<TParent>;
  resourcePath?: CreatedPullRequestContributionToResourcePathResolver<TParent>;
  url?: CreatedPullRequestContributionToUrlResolver<TParent>;
  user?: CreatedPullRequestContributionToUserResolver<TParent>;
}

export interface CreatedPullRequestContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedRepositoryOrRestrictedContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedRepositoryContribution' | 'RestrictedContribution';
}
export interface GQLCreatedRepositoryContributionTypeResolver<TParent = any> {
  isRestricted?: CreatedRepositoryContributionToIsRestrictedResolver<TParent>;
  occurredAt?: CreatedRepositoryContributionToOccurredAtResolver<TParent>;
  repository?: CreatedRepositoryContributionToRepositoryResolver<TParent>;
  resourcePath?: CreatedRepositoryContributionToResourcePathResolver<TParent>;
  url?: CreatedRepositoryContributionToUrlResolver<TParent>;
  user?: CreatedRepositoryContributionToUserResolver<TParent>;
}

export interface CreatedRepositoryContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedIssueContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedIssueContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedIssueContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedIssueContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedIssueContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedIssueContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedIssueContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedIssueContributionEdgeToCursorResolver<TParent>;
  node?: CreatedIssueContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedIssueContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIssueContributionsByRepositoryTypeResolver<TParent = any> {
  contributions?: IssueContributionsByRepositoryToContributionsResolver<TParent>;
  repository?: IssueContributionsByRepositoryToRepositoryResolver<TParent>;
}

export interface IssueContributionsByRepositoryToContributionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface IssueContributionsByRepositoryToContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueContributionsByRepositoryToContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueContributionsByRepositoryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLJoinedGitHubContributionTypeResolver<TParent = any> {
  isRestricted?: JoinedGitHubContributionToIsRestrictedResolver<TParent>;
  occurredAt?: JoinedGitHubContributionToOccurredAtResolver<TParent>;
  resourcePath?: JoinedGitHubContributionToResourcePathResolver<TParent>;
  url?: JoinedGitHubContributionToUrlResolver<TParent>;
  user?: JoinedGitHubContributionToUserResolver<TParent>;
}

export interface JoinedGitHubContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedPullRequestContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedPullRequestContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedPullRequestContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedPullRequestContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedPullRequestContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedPullRequestContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedPullRequestContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedPullRequestContributionEdgeToCursorResolver<TParent>;
  node?: CreatedPullRequestContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedPullRequestContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestContributionsByRepositoryTypeResolver<TParent = any> {
  contributions?: PullRequestContributionsByRepositoryToContributionsResolver<TParent>;
  repository?: PullRequestContributionsByRepositoryToRepositoryResolver<TParent>;
}

export interface PullRequestContributionsByRepositoryToContributionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface PullRequestContributionsByRepositoryToContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestContributionsByRepositoryToContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestContributionsByRepositoryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedPullRequestReviewContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedPullRequestReviewContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedPullRequestReviewContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedPullRequestReviewContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedPullRequestReviewContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedPullRequestReviewContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedPullRequestReviewContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedPullRequestReviewContributionEdgeToCursorResolver<TParent>;
  node?: CreatedPullRequestReviewContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedPullRequestReviewContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedPullRequestReviewContributionTypeResolver<TParent = any> {
  isRestricted?: CreatedPullRequestReviewContributionToIsRestrictedResolver<TParent>;
  occurredAt?: CreatedPullRequestReviewContributionToOccurredAtResolver<TParent>;
  pullRequest?: CreatedPullRequestReviewContributionToPullRequestResolver<TParent>;
  pullRequestReview?: CreatedPullRequestReviewContributionToPullRequestReviewResolver<TParent>;
  repository?: CreatedPullRequestReviewContributionToRepositoryResolver<TParent>;
  resourcePath?: CreatedPullRequestReviewContributionToResourcePathResolver<TParent>;
  url?: CreatedPullRequestReviewContributionToUrlResolver<TParent>;
  user?: CreatedPullRequestReviewContributionToUserResolver<TParent>;
}

export interface CreatedPullRequestReviewContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestReviewContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPullRequestReviewContributionsByRepositoryTypeResolver<TParent = any> {
  contributions?: PullRequestReviewContributionsByRepositoryToContributionsResolver<TParent>;
  repository?: PullRequestReviewContributionsByRepositoryToRepositoryResolver<TParent>;
}

export interface PullRequestReviewContributionsByRepositoryToContributionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLContributionOrder;
}
export interface PullRequestReviewContributionsByRepositoryToContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewContributionsByRepositoryToContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewContributionsByRepositoryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedRepositoryContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedRepositoryContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedRepositoryContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedRepositoryContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedRepositoryContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedRepositoryContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatedRepositoryContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedRepositoryContributionEdgeToCursorResolver<TParent>;
  node?: CreatedRepositoryContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedRepositoryContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedRepositoryContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFollowerConnectionTypeResolver<TParent = any> {
  edges?: FollowerConnectionToEdgesResolver<TParent>;
  nodes?: FollowerConnectionToNodesResolver<TParent>;
  pageInfo?: FollowerConnectionToPageInfoResolver<TParent>;
  totalCount?: FollowerConnectionToTotalCountResolver<TParent>;
}

export interface FollowerConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFollowingConnectionTypeResolver<TParent = any> {
  edges?: FollowingConnectionToEdgesResolver<TParent>;
  nodes?: FollowingConnectionToNodesResolver<TParent>;
  pageInfo?: FollowingConnectionToPageInfoResolver<TParent>;
  totalCount?: FollowingConnectionToTotalCountResolver<TParent>;
}

export interface FollowingConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationConnectionTypeResolver<TParent = any> {
  edges?: OrganizationConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationEdgeToCursorResolver<TParent>;
  node?: OrganizationEdgeToNodeResolver<TParent>;
}

export interface OrganizationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPublicKeyConnectionTypeResolver<TParent = any> {
  edges?: PublicKeyConnectionToEdgesResolver<TParent>;
  nodes?: PublicKeyConnectionToNodesResolver<TParent>;
  pageInfo?: PublicKeyConnectionToPageInfoResolver<TParent>;
  totalCount?: PublicKeyConnectionToTotalCountResolver<TParent>;
}

export interface PublicKeyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPublicKeyEdgeTypeResolver<TParent = any> {
  cursor?: PublicKeyEdgeToCursorResolver<TParent>;
  node?: PublicKeyEdgeToNodeResolver<TParent>;
}

export interface PublicKeyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPublicKeyTypeResolver<TParent = any> {
  accessedAt?: PublicKeyToAccessedAtResolver<TParent>;
  createdAt?: PublicKeyToCreatedAtResolver<TParent>;
  fingerprint?: PublicKeyToFingerprintResolver<TParent>;
  id?: PublicKeyToIdResolver<TParent>;
  isReadOnly?: PublicKeyToIsReadOnlyResolver<TParent>;
  key?: PublicKeyToKeyResolver<TParent>;
  updatedAt?: PublicKeyToUpdatedAtResolver<TParent>;
}

export interface PublicKeyToAccessedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToFingerprintResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToIsReadOnlyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSavedReplyConnectionTypeResolver<TParent = any> {
  edges?: SavedReplyConnectionToEdgesResolver<TParent>;
  nodes?: SavedReplyConnectionToNodesResolver<TParent>;
  pageInfo?: SavedReplyConnectionToPageInfoResolver<TParent>;
  totalCount?: SavedReplyConnectionToTotalCountResolver<TParent>;
}

export interface SavedReplyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSavedReplyEdgeTypeResolver<TParent = any> {
  cursor?: SavedReplyEdgeToCursorResolver<TParent>;
  node?: SavedReplyEdgeToNodeResolver<TParent>;
}

export interface SavedReplyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSavedReplyTypeResolver<TParent = any> {
  body?: SavedReplyToBodyResolver<TParent>;
  bodyHTML?: SavedReplyToBodyHTMLResolver<TParent>;
  databaseId?: SavedReplyToDatabaseIdResolver<TParent>;
  id?: SavedReplyToIdResolver<TParent>;
  title?: SavedReplyToTitleResolver<TParent>;
  user?: SavedReplyToUserResolver<TParent>;
}

export interface SavedReplyToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SavedReplyToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStarredRepositoryConnectionTypeResolver<TParent = any> {
  edges?: StarredRepositoryConnectionToEdgesResolver<TParent>;
  isOverLimit?: StarredRepositoryConnectionToIsOverLimitResolver<TParent>;
  nodes?: StarredRepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: StarredRepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: StarredRepositoryConnectionToTotalCountResolver<TParent>;
}

export interface StarredRepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToIsOverLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStarredRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: StarredRepositoryEdgeToCursorResolver<TParent>;
  node?: StarredRepositoryEdgeToNodeResolver<TParent>;
  starredAt?: StarredRepositoryEdgeToStarredAtResolver<TParent>;
}

export interface StarredRepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeToStarredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationAuditEntryConnectionTypeResolver<TParent = any> {
  edges?: OrganizationAuditEntryConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationAuditEntryConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationAuditEntryConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationAuditEntryConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationAuditEntryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationAuditEntryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationAuditEntryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationAuditEntryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationAuditEntryEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationAuditEntryEdgeToCursorResolver<TParent>;
  node?: OrganizationAuditEntryEdgeToNodeResolver<TParent>;
}

export interface OrganizationAuditEntryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationAuditEntryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationAuditEntryTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'MembersCanDeleteReposClearAuditEntry' | 'MembersCanDeleteReposDisableAuditEntry' | 'MembersCanDeleteReposEnableAuditEntry' | 'OauthApplicationCreateAuditEntry' | 'OrgAddBillingManagerAuditEntry' | 'OrgAddMemberAuditEntry' | 'OrgBlockUserAuditEntry' | 'OrgConfigDisableCollaboratorsOnlyAuditEntry' | 'OrgConfigEnableCollaboratorsOnlyAuditEntry' | 'OrgCreateAuditEntry' | 'OrgDisableOauthAppRestrictionsAuditEntry' | 'OrgDisableSamlAuditEntry' | 'OrgDisableTwoFactorRequirementAuditEntry' | 'OrgEnableOauthAppRestrictionsAuditEntry' | 'OrgEnableSamlAuditEntry' | 'OrgEnableTwoFactorRequirementAuditEntry' | 'OrgInviteMemberAuditEntry' | 'OrgInviteToBusinessAuditEntry' | 'OrgOauthAppAccessApprovedAuditEntry' | 'OrgOauthAppAccessDeniedAuditEntry' | 'OrgOauthAppAccessRequestedAuditEntry' | 'OrgRemoveBillingManagerAuditEntry' | 'OrgRemoveMemberAuditEntry' | 'OrgRemoveOutsideCollaboratorAuditEntry' | 'OrgRestoreMemberAuditEntry' | 'OrgUnblockUserAuditEntry' | 'OrgUpdateDefaultRepositoryPermissionAuditEntry' | 'OrgUpdateMemberAuditEntry' | 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' | 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' | 'PrivateRepositoryForkingDisableAuditEntry' | 'PrivateRepositoryForkingEnableAuditEntry' | 'RepoAccessAuditEntry' | 'RepoAddMemberAuditEntry' | 'RepoAddTopicAuditEntry' | 'RepoArchivedAuditEntry' | 'RepoChangeMergeSettingAuditEntry' | 'RepoConfigDisableAnonymousGitAccessAuditEntry' | 'RepoConfigDisableCollaboratorsOnlyAuditEntry' | 'RepoConfigDisableContributorsOnlyAuditEntry' | 'RepoConfigDisableSockpuppetDisallowedAuditEntry' | 'RepoConfigEnableAnonymousGitAccessAuditEntry' | 'RepoConfigEnableCollaboratorsOnlyAuditEntry' | 'RepoConfigEnableContributorsOnlyAuditEntry' | 'RepoConfigEnableSockpuppetDisallowedAuditEntry' | 'RepoConfigLockAnonymousGitAccessAuditEntry' | 'RepoConfigUnlockAnonymousGitAccessAuditEntry' | 'RepoCreateAuditEntry' | 'RepoDestroyAuditEntry' | 'RepoRemoveMemberAuditEntry' | 'RepoRemoveTopicAuditEntry' | 'RepositoryVisibilityChangeDisableAuditEntry' | 'RepositoryVisibilityChangeEnableAuditEntry' | 'TeamAddMemberAuditEntry' | 'TeamAddRepositoryAuditEntry' | 'TeamChangeParentTeamAuditEntry' | 'TeamRemoveMemberAuditEntry' | 'TeamRemoveRepositoryAuditEntry';
}
export interface GQLMembersCanDeleteReposClearAuditEntryTypeResolver<TParent = any> {
  action?: MembersCanDeleteReposClearAuditEntryToActionResolver<TParent>;
  actor?: MembersCanDeleteReposClearAuditEntryToActorResolver<TParent>;
  actorIp?: MembersCanDeleteReposClearAuditEntryToActorIpResolver<TParent>;
  actorLocation?: MembersCanDeleteReposClearAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: MembersCanDeleteReposClearAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: MembersCanDeleteReposClearAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: MembersCanDeleteReposClearAuditEntryToActorUrlResolver<TParent>;
  createdAt?: MembersCanDeleteReposClearAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: MembersCanDeleteReposClearAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: MembersCanDeleteReposClearAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: MembersCanDeleteReposClearAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: MembersCanDeleteReposClearAuditEntryToIdResolver<TParent>;
  operationType?: MembersCanDeleteReposClearAuditEntryToOperationTypeResolver<TParent>;
  organization?: MembersCanDeleteReposClearAuditEntryToOrganizationResolver<TParent>;
  organizationName?: MembersCanDeleteReposClearAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: MembersCanDeleteReposClearAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: MembersCanDeleteReposClearAuditEntryToOrganizationUrlResolver<TParent>;
  user?: MembersCanDeleteReposClearAuditEntryToUserResolver<TParent>;
  userLogin?: MembersCanDeleteReposClearAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: MembersCanDeleteReposClearAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: MembersCanDeleteReposClearAuditEntryToUserUrlResolver<TParent>;
}

export interface MembersCanDeleteReposClearAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposClearAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuditEntryTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'MembersCanDeleteReposClearAuditEntry' | 'MembersCanDeleteReposDisableAuditEntry' | 'MembersCanDeleteReposEnableAuditEntry' | 'OauthApplicationCreateAuditEntry' | 'OrgAddBillingManagerAuditEntry' | 'OrgAddMemberAuditEntry' | 'OrgBlockUserAuditEntry' | 'OrgConfigDisableCollaboratorsOnlyAuditEntry' | 'OrgConfigEnableCollaboratorsOnlyAuditEntry' | 'OrgCreateAuditEntry' | 'OrgDisableOauthAppRestrictionsAuditEntry' | 'OrgDisableSamlAuditEntry' | 'OrgDisableTwoFactorRequirementAuditEntry' | 'OrgEnableOauthAppRestrictionsAuditEntry' | 'OrgEnableSamlAuditEntry' | 'OrgEnableTwoFactorRequirementAuditEntry' | 'OrgInviteMemberAuditEntry' | 'OrgInviteToBusinessAuditEntry' | 'OrgOauthAppAccessApprovedAuditEntry' | 'OrgOauthAppAccessDeniedAuditEntry' | 'OrgOauthAppAccessRequestedAuditEntry' | 'OrgRemoveBillingManagerAuditEntry' | 'OrgRemoveMemberAuditEntry' | 'OrgRemoveOutsideCollaboratorAuditEntry' | 'OrgRestoreMemberAuditEntry' | 'OrgUnblockUserAuditEntry' | 'OrgUpdateDefaultRepositoryPermissionAuditEntry' | 'OrgUpdateMemberAuditEntry' | 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' | 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' | 'PrivateRepositoryForkingDisableAuditEntry' | 'PrivateRepositoryForkingEnableAuditEntry' | 'RepoAccessAuditEntry' | 'RepoAddMemberAuditEntry' | 'RepoAddTopicAuditEntry' | 'RepoArchivedAuditEntry' | 'RepoChangeMergeSettingAuditEntry' | 'RepoConfigDisableAnonymousGitAccessAuditEntry' | 'RepoConfigDisableCollaboratorsOnlyAuditEntry' | 'RepoConfigDisableContributorsOnlyAuditEntry' | 'RepoConfigDisableSockpuppetDisallowedAuditEntry' | 'RepoConfigEnableAnonymousGitAccessAuditEntry' | 'RepoConfigEnableCollaboratorsOnlyAuditEntry' | 'RepoConfigEnableContributorsOnlyAuditEntry' | 'RepoConfigEnableSockpuppetDisallowedAuditEntry' | 'RepoConfigLockAnonymousGitAccessAuditEntry' | 'RepoConfigUnlockAnonymousGitAccessAuditEntry' | 'RepoCreateAuditEntry' | 'RepoDestroyAuditEntry' | 'RepoRemoveMemberAuditEntry' | 'RepoRemoveTopicAuditEntry' | 'RepositoryVisibilityChangeDisableAuditEntry' | 'RepositoryVisibilityChangeEnableAuditEntry' | 'TeamAddMemberAuditEntry' | 'TeamAddRepositoryAuditEntry' | 'TeamChangeParentTeamAuditEntry' | 'TeamRemoveMemberAuditEntry' | 'TeamRemoveRepositoryAuditEntry';
}
export interface GQLAuditEntryActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Bot' | 'Organization' | 'User';
}
export interface GQLActorLocationTypeResolver<TParent = any> {
  city?: ActorLocationToCityResolver<TParent>;
  country?: ActorLocationToCountryResolver<TParent>;
  countryCode?: ActorLocationToCountryCodeResolver<TParent>;
  region?: ActorLocationToRegionResolver<TParent>;
  regionCode?: ActorLocationToRegionCodeResolver<TParent>;
}

export interface ActorLocationToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ActorLocationToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ActorLocationToCountryCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ActorLocationToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ActorLocationToRegionCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseAuditEntryDataTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'MembersCanDeleteReposClearAuditEntry' | 'MembersCanDeleteReposDisableAuditEntry' | 'MembersCanDeleteReposEnableAuditEntry' | 'OrgInviteToBusinessAuditEntry' | 'PrivateRepositoryForkingDisableAuditEntry' | 'PrivateRepositoryForkingEnableAuditEntry' | 'RepositoryVisibilityChangeDisableAuditEntry' | 'RepositoryVisibilityChangeEnableAuditEntry';
}
export interface GQLOrganizationAuditEntryDataTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'MembersCanDeleteReposClearAuditEntry' | 'MembersCanDeleteReposDisableAuditEntry' | 'MembersCanDeleteReposEnableAuditEntry' | 'OauthApplicationCreateAuditEntry' | 'OrgAddBillingManagerAuditEntry' | 'OrgAddMemberAuditEntry' | 'OrgBlockUserAuditEntry' | 'OrgConfigDisableCollaboratorsOnlyAuditEntry' | 'OrgConfigEnableCollaboratorsOnlyAuditEntry' | 'OrgCreateAuditEntry' | 'OrgDisableOauthAppRestrictionsAuditEntry' | 'OrgDisableSamlAuditEntry' | 'OrgDisableTwoFactorRequirementAuditEntry' | 'OrgEnableOauthAppRestrictionsAuditEntry' | 'OrgEnableSamlAuditEntry' | 'OrgEnableTwoFactorRequirementAuditEntry' | 'OrgInviteMemberAuditEntry' | 'OrgInviteToBusinessAuditEntry' | 'OrgOauthAppAccessApprovedAuditEntry' | 'OrgOauthAppAccessDeniedAuditEntry' | 'OrgOauthAppAccessRequestedAuditEntry' | 'OrgRemoveBillingManagerAuditEntry' | 'OrgRemoveMemberAuditEntry' | 'OrgRemoveOutsideCollaboratorAuditEntry' | 'OrgRestoreMemberAuditEntry' | 'OrgRestoreMemberMembershipOrganizationAuditEntryData' | 'OrgUnblockUserAuditEntry' | 'OrgUpdateDefaultRepositoryPermissionAuditEntry' | 'OrgUpdateMemberAuditEntry' | 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry' | 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry' | 'PrivateRepositoryForkingDisableAuditEntry' | 'PrivateRepositoryForkingEnableAuditEntry' | 'RepoAccessAuditEntry' | 'RepoAddMemberAuditEntry' | 'RepoAddTopicAuditEntry' | 'RepoArchivedAuditEntry' | 'RepoChangeMergeSettingAuditEntry' | 'RepoConfigDisableAnonymousGitAccessAuditEntry' | 'RepoConfigDisableCollaboratorsOnlyAuditEntry' | 'RepoConfigDisableContributorsOnlyAuditEntry' | 'RepoConfigDisableSockpuppetDisallowedAuditEntry' | 'RepoConfigEnableAnonymousGitAccessAuditEntry' | 'RepoConfigEnableCollaboratorsOnlyAuditEntry' | 'RepoConfigEnableContributorsOnlyAuditEntry' | 'RepoConfigEnableSockpuppetDisallowedAuditEntry' | 'RepoConfigLockAnonymousGitAccessAuditEntry' | 'RepoConfigUnlockAnonymousGitAccessAuditEntry' | 'RepoCreateAuditEntry' | 'RepoDestroyAuditEntry' | 'RepoRemoveMemberAuditEntry' | 'RepoRemoveTopicAuditEntry' | 'RepositoryVisibilityChangeDisableAuditEntry' | 'RepositoryVisibilityChangeEnableAuditEntry' | 'TeamAddMemberAuditEntry' | 'TeamAddRepositoryAuditEntry' | 'TeamChangeParentTeamAuditEntry' | 'TeamRemoveMemberAuditEntry' | 'TeamRemoveRepositoryAuditEntry';
}
export interface GQLMembersCanDeleteReposDisableAuditEntryTypeResolver<TParent = any> {
  action?: MembersCanDeleteReposDisableAuditEntryToActionResolver<TParent>;
  actor?: MembersCanDeleteReposDisableAuditEntryToActorResolver<TParent>;
  actorIp?: MembersCanDeleteReposDisableAuditEntryToActorIpResolver<TParent>;
  actorLocation?: MembersCanDeleteReposDisableAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: MembersCanDeleteReposDisableAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: MembersCanDeleteReposDisableAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: MembersCanDeleteReposDisableAuditEntryToActorUrlResolver<TParent>;
  createdAt?: MembersCanDeleteReposDisableAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: MembersCanDeleteReposDisableAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: MembersCanDeleteReposDisableAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: MembersCanDeleteReposDisableAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: MembersCanDeleteReposDisableAuditEntryToIdResolver<TParent>;
  operationType?: MembersCanDeleteReposDisableAuditEntryToOperationTypeResolver<TParent>;
  organization?: MembersCanDeleteReposDisableAuditEntryToOrganizationResolver<TParent>;
  organizationName?: MembersCanDeleteReposDisableAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: MembersCanDeleteReposDisableAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: MembersCanDeleteReposDisableAuditEntryToOrganizationUrlResolver<TParent>;
  user?: MembersCanDeleteReposDisableAuditEntryToUserResolver<TParent>;
  userLogin?: MembersCanDeleteReposDisableAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: MembersCanDeleteReposDisableAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: MembersCanDeleteReposDisableAuditEntryToUserUrlResolver<TParent>;
}

export interface MembersCanDeleteReposDisableAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposDisableAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMembersCanDeleteReposEnableAuditEntryTypeResolver<TParent = any> {
  action?: MembersCanDeleteReposEnableAuditEntryToActionResolver<TParent>;
  actor?: MembersCanDeleteReposEnableAuditEntryToActorResolver<TParent>;
  actorIp?: MembersCanDeleteReposEnableAuditEntryToActorIpResolver<TParent>;
  actorLocation?: MembersCanDeleteReposEnableAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: MembersCanDeleteReposEnableAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: MembersCanDeleteReposEnableAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: MembersCanDeleteReposEnableAuditEntryToActorUrlResolver<TParent>;
  createdAt?: MembersCanDeleteReposEnableAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: MembersCanDeleteReposEnableAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: MembersCanDeleteReposEnableAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: MembersCanDeleteReposEnableAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: MembersCanDeleteReposEnableAuditEntryToIdResolver<TParent>;
  operationType?: MembersCanDeleteReposEnableAuditEntryToOperationTypeResolver<TParent>;
  organization?: MembersCanDeleteReposEnableAuditEntryToOrganizationResolver<TParent>;
  organizationName?: MembersCanDeleteReposEnableAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: MembersCanDeleteReposEnableAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: MembersCanDeleteReposEnableAuditEntryToOrganizationUrlResolver<TParent>;
  user?: MembersCanDeleteReposEnableAuditEntryToUserResolver<TParent>;
  userLogin?: MembersCanDeleteReposEnableAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: MembersCanDeleteReposEnableAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: MembersCanDeleteReposEnableAuditEntryToUserUrlResolver<TParent>;
}

export interface MembersCanDeleteReposEnableAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MembersCanDeleteReposEnableAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOauthApplicationCreateAuditEntryTypeResolver<TParent = any> {
  action?: OauthApplicationCreateAuditEntryToActionResolver<TParent>;
  actor?: OauthApplicationCreateAuditEntryToActorResolver<TParent>;
  actorIp?: OauthApplicationCreateAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OauthApplicationCreateAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OauthApplicationCreateAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OauthApplicationCreateAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OauthApplicationCreateAuditEntryToActorUrlResolver<TParent>;
  applicationUrl?: OauthApplicationCreateAuditEntryToApplicationUrlResolver<TParent>;
  callbackUrl?: OauthApplicationCreateAuditEntryToCallbackUrlResolver<TParent>;
  createdAt?: OauthApplicationCreateAuditEntryToCreatedAtResolver<TParent>;
  id?: OauthApplicationCreateAuditEntryToIdResolver<TParent>;
  oauthApplicationName?: OauthApplicationCreateAuditEntryToOauthApplicationNameResolver<TParent>;
  oauthApplicationResourcePath?: OauthApplicationCreateAuditEntryToOauthApplicationResourcePathResolver<TParent>;
  oauthApplicationUrl?: OauthApplicationCreateAuditEntryToOauthApplicationUrlResolver<TParent>;
  operationType?: OauthApplicationCreateAuditEntryToOperationTypeResolver<TParent>;
  organization?: OauthApplicationCreateAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OauthApplicationCreateAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OauthApplicationCreateAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OauthApplicationCreateAuditEntryToOrganizationUrlResolver<TParent>;
  rateLimit?: OauthApplicationCreateAuditEntryToRateLimitResolver<TParent>;
  state?: OauthApplicationCreateAuditEntryToStateResolver<TParent>;
  user?: OauthApplicationCreateAuditEntryToUserResolver<TParent>;
  userLogin?: OauthApplicationCreateAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OauthApplicationCreateAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OauthApplicationCreateAuditEntryToUserUrlResolver<TParent>;
}

export interface OauthApplicationCreateAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToApplicationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToCallbackUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOauthApplicationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOauthApplicationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOauthApplicationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToRateLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OauthApplicationCreateAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOauthApplicationAuditEntryDataTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'OauthApplicationCreateAuditEntry' | 'OrgOauthAppAccessApprovedAuditEntry' | 'OrgOauthAppAccessDeniedAuditEntry' | 'OrgOauthAppAccessRequestedAuditEntry';
}
export interface GQLOrgAddBillingManagerAuditEntryTypeResolver<TParent = any> {
  action?: OrgAddBillingManagerAuditEntryToActionResolver<TParent>;
  actor?: OrgAddBillingManagerAuditEntryToActorResolver<TParent>;
  actorIp?: OrgAddBillingManagerAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgAddBillingManagerAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgAddBillingManagerAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgAddBillingManagerAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgAddBillingManagerAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgAddBillingManagerAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgAddBillingManagerAuditEntryToIdResolver<TParent>;
  invitationEmail?: OrgAddBillingManagerAuditEntryToInvitationEmailResolver<TParent>;
  operationType?: OrgAddBillingManagerAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgAddBillingManagerAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgAddBillingManagerAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgAddBillingManagerAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgAddBillingManagerAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgAddBillingManagerAuditEntryToUserResolver<TParent>;
  userLogin?: OrgAddBillingManagerAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgAddBillingManagerAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgAddBillingManagerAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgAddBillingManagerAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToInvitationEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddBillingManagerAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgAddMemberAuditEntryTypeResolver<TParent = any> {
  action?: OrgAddMemberAuditEntryToActionResolver<TParent>;
  actor?: OrgAddMemberAuditEntryToActorResolver<TParent>;
  actorIp?: OrgAddMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgAddMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgAddMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgAddMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgAddMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgAddMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgAddMemberAuditEntryToIdResolver<TParent>;
  operationType?: OrgAddMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgAddMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgAddMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgAddMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgAddMemberAuditEntryToOrganizationUrlResolver<TParent>;
  permission?: OrgAddMemberAuditEntryToPermissionResolver<TParent>;
  user?: OrgAddMemberAuditEntryToUserResolver<TParent>;
  userLogin?: OrgAddMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgAddMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgAddMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgAddMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgAddMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgBlockUserAuditEntryTypeResolver<TParent = any> {
  action?: OrgBlockUserAuditEntryToActionResolver<TParent>;
  actor?: OrgBlockUserAuditEntryToActorResolver<TParent>;
  actorIp?: OrgBlockUserAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgBlockUserAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgBlockUserAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgBlockUserAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgBlockUserAuditEntryToActorUrlResolver<TParent>;
  blockedUser?: OrgBlockUserAuditEntryToBlockedUserResolver<TParent>;
  blockedUserName?: OrgBlockUserAuditEntryToBlockedUserNameResolver<TParent>;
  blockedUserResourcePath?: OrgBlockUserAuditEntryToBlockedUserResourcePathResolver<TParent>;
  blockedUserUrl?: OrgBlockUserAuditEntryToBlockedUserUrlResolver<TParent>;
  createdAt?: OrgBlockUserAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgBlockUserAuditEntryToIdResolver<TParent>;
  operationType?: OrgBlockUserAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgBlockUserAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgBlockUserAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgBlockUserAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgBlockUserAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgBlockUserAuditEntryToUserResolver<TParent>;
  userLogin?: OrgBlockUserAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgBlockUserAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgBlockUserAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgBlockUserAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToBlockedUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToBlockedUserNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToBlockedUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToBlockedUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgBlockUserAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgConfigDisableCollaboratorsOnlyAuditEntryTypeResolver<TParent = any> {
  action?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActionResolver<TParent>;
  actor?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActorResolver<TParent>;
  actorIp?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgConfigDisableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgConfigDisableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgConfigDisableCollaboratorsOnlyAuditEntryToIdResolver<TParent>;
  operationType?: OrgConfigDisableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgConfigDisableCollaboratorsOnlyAuditEntryToUserResolver<TParent>;
  userLogin?: OrgConfigDisableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgConfigDisableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgConfigDisableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigDisableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgConfigEnableCollaboratorsOnlyAuditEntryTypeResolver<TParent = any> {
  action?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActionResolver<TParent>;
  actor?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActorResolver<TParent>;
  actorIp?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgConfigEnableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgConfigEnableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgConfigEnableCollaboratorsOnlyAuditEntryToIdResolver<TParent>;
  operationType?: OrgConfigEnableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgConfigEnableCollaboratorsOnlyAuditEntryToUserResolver<TParent>;
  userLogin?: OrgConfigEnableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgConfigEnableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgConfigEnableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgConfigEnableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgCreateAuditEntryTypeResolver<TParent = any> {
  action?: OrgCreateAuditEntryToActionResolver<TParent>;
  actor?: OrgCreateAuditEntryToActorResolver<TParent>;
  actorIp?: OrgCreateAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgCreateAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgCreateAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgCreateAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgCreateAuditEntryToActorUrlResolver<TParent>;
  billingPlan?: OrgCreateAuditEntryToBillingPlanResolver<TParent>;
  createdAt?: OrgCreateAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgCreateAuditEntryToIdResolver<TParent>;
  operationType?: OrgCreateAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgCreateAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgCreateAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgCreateAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgCreateAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgCreateAuditEntryToUserResolver<TParent>;
  userLogin?: OrgCreateAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgCreateAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgCreateAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgCreateAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToBillingPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgCreateAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgDisableOauthAppRestrictionsAuditEntryTypeResolver<TParent = any> {
  action?: OrgDisableOauthAppRestrictionsAuditEntryToActionResolver<TParent>;
  actor?: OrgDisableOauthAppRestrictionsAuditEntryToActorResolver<TParent>;
  actorIp?: OrgDisableOauthAppRestrictionsAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgDisableOauthAppRestrictionsAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgDisableOauthAppRestrictionsAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgDisableOauthAppRestrictionsAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgDisableOauthAppRestrictionsAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgDisableOauthAppRestrictionsAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgDisableOauthAppRestrictionsAuditEntryToIdResolver<TParent>;
  operationType?: OrgDisableOauthAppRestrictionsAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgDisableOauthAppRestrictionsAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgDisableOauthAppRestrictionsAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgDisableOauthAppRestrictionsAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgDisableOauthAppRestrictionsAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgDisableOauthAppRestrictionsAuditEntryToUserResolver<TParent>;
  userLogin?: OrgDisableOauthAppRestrictionsAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgDisableOauthAppRestrictionsAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgDisableOauthAppRestrictionsAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableOauthAppRestrictionsAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgDisableSamlAuditEntryTypeResolver<TParent = any> {
  action?: OrgDisableSamlAuditEntryToActionResolver<TParent>;
  actor?: OrgDisableSamlAuditEntryToActorResolver<TParent>;
  actorIp?: OrgDisableSamlAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgDisableSamlAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgDisableSamlAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgDisableSamlAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgDisableSamlAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgDisableSamlAuditEntryToCreatedAtResolver<TParent>;
  digestMethodUrl?: OrgDisableSamlAuditEntryToDigestMethodUrlResolver<TParent>;
  id?: OrgDisableSamlAuditEntryToIdResolver<TParent>;
  issuerUrl?: OrgDisableSamlAuditEntryToIssuerUrlResolver<TParent>;
  operationType?: OrgDisableSamlAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgDisableSamlAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgDisableSamlAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgDisableSamlAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgDisableSamlAuditEntryToOrganizationUrlResolver<TParent>;
  signatureMethodUrl?: OrgDisableSamlAuditEntryToSignatureMethodUrlResolver<TParent>;
  singleSignOnUrl?: OrgDisableSamlAuditEntryToSingleSignOnUrlResolver<TParent>;
  user?: OrgDisableSamlAuditEntryToUserResolver<TParent>;
  userLogin?: OrgDisableSamlAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgDisableSamlAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgDisableSamlAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgDisableSamlAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToDigestMethodUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToIssuerUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToSignatureMethodUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToSingleSignOnUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableSamlAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgDisableTwoFactorRequirementAuditEntryTypeResolver<TParent = any> {
  action?: OrgDisableTwoFactorRequirementAuditEntryToActionResolver<TParent>;
  actor?: OrgDisableTwoFactorRequirementAuditEntryToActorResolver<TParent>;
  actorIp?: OrgDisableTwoFactorRequirementAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgDisableTwoFactorRequirementAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgDisableTwoFactorRequirementAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgDisableTwoFactorRequirementAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgDisableTwoFactorRequirementAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgDisableTwoFactorRequirementAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgDisableTwoFactorRequirementAuditEntryToIdResolver<TParent>;
  operationType?: OrgDisableTwoFactorRequirementAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgDisableTwoFactorRequirementAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgDisableTwoFactorRequirementAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgDisableTwoFactorRequirementAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgDisableTwoFactorRequirementAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgDisableTwoFactorRequirementAuditEntryToUserResolver<TParent>;
  userLogin?: OrgDisableTwoFactorRequirementAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgDisableTwoFactorRequirementAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgDisableTwoFactorRequirementAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgDisableTwoFactorRequirementAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgEnableOauthAppRestrictionsAuditEntryTypeResolver<TParent = any> {
  action?: OrgEnableOauthAppRestrictionsAuditEntryToActionResolver<TParent>;
  actor?: OrgEnableOauthAppRestrictionsAuditEntryToActorResolver<TParent>;
  actorIp?: OrgEnableOauthAppRestrictionsAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgEnableOauthAppRestrictionsAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgEnableOauthAppRestrictionsAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgEnableOauthAppRestrictionsAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgEnableOauthAppRestrictionsAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgEnableOauthAppRestrictionsAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgEnableOauthAppRestrictionsAuditEntryToIdResolver<TParent>;
  operationType?: OrgEnableOauthAppRestrictionsAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgEnableOauthAppRestrictionsAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgEnableOauthAppRestrictionsAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgEnableOauthAppRestrictionsAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgEnableOauthAppRestrictionsAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgEnableOauthAppRestrictionsAuditEntryToUserResolver<TParent>;
  userLogin?: OrgEnableOauthAppRestrictionsAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgEnableOauthAppRestrictionsAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgEnableOauthAppRestrictionsAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableOauthAppRestrictionsAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgEnableSamlAuditEntryTypeResolver<TParent = any> {
  action?: OrgEnableSamlAuditEntryToActionResolver<TParent>;
  actor?: OrgEnableSamlAuditEntryToActorResolver<TParent>;
  actorIp?: OrgEnableSamlAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgEnableSamlAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgEnableSamlAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgEnableSamlAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgEnableSamlAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgEnableSamlAuditEntryToCreatedAtResolver<TParent>;
  digestMethodUrl?: OrgEnableSamlAuditEntryToDigestMethodUrlResolver<TParent>;
  id?: OrgEnableSamlAuditEntryToIdResolver<TParent>;
  issuerUrl?: OrgEnableSamlAuditEntryToIssuerUrlResolver<TParent>;
  operationType?: OrgEnableSamlAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgEnableSamlAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgEnableSamlAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgEnableSamlAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgEnableSamlAuditEntryToOrganizationUrlResolver<TParent>;
  signatureMethodUrl?: OrgEnableSamlAuditEntryToSignatureMethodUrlResolver<TParent>;
  singleSignOnUrl?: OrgEnableSamlAuditEntryToSingleSignOnUrlResolver<TParent>;
  user?: OrgEnableSamlAuditEntryToUserResolver<TParent>;
  userLogin?: OrgEnableSamlAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgEnableSamlAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgEnableSamlAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgEnableSamlAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToDigestMethodUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToIssuerUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToSignatureMethodUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToSingleSignOnUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableSamlAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgEnableTwoFactorRequirementAuditEntryTypeResolver<TParent = any> {
  action?: OrgEnableTwoFactorRequirementAuditEntryToActionResolver<TParent>;
  actor?: OrgEnableTwoFactorRequirementAuditEntryToActorResolver<TParent>;
  actorIp?: OrgEnableTwoFactorRequirementAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgEnableTwoFactorRequirementAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgEnableTwoFactorRequirementAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgEnableTwoFactorRequirementAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgEnableTwoFactorRequirementAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgEnableTwoFactorRequirementAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgEnableTwoFactorRequirementAuditEntryToIdResolver<TParent>;
  operationType?: OrgEnableTwoFactorRequirementAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgEnableTwoFactorRequirementAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgEnableTwoFactorRequirementAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgEnableTwoFactorRequirementAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgEnableTwoFactorRequirementAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgEnableTwoFactorRequirementAuditEntryToUserResolver<TParent>;
  userLogin?: OrgEnableTwoFactorRequirementAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgEnableTwoFactorRequirementAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgEnableTwoFactorRequirementAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgEnableTwoFactorRequirementAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgInviteMemberAuditEntryTypeResolver<TParent = any> {
  action?: OrgInviteMemberAuditEntryToActionResolver<TParent>;
  actor?: OrgInviteMemberAuditEntryToActorResolver<TParent>;
  actorIp?: OrgInviteMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgInviteMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgInviteMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgInviteMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgInviteMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgInviteMemberAuditEntryToCreatedAtResolver<TParent>;
  email?: OrgInviteMemberAuditEntryToEmailResolver<TParent>;
  id?: OrgInviteMemberAuditEntryToIdResolver<TParent>;
  operationType?: OrgInviteMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgInviteMemberAuditEntryToOrganizationResolver<TParent>;
  organizationInvitation?: OrgInviteMemberAuditEntryToOrganizationInvitationResolver<TParent>;
  organizationName?: OrgInviteMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgInviteMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgInviteMemberAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgInviteMemberAuditEntryToUserResolver<TParent>;
  userLogin?: OrgInviteMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgInviteMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgInviteMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgInviteMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToOrganizationInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgInviteToBusinessAuditEntryTypeResolver<TParent = any> {
  action?: OrgInviteToBusinessAuditEntryToActionResolver<TParent>;
  actor?: OrgInviteToBusinessAuditEntryToActorResolver<TParent>;
  actorIp?: OrgInviteToBusinessAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgInviteToBusinessAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgInviteToBusinessAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgInviteToBusinessAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgInviteToBusinessAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgInviteToBusinessAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: OrgInviteToBusinessAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: OrgInviteToBusinessAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: OrgInviteToBusinessAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: OrgInviteToBusinessAuditEntryToIdResolver<TParent>;
  operationType?: OrgInviteToBusinessAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgInviteToBusinessAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgInviteToBusinessAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgInviteToBusinessAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgInviteToBusinessAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgInviteToBusinessAuditEntryToUserResolver<TParent>;
  userLogin?: OrgInviteToBusinessAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgInviteToBusinessAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgInviteToBusinessAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgInviteToBusinessAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgInviteToBusinessAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgOauthAppAccessApprovedAuditEntryTypeResolver<TParent = any> {
  action?: OrgOauthAppAccessApprovedAuditEntryToActionResolver<TParent>;
  actor?: OrgOauthAppAccessApprovedAuditEntryToActorResolver<TParent>;
  actorIp?: OrgOauthAppAccessApprovedAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgOauthAppAccessApprovedAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgOauthAppAccessApprovedAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgOauthAppAccessApprovedAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgOauthAppAccessApprovedAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgOauthAppAccessApprovedAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgOauthAppAccessApprovedAuditEntryToIdResolver<TParent>;
  oauthApplicationName?: OrgOauthAppAccessApprovedAuditEntryToOauthApplicationNameResolver<TParent>;
  oauthApplicationResourcePath?: OrgOauthAppAccessApprovedAuditEntryToOauthApplicationResourcePathResolver<TParent>;
  oauthApplicationUrl?: OrgOauthAppAccessApprovedAuditEntryToOauthApplicationUrlResolver<TParent>;
  operationType?: OrgOauthAppAccessApprovedAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgOauthAppAccessApprovedAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgOauthAppAccessApprovedAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgOauthAppAccessApprovedAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgOauthAppAccessApprovedAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgOauthAppAccessApprovedAuditEntryToUserResolver<TParent>;
  userLogin?: OrgOauthAppAccessApprovedAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgOauthAppAccessApprovedAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgOauthAppAccessApprovedAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOauthApplicationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOauthApplicationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOauthApplicationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessApprovedAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgOauthAppAccessDeniedAuditEntryTypeResolver<TParent = any> {
  action?: OrgOauthAppAccessDeniedAuditEntryToActionResolver<TParent>;
  actor?: OrgOauthAppAccessDeniedAuditEntryToActorResolver<TParent>;
  actorIp?: OrgOauthAppAccessDeniedAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgOauthAppAccessDeniedAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgOauthAppAccessDeniedAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgOauthAppAccessDeniedAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgOauthAppAccessDeniedAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgOauthAppAccessDeniedAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgOauthAppAccessDeniedAuditEntryToIdResolver<TParent>;
  oauthApplicationName?: OrgOauthAppAccessDeniedAuditEntryToOauthApplicationNameResolver<TParent>;
  oauthApplicationResourcePath?: OrgOauthAppAccessDeniedAuditEntryToOauthApplicationResourcePathResolver<TParent>;
  oauthApplicationUrl?: OrgOauthAppAccessDeniedAuditEntryToOauthApplicationUrlResolver<TParent>;
  operationType?: OrgOauthAppAccessDeniedAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgOauthAppAccessDeniedAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgOauthAppAccessDeniedAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgOauthAppAccessDeniedAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgOauthAppAccessDeniedAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgOauthAppAccessDeniedAuditEntryToUserResolver<TParent>;
  userLogin?: OrgOauthAppAccessDeniedAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgOauthAppAccessDeniedAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgOauthAppAccessDeniedAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOauthApplicationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOauthApplicationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOauthApplicationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessDeniedAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgOauthAppAccessRequestedAuditEntryTypeResolver<TParent = any> {
  action?: OrgOauthAppAccessRequestedAuditEntryToActionResolver<TParent>;
  actor?: OrgOauthAppAccessRequestedAuditEntryToActorResolver<TParent>;
  actorIp?: OrgOauthAppAccessRequestedAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgOauthAppAccessRequestedAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgOauthAppAccessRequestedAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgOauthAppAccessRequestedAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgOauthAppAccessRequestedAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgOauthAppAccessRequestedAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgOauthAppAccessRequestedAuditEntryToIdResolver<TParent>;
  oauthApplicationName?: OrgOauthAppAccessRequestedAuditEntryToOauthApplicationNameResolver<TParent>;
  oauthApplicationResourcePath?: OrgOauthAppAccessRequestedAuditEntryToOauthApplicationResourcePathResolver<TParent>;
  oauthApplicationUrl?: OrgOauthAppAccessRequestedAuditEntryToOauthApplicationUrlResolver<TParent>;
  operationType?: OrgOauthAppAccessRequestedAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgOauthAppAccessRequestedAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgOauthAppAccessRequestedAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgOauthAppAccessRequestedAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgOauthAppAccessRequestedAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgOauthAppAccessRequestedAuditEntryToUserResolver<TParent>;
  userLogin?: OrgOauthAppAccessRequestedAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgOauthAppAccessRequestedAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgOauthAppAccessRequestedAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOauthApplicationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOauthApplicationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOauthApplicationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgOauthAppAccessRequestedAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgRemoveBillingManagerAuditEntryTypeResolver<TParent = any> {
  action?: OrgRemoveBillingManagerAuditEntryToActionResolver<TParent>;
  actor?: OrgRemoveBillingManagerAuditEntryToActorResolver<TParent>;
  actorIp?: OrgRemoveBillingManagerAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgRemoveBillingManagerAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgRemoveBillingManagerAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgRemoveBillingManagerAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgRemoveBillingManagerAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgRemoveBillingManagerAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgRemoveBillingManagerAuditEntryToIdResolver<TParent>;
  operationType?: OrgRemoveBillingManagerAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgRemoveBillingManagerAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgRemoveBillingManagerAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgRemoveBillingManagerAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgRemoveBillingManagerAuditEntryToOrganizationUrlResolver<TParent>;
  reason?: OrgRemoveBillingManagerAuditEntryToReasonResolver<TParent>;
  user?: OrgRemoveBillingManagerAuditEntryToUserResolver<TParent>;
  userLogin?: OrgRemoveBillingManagerAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgRemoveBillingManagerAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgRemoveBillingManagerAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgRemoveBillingManagerAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveBillingManagerAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgRemoveMemberAuditEntryTypeResolver<TParent = any> {
  action?: OrgRemoveMemberAuditEntryToActionResolver<TParent>;
  actor?: OrgRemoveMemberAuditEntryToActorResolver<TParent>;
  actorIp?: OrgRemoveMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgRemoveMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgRemoveMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgRemoveMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgRemoveMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgRemoveMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgRemoveMemberAuditEntryToIdResolver<TParent>;
  membershipTypes?: OrgRemoveMemberAuditEntryToMembershipTypesResolver<TParent>;
  operationType?: OrgRemoveMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgRemoveMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgRemoveMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgRemoveMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgRemoveMemberAuditEntryToOrganizationUrlResolver<TParent>;
  reason?: OrgRemoveMemberAuditEntryToReasonResolver<TParent>;
  user?: OrgRemoveMemberAuditEntryToUserResolver<TParent>;
  userLogin?: OrgRemoveMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgRemoveMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgRemoveMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgRemoveMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToMembershipTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgRemoveOutsideCollaboratorAuditEntryTypeResolver<TParent = any> {
  action?: OrgRemoveOutsideCollaboratorAuditEntryToActionResolver<TParent>;
  actor?: OrgRemoveOutsideCollaboratorAuditEntryToActorResolver<TParent>;
  actorIp?: OrgRemoveOutsideCollaboratorAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgRemoveOutsideCollaboratorAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgRemoveOutsideCollaboratorAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgRemoveOutsideCollaboratorAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgRemoveOutsideCollaboratorAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgRemoveOutsideCollaboratorAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgRemoveOutsideCollaboratorAuditEntryToIdResolver<TParent>;
  membershipTypes?: OrgRemoveOutsideCollaboratorAuditEntryToMembershipTypesResolver<TParent>;
  operationType?: OrgRemoveOutsideCollaboratorAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgRemoveOutsideCollaboratorAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgRemoveOutsideCollaboratorAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgRemoveOutsideCollaboratorAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgRemoveOutsideCollaboratorAuditEntryToOrganizationUrlResolver<TParent>;
  reason?: OrgRemoveOutsideCollaboratorAuditEntryToReasonResolver<TParent>;
  user?: OrgRemoveOutsideCollaboratorAuditEntryToUserResolver<TParent>;
  userLogin?: OrgRemoveOutsideCollaboratorAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgRemoveOutsideCollaboratorAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgRemoveOutsideCollaboratorAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToMembershipTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRemoveOutsideCollaboratorAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgRestoreMemberAuditEntryTypeResolver<TParent = any> {
  action?: OrgRestoreMemberAuditEntryToActionResolver<TParent>;
  actor?: OrgRestoreMemberAuditEntryToActorResolver<TParent>;
  actorIp?: OrgRestoreMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgRestoreMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgRestoreMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgRestoreMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgRestoreMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgRestoreMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgRestoreMemberAuditEntryToIdResolver<TParent>;
  operationType?: OrgRestoreMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgRestoreMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgRestoreMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgRestoreMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgRestoreMemberAuditEntryToOrganizationUrlResolver<TParent>;
  restoredCustomEmailRoutingsCount?: OrgRestoreMemberAuditEntryToRestoredCustomEmailRoutingsCountResolver<TParent>;
  restoredIssueAssignmentsCount?: OrgRestoreMemberAuditEntryToRestoredIssueAssignmentsCountResolver<TParent>;
  restoredMemberships?: OrgRestoreMemberAuditEntryToRestoredMembershipsResolver<TParent>;
  restoredMembershipsCount?: OrgRestoreMemberAuditEntryToRestoredMembershipsCountResolver<TParent>;
  restoredRepositoriesCount?: OrgRestoreMemberAuditEntryToRestoredRepositoriesCountResolver<TParent>;
  restoredRepositoryStarsCount?: OrgRestoreMemberAuditEntryToRestoredRepositoryStarsCountResolver<TParent>;
  restoredRepositoryWatchesCount?: OrgRestoreMemberAuditEntryToRestoredRepositoryWatchesCountResolver<TParent>;
  user?: OrgRestoreMemberAuditEntryToUserResolver<TParent>;
  userLogin?: OrgRestoreMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgRestoreMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgRestoreMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgRestoreMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredCustomEmailRoutingsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredIssueAssignmentsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredMembershipsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredMembershipsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredRepositoriesCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredRepositoryStarsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToRestoredRepositoryWatchesCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgRestoreMemberAuditEntryMembershipTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'OrgRestoreMemberMembershipOrganizationAuditEntryData' | 'OrgRestoreMemberMembershipRepositoryAuditEntryData' | 'OrgRestoreMemberMembershipTeamAuditEntryData';
}
export interface GQLOrgRestoreMemberMembershipOrganizationAuditEntryDataTypeResolver<TParent = any> {
  organization?: OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationResolver<TParent>;
  organizationName?: OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationUrlResolver<TParent>;
}

export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgRestoreMemberMembershipRepositoryAuditEntryDataTypeResolver<TParent = any> {
  repository?: OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryResolver<TParent>;
  repositoryName?: OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryUrlResolver<TParent>;
}

export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryAuditEntryDataTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'OrgRestoreMemberMembershipRepositoryAuditEntryData' | 'PrivateRepositoryForkingDisableAuditEntry' | 'PrivateRepositoryForkingEnableAuditEntry' | 'RepoAccessAuditEntry' | 'RepoAddMemberAuditEntry' | 'RepoAddTopicAuditEntry' | 'RepoArchivedAuditEntry' | 'RepoChangeMergeSettingAuditEntry' | 'RepoConfigDisableAnonymousGitAccessAuditEntry' | 'RepoConfigDisableCollaboratorsOnlyAuditEntry' | 'RepoConfigDisableContributorsOnlyAuditEntry' | 'RepoConfigDisableSockpuppetDisallowedAuditEntry' | 'RepoConfigEnableAnonymousGitAccessAuditEntry' | 'RepoConfigEnableCollaboratorsOnlyAuditEntry' | 'RepoConfigEnableContributorsOnlyAuditEntry' | 'RepoConfigEnableSockpuppetDisallowedAuditEntry' | 'RepoConfigLockAnonymousGitAccessAuditEntry' | 'RepoConfigUnlockAnonymousGitAccessAuditEntry' | 'RepoCreateAuditEntry' | 'RepoDestroyAuditEntry' | 'RepoRemoveMemberAuditEntry' | 'RepoRemoveTopicAuditEntry' | 'TeamAddRepositoryAuditEntry' | 'TeamRemoveRepositoryAuditEntry';
}
export interface GQLOrgRestoreMemberMembershipTeamAuditEntryDataTypeResolver<TParent = any> {
  team?: OrgRestoreMemberMembershipTeamAuditEntryDataToTeamResolver<TParent>;
  teamName?: OrgRestoreMemberMembershipTeamAuditEntryDataToTeamNameResolver<TParent>;
  teamResourcePath?: OrgRestoreMemberMembershipTeamAuditEntryDataToTeamResourcePathResolver<TParent>;
  teamUrl?: OrgRestoreMemberMembershipTeamAuditEntryDataToTeamUrlResolver<TParent>;
}

export interface OrgRestoreMemberMembershipTeamAuditEntryDataToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipTeamAuditEntryDataToTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipTeamAuditEntryDataToTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgRestoreMemberMembershipTeamAuditEntryDataToTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamAuditEntryDataTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'OrgRestoreMemberMembershipTeamAuditEntryData' | 'TeamAddMemberAuditEntry' | 'TeamAddRepositoryAuditEntry' | 'TeamChangeParentTeamAuditEntry' | 'TeamRemoveMemberAuditEntry' | 'TeamRemoveRepositoryAuditEntry';
}
export interface GQLOrgUnblockUserAuditEntryTypeResolver<TParent = any> {
  action?: OrgUnblockUserAuditEntryToActionResolver<TParent>;
  actor?: OrgUnblockUserAuditEntryToActorResolver<TParent>;
  actorIp?: OrgUnblockUserAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgUnblockUserAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgUnblockUserAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgUnblockUserAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgUnblockUserAuditEntryToActorUrlResolver<TParent>;
  blockedUser?: OrgUnblockUserAuditEntryToBlockedUserResolver<TParent>;
  blockedUserName?: OrgUnblockUserAuditEntryToBlockedUserNameResolver<TParent>;
  blockedUserResourcePath?: OrgUnblockUserAuditEntryToBlockedUserResourcePathResolver<TParent>;
  blockedUserUrl?: OrgUnblockUserAuditEntryToBlockedUserUrlResolver<TParent>;
  createdAt?: OrgUnblockUserAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgUnblockUserAuditEntryToIdResolver<TParent>;
  operationType?: OrgUnblockUserAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgUnblockUserAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgUnblockUserAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgUnblockUserAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgUnblockUserAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgUnblockUserAuditEntryToUserResolver<TParent>;
  userLogin?: OrgUnblockUserAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgUnblockUserAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgUnblockUserAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgUnblockUserAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToBlockedUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToBlockedUserNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToBlockedUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToBlockedUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUnblockUserAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgUpdateDefaultRepositoryPermissionAuditEntryTypeResolver<TParent = any> {
  action?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActionResolver<TParent>;
  actor?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActorResolver<TParent>;
  actorIp?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgUpdateDefaultRepositoryPermissionAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgUpdateDefaultRepositoryPermissionAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgUpdateDefaultRepositoryPermissionAuditEntryToIdResolver<TParent>;
  operationType?: OrgUpdateDefaultRepositoryPermissionAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationUrlResolver<TParent>;
  permission?: OrgUpdateDefaultRepositoryPermissionAuditEntryToPermissionResolver<TParent>;
  permissionWas?: OrgUpdateDefaultRepositoryPermissionAuditEntryToPermissionWasResolver<TParent>;
  user?: OrgUpdateDefaultRepositoryPermissionAuditEntryToUserResolver<TParent>;
  userLogin?: OrgUpdateDefaultRepositoryPermissionAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgUpdateDefaultRepositoryPermissionAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgUpdateDefaultRepositoryPermissionAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToPermissionWasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateDefaultRepositoryPermissionAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgUpdateMemberAuditEntryTypeResolver<TParent = any> {
  action?: OrgUpdateMemberAuditEntryToActionResolver<TParent>;
  actor?: OrgUpdateMemberAuditEntryToActorResolver<TParent>;
  actorIp?: OrgUpdateMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgUpdateMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgUpdateMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgUpdateMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgUpdateMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: OrgUpdateMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgUpdateMemberAuditEntryToIdResolver<TParent>;
  operationType?: OrgUpdateMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgUpdateMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgUpdateMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgUpdateMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgUpdateMemberAuditEntryToOrganizationUrlResolver<TParent>;
  permission?: OrgUpdateMemberAuditEntryToPermissionResolver<TParent>;
  permissionWas?: OrgUpdateMemberAuditEntryToPermissionWasResolver<TParent>;
  user?: OrgUpdateMemberAuditEntryToUserResolver<TParent>;
  userLogin?: OrgUpdateMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgUpdateMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgUpdateMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgUpdateMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToPermissionWasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgUpdateMemberRepositoryCreationPermissionAuditEntryTypeResolver<TParent = any> {
  action?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActionResolver<TParent>;
  actor?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorResolver<TParent>;
  actorIp?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorUrlResolver<TParent>;
  canCreateRepositories?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToCanCreateRepositoriesResolver<TParent>;
  createdAt?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToIdResolver<TParent>;
  operationType?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserResolver<TParent>;
  userLogin?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserUrlResolver<TParent>;
  visibility?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryToVisibilityResolver<TParent>;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToCanCreateRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntryTypeResolver<TParent = any> {
  action?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActionResolver<TParent>;
  actor?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorResolver<TParent>;
  actorIp?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorIpResolver<TParent>;
  actorLocation?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorUrlResolver<TParent>;
  canInviteOutsideCollaboratorsToRepositories?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToCanInviteOutsideCollaboratorsToRepositoriesResolver<TParent>;
  createdAt?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToCreatedAtResolver<TParent>;
  id?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToIdResolver<TParent>;
  operationType?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOperationTypeResolver<TParent>;
  organization?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationResolver<TParent>;
  organizationName?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationUrlResolver<TParent>;
  user?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserResolver<TParent>;
  userLogin?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserUrlResolver<TParent>;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToCanInviteOutsideCollaboratorsToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPrivateRepositoryForkingDisableAuditEntryTypeResolver<TParent = any> {
  action?: PrivateRepositoryForkingDisableAuditEntryToActionResolver<TParent>;
  actor?: PrivateRepositoryForkingDisableAuditEntryToActorResolver<TParent>;
  actorIp?: PrivateRepositoryForkingDisableAuditEntryToActorIpResolver<TParent>;
  actorLocation?: PrivateRepositoryForkingDisableAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: PrivateRepositoryForkingDisableAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: PrivateRepositoryForkingDisableAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: PrivateRepositoryForkingDisableAuditEntryToActorUrlResolver<TParent>;
  createdAt?: PrivateRepositoryForkingDisableAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: PrivateRepositoryForkingDisableAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: PrivateRepositoryForkingDisableAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: PrivateRepositoryForkingDisableAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: PrivateRepositoryForkingDisableAuditEntryToIdResolver<TParent>;
  operationType?: PrivateRepositoryForkingDisableAuditEntryToOperationTypeResolver<TParent>;
  organization?: PrivateRepositoryForkingDisableAuditEntryToOrganizationResolver<TParent>;
  organizationName?: PrivateRepositoryForkingDisableAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: PrivateRepositoryForkingDisableAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: PrivateRepositoryForkingDisableAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: PrivateRepositoryForkingDisableAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: PrivateRepositoryForkingDisableAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: PrivateRepositoryForkingDisableAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: PrivateRepositoryForkingDisableAuditEntryToRepositoryUrlResolver<TParent>;
  user?: PrivateRepositoryForkingDisableAuditEntryToUserResolver<TParent>;
  userLogin?: PrivateRepositoryForkingDisableAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: PrivateRepositoryForkingDisableAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: PrivateRepositoryForkingDisableAuditEntryToUserUrlResolver<TParent>;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingDisableAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPrivateRepositoryForkingEnableAuditEntryTypeResolver<TParent = any> {
  action?: PrivateRepositoryForkingEnableAuditEntryToActionResolver<TParent>;
  actor?: PrivateRepositoryForkingEnableAuditEntryToActorResolver<TParent>;
  actorIp?: PrivateRepositoryForkingEnableAuditEntryToActorIpResolver<TParent>;
  actorLocation?: PrivateRepositoryForkingEnableAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: PrivateRepositoryForkingEnableAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: PrivateRepositoryForkingEnableAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: PrivateRepositoryForkingEnableAuditEntryToActorUrlResolver<TParent>;
  createdAt?: PrivateRepositoryForkingEnableAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: PrivateRepositoryForkingEnableAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: PrivateRepositoryForkingEnableAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: PrivateRepositoryForkingEnableAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: PrivateRepositoryForkingEnableAuditEntryToIdResolver<TParent>;
  operationType?: PrivateRepositoryForkingEnableAuditEntryToOperationTypeResolver<TParent>;
  organization?: PrivateRepositoryForkingEnableAuditEntryToOrganizationResolver<TParent>;
  organizationName?: PrivateRepositoryForkingEnableAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: PrivateRepositoryForkingEnableAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: PrivateRepositoryForkingEnableAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: PrivateRepositoryForkingEnableAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: PrivateRepositoryForkingEnableAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: PrivateRepositoryForkingEnableAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: PrivateRepositoryForkingEnableAuditEntryToRepositoryUrlResolver<TParent>;
  user?: PrivateRepositoryForkingEnableAuditEntryToUserResolver<TParent>;
  userLogin?: PrivateRepositoryForkingEnableAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: PrivateRepositoryForkingEnableAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: PrivateRepositoryForkingEnableAuditEntryToUserUrlResolver<TParent>;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PrivateRepositoryForkingEnableAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoAccessAuditEntryTypeResolver<TParent = any> {
  action?: RepoAccessAuditEntryToActionResolver<TParent>;
  actor?: RepoAccessAuditEntryToActorResolver<TParent>;
  actorIp?: RepoAccessAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoAccessAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoAccessAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoAccessAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoAccessAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoAccessAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoAccessAuditEntryToIdResolver<TParent>;
  operationType?: RepoAccessAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoAccessAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoAccessAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoAccessAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoAccessAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoAccessAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoAccessAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoAccessAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoAccessAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoAccessAuditEntryToUserResolver<TParent>;
  userLogin?: RepoAccessAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoAccessAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoAccessAuditEntryToUserUrlResolver<TParent>;
  visibility?: RepoAccessAuditEntryToVisibilityResolver<TParent>;
}

export interface RepoAccessAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAccessAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoAddMemberAuditEntryTypeResolver<TParent = any> {
  action?: RepoAddMemberAuditEntryToActionResolver<TParent>;
  actor?: RepoAddMemberAuditEntryToActorResolver<TParent>;
  actorIp?: RepoAddMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoAddMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoAddMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoAddMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoAddMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoAddMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoAddMemberAuditEntryToIdResolver<TParent>;
  operationType?: RepoAddMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoAddMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoAddMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoAddMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoAddMemberAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoAddMemberAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoAddMemberAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoAddMemberAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoAddMemberAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoAddMemberAuditEntryToUserResolver<TParent>;
  userLogin?: RepoAddMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoAddMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoAddMemberAuditEntryToUserUrlResolver<TParent>;
  visibility?: RepoAddMemberAuditEntryToVisibilityResolver<TParent>;
}

export interface RepoAddMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddMemberAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoAddTopicAuditEntryTypeResolver<TParent = any> {
  action?: RepoAddTopicAuditEntryToActionResolver<TParent>;
  actor?: RepoAddTopicAuditEntryToActorResolver<TParent>;
  actorIp?: RepoAddTopicAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoAddTopicAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoAddTopicAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoAddTopicAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoAddTopicAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoAddTopicAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoAddTopicAuditEntryToIdResolver<TParent>;
  operationType?: RepoAddTopicAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoAddTopicAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoAddTopicAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoAddTopicAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoAddTopicAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoAddTopicAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoAddTopicAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoAddTopicAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoAddTopicAuditEntryToRepositoryUrlResolver<TParent>;
  topic?: RepoAddTopicAuditEntryToTopicResolver<TParent>;
  topicName?: RepoAddTopicAuditEntryToTopicNameResolver<TParent>;
  user?: RepoAddTopicAuditEntryToUserResolver<TParent>;
  userLogin?: RepoAddTopicAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoAddTopicAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoAddTopicAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoAddTopicAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToTopicNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoAddTopicAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTopicAuditEntryDataTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'RepoAddTopicAuditEntry' | 'RepoRemoveTopicAuditEntry';
}
export interface GQLRepoArchivedAuditEntryTypeResolver<TParent = any> {
  action?: RepoArchivedAuditEntryToActionResolver<TParent>;
  actor?: RepoArchivedAuditEntryToActorResolver<TParent>;
  actorIp?: RepoArchivedAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoArchivedAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoArchivedAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoArchivedAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoArchivedAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoArchivedAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoArchivedAuditEntryToIdResolver<TParent>;
  operationType?: RepoArchivedAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoArchivedAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoArchivedAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoArchivedAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoArchivedAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoArchivedAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoArchivedAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoArchivedAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoArchivedAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoArchivedAuditEntryToUserResolver<TParent>;
  userLogin?: RepoArchivedAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoArchivedAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoArchivedAuditEntryToUserUrlResolver<TParent>;
  visibility?: RepoArchivedAuditEntryToVisibilityResolver<TParent>;
}

export interface RepoArchivedAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoArchivedAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoChangeMergeSettingAuditEntryTypeResolver<TParent = any> {
  action?: RepoChangeMergeSettingAuditEntryToActionResolver<TParent>;
  actor?: RepoChangeMergeSettingAuditEntryToActorResolver<TParent>;
  actorIp?: RepoChangeMergeSettingAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoChangeMergeSettingAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoChangeMergeSettingAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoChangeMergeSettingAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoChangeMergeSettingAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoChangeMergeSettingAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoChangeMergeSettingAuditEntryToIdResolver<TParent>;
  isEnabled?: RepoChangeMergeSettingAuditEntryToIsEnabledResolver<TParent>;
  mergeType?: RepoChangeMergeSettingAuditEntryToMergeTypeResolver<TParent>;
  operationType?: RepoChangeMergeSettingAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoChangeMergeSettingAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoChangeMergeSettingAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoChangeMergeSettingAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoChangeMergeSettingAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoChangeMergeSettingAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoChangeMergeSettingAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoChangeMergeSettingAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoChangeMergeSettingAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoChangeMergeSettingAuditEntryToUserResolver<TParent>;
  userLogin?: RepoChangeMergeSettingAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoChangeMergeSettingAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoChangeMergeSettingAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoChangeMergeSettingAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToIsEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToMergeTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoChangeMergeSettingAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigDisableAnonymousGitAccessAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigDisableAnonymousGitAccessAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigDisableAnonymousGitAccessAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigDisableAnonymousGitAccessAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigDisableAnonymousGitAccessAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigDisableAnonymousGitAccessAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigDisableAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigDisableAnonymousGitAccessAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigDisableAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigDisableAnonymousGitAccessAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigDisableAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigDisableAnonymousGitAccessAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigDisableAnonymousGitAccessAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigDisableAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigDisableAnonymousGitAccessAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableAnonymousGitAccessAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigDisableCollaboratorsOnlyAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigDisableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigDisableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigDisableCollaboratorsOnlyAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigDisableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigDisableCollaboratorsOnlyAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigDisableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigDisableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigDisableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigDisableContributorsOnlyAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigDisableContributorsOnlyAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigDisableContributorsOnlyAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigDisableContributorsOnlyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigDisableContributorsOnlyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigDisableContributorsOnlyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigDisableContributorsOnlyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigDisableContributorsOnlyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigDisableContributorsOnlyAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigDisableContributorsOnlyAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigDisableContributorsOnlyAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigDisableContributorsOnlyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigDisableContributorsOnlyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigDisableContributorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigDisableContributorsOnlyAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigDisableContributorsOnlyAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigDisableContributorsOnlyAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigDisableContributorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigDisableContributorsOnlyAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigDisableContributorsOnlyAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigDisableContributorsOnlyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigDisableContributorsOnlyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigDisableContributorsOnlyAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableContributorsOnlyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigDisableSockpuppetDisallowedAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigDisableSockpuppetDisallowedAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigDisableSockpuppetDisallowedAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigDisableSockpuppetDisallowedAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigDisableSockpuppetDisallowedAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigDisableSockpuppetDisallowedAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigDisableSockpuppetDisallowedAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigDisableSockpuppetDisallowedAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigDisableSockpuppetDisallowedAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigDisableSockpuppetDisallowedAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigEnableAnonymousGitAccessAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigEnableAnonymousGitAccessAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigEnableAnonymousGitAccessAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigEnableAnonymousGitAccessAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigEnableAnonymousGitAccessAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigEnableAnonymousGitAccessAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigEnableAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigEnableAnonymousGitAccessAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigEnableAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigEnableAnonymousGitAccessAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigEnableAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigEnableAnonymousGitAccessAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigEnableAnonymousGitAccessAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigEnableAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigEnableAnonymousGitAccessAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableAnonymousGitAccessAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigEnableCollaboratorsOnlyAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigEnableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigEnableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigEnableCollaboratorsOnlyAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigEnableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigEnableCollaboratorsOnlyAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigEnableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigEnableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigEnableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableCollaboratorsOnlyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigEnableContributorsOnlyAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigEnableContributorsOnlyAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigEnableContributorsOnlyAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigEnableContributorsOnlyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigEnableContributorsOnlyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigEnableContributorsOnlyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigEnableContributorsOnlyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigEnableContributorsOnlyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigEnableContributorsOnlyAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigEnableContributorsOnlyAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigEnableContributorsOnlyAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigEnableContributorsOnlyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigEnableContributorsOnlyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigEnableContributorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigEnableContributorsOnlyAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigEnableContributorsOnlyAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigEnableContributorsOnlyAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigEnableContributorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigEnableContributorsOnlyAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigEnableContributorsOnlyAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigEnableContributorsOnlyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigEnableContributorsOnlyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigEnableContributorsOnlyAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableContributorsOnlyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigEnableSockpuppetDisallowedAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigEnableSockpuppetDisallowedAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigEnableSockpuppetDisallowedAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigEnableSockpuppetDisallowedAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigEnableSockpuppetDisallowedAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigEnableSockpuppetDisallowedAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigEnableSockpuppetDisallowedAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigEnableSockpuppetDisallowedAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigEnableSockpuppetDisallowedAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigEnableSockpuppetDisallowedAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigLockAnonymousGitAccessAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigLockAnonymousGitAccessAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigLockAnonymousGitAccessAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigLockAnonymousGitAccessAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigLockAnonymousGitAccessAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigLockAnonymousGitAccessAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigLockAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigLockAnonymousGitAccessAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigLockAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigLockAnonymousGitAccessAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigLockAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigLockAnonymousGitAccessAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigLockAnonymousGitAccessAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigLockAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigLockAnonymousGitAccessAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigLockAnonymousGitAccessAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoConfigUnlockAnonymousGitAccessAuditEntryTypeResolver<TParent = any> {
  action?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActionResolver<TParent>;
  actor?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActorResolver<TParent>;
  actorIp?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoConfigUnlockAnonymousGitAccessAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoConfigUnlockAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoConfigUnlockAnonymousGitAccessAuditEntryToIdResolver<TParent>;
  operationType?: RepoConfigUnlockAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoConfigUnlockAnonymousGitAccessAuditEntryToUserResolver<TParent>;
  userLogin?: RepoConfigUnlockAnonymousGitAccessAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoConfigUnlockAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoConfigUnlockAnonymousGitAccessAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoConfigUnlockAnonymousGitAccessAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoCreateAuditEntryTypeResolver<TParent = any> {
  action?: RepoCreateAuditEntryToActionResolver<TParent>;
  actor?: RepoCreateAuditEntryToActorResolver<TParent>;
  actorIp?: RepoCreateAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoCreateAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoCreateAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoCreateAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoCreateAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoCreateAuditEntryToCreatedAtResolver<TParent>;
  forkParentName?: RepoCreateAuditEntryToForkParentNameResolver<TParent>;
  forkSourceName?: RepoCreateAuditEntryToForkSourceNameResolver<TParent>;
  id?: RepoCreateAuditEntryToIdResolver<TParent>;
  operationType?: RepoCreateAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoCreateAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoCreateAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoCreateAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoCreateAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoCreateAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoCreateAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoCreateAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoCreateAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoCreateAuditEntryToUserResolver<TParent>;
  userLogin?: RepoCreateAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoCreateAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoCreateAuditEntryToUserUrlResolver<TParent>;
  visibility?: RepoCreateAuditEntryToVisibilityResolver<TParent>;
}

export interface RepoCreateAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToForkParentNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToForkSourceNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoCreateAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoDestroyAuditEntryTypeResolver<TParent = any> {
  action?: RepoDestroyAuditEntryToActionResolver<TParent>;
  actor?: RepoDestroyAuditEntryToActorResolver<TParent>;
  actorIp?: RepoDestroyAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoDestroyAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoDestroyAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoDestroyAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoDestroyAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoDestroyAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoDestroyAuditEntryToIdResolver<TParent>;
  operationType?: RepoDestroyAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoDestroyAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoDestroyAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoDestroyAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoDestroyAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoDestroyAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoDestroyAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoDestroyAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoDestroyAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoDestroyAuditEntryToUserResolver<TParent>;
  userLogin?: RepoDestroyAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoDestroyAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoDestroyAuditEntryToUserUrlResolver<TParent>;
  visibility?: RepoDestroyAuditEntryToVisibilityResolver<TParent>;
}

export interface RepoDestroyAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoDestroyAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoRemoveMemberAuditEntryTypeResolver<TParent = any> {
  action?: RepoRemoveMemberAuditEntryToActionResolver<TParent>;
  actor?: RepoRemoveMemberAuditEntryToActorResolver<TParent>;
  actorIp?: RepoRemoveMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoRemoveMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoRemoveMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoRemoveMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoRemoveMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoRemoveMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoRemoveMemberAuditEntryToIdResolver<TParent>;
  operationType?: RepoRemoveMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoRemoveMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoRemoveMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoRemoveMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoRemoveMemberAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoRemoveMemberAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoRemoveMemberAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoRemoveMemberAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoRemoveMemberAuditEntryToRepositoryUrlResolver<TParent>;
  user?: RepoRemoveMemberAuditEntryToUserResolver<TParent>;
  userLogin?: RepoRemoveMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoRemoveMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoRemoveMemberAuditEntryToUserUrlResolver<TParent>;
  visibility?: RepoRemoveMemberAuditEntryToVisibilityResolver<TParent>;
}

export interface RepoRemoveMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveMemberAuditEntryToVisibilityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepoRemoveTopicAuditEntryTypeResolver<TParent = any> {
  action?: RepoRemoveTopicAuditEntryToActionResolver<TParent>;
  actor?: RepoRemoveTopicAuditEntryToActorResolver<TParent>;
  actorIp?: RepoRemoveTopicAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepoRemoveTopicAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepoRemoveTopicAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepoRemoveTopicAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepoRemoveTopicAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepoRemoveTopicAuditEntryToCreatedAtResolver<TParent>;
  id?: RepoRemoveTopicAuditEntryToIdResolver<TParent>;
  operationType?: RepoRemoveTopicAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepoRemoveTopicAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepoRemoveTopicAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepoRemoveTopicAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepoRemoveTopicAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: RepoRemoveTopicAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: RepoRemoveTopicAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: RepoRemoveTopicAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: RepoRemoveTopicAuditEntryToRepositoryUrlResolver<TParent>;
  topic?: RepoRemoveTopicAuditEntryToTopicResolver<TParent>;
  topicName?: RepoRemoveTopicAuditEntryToTopicNameResolver<TParent>;
  user?: RepoRemoveTopicAuditEntryToUserResolver<TParent>;
  userLogin?: RepoRemoveTopicAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepoRemoveTopicAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepoRemoveTopicAuditEntryToUserUrlResolver<TParent>;
}

export interface RepoRemoveTopicAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToTopicNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepoRemoveTopicAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryVisibilityChangeDisableAuditEntryTypeResolver<TParent = any> {
  action?: RepositoryVisibilityChangeDisableAuditEntryToActionResolver<TParent>;
  actor?: RepositoryVisibilityChangeDisableAuditEntryToActorResolver<TParent>;
  actorIp?: RepositoryVisibilityChangeDisableAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepositoryVisibilityChangeDisableAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepositoryVisibilityChangeDisableAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepositoryVisibilityChangeDisableAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepositoryVisibilityChangeDisableAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepositoryVisibilityChangeDisableAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: RepositoryVisibilityChangeDisableAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: RepositoryVisibilityChangeDisableAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: RepositoryVisibilityChangeDisableAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: RepositoryVisibilityChangeDisableAuditEntryToIdResolver<TParent>;
  operationType?: RepositoryVisibilityChangeDisableAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepositoryVisibilityChangeDisableAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepositoryVisibilityChangeDisableAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepositoryVisibilityChangeDisableAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepositoryVisibilityChangeDisableAuditEntryToOrganizationUrlResolver<TParent>;
  user?: RepositoryVisibilityChangeDisableAuditEntryToUserResolver<TParent>;
  userLogin?: RepositoryVisibilityChangeDisableAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepositoryVisibilityChangeDisableAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepositoryVisibilityChangeDisableAuditEntryToUserUrlResolver<TParent>;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeDisableAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryVisibilityChangeEnableAuditEntryTypeResolver<TParent = any> {
  action?: RepositoryVisibilityChangeEnableAuditEntryToActionResolver<TParent>;
  actor?: RepositoryVisibilityChangeEnableAuditEntryToActorResolver<TParent>;
  actorIp?: RepositoryVisibilityChangeEnableAuditEntryToActorIpResolver<TParent>;
  actorLocation?: RepositoryVisibilityChangeEnableAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: RepositoryVisibilityChangeEnableAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: RepositoryVisibilityChangeEnableAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: RepositoryVisibilityChangeEnableAuditEntryToActorUrlResolver<TParent>;
  createdAt?: RepositoryVisibilityChangeEnableAuditEntryToCreatedAtResolver<TParent>;
  enterpriseResourcePath?: RepositoryVisibilityChangeEnableAuditEntryToEnterpriseResourcePathResolver<TParent>;
  enterpriseSlug?: RepositoryVisibilityChangeEnableAuditEntryToEnterpriseSlugResolver<TParent>;
  enterpriseUrl?: RepositoryVisibilityChangeEnableAuditEntryToEnterpriseUrlResolver<TParent>;
  id?: RepositoryVisibilityChangeEnableAuditEntryToIdResolver<TParent>;
  operationType?: RepositoryVisibilityChangeEnableAuditEntryToOperationTypeResolver<TParent>;
  organization?: RepositoryVisibilityChangeEnableAuditEntryToOrganizationResolver<TParent>;
  organizationName?: RepositoryVisibilityChangeEnableAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: RepositoryVisibilityChangeEnableAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: RepositoryVisibilityChangeEnableAuditEntryToOrganizationUrlResolver<TParent>;
  user?: RepositoryVisibilityChangeEnableAuditEntryToUserResolver<TParent>;
  userLogin?: RepositoryVisibilityChangeEnableAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: RepositoryVisibilityChangeEnableAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: RepositoryVisibilityChangeEnableAuditEntryToUserUrlResolver<TParent>;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToEnterpriseResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToEnterpriseSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToEnterpriseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryVisibilityChangeEnableAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamAddMemberAuditEntryTypeResolver<TParent = any> {
  action?: TeamAddMemberAuditEntryToActionResolver<TParent>;
  actor?: TeamAddMemberAuditEntryToActorResolver<TParent>;
  actorIp?: TeamAddMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: TeamAddMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: TeamAddMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: TeamAddMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: TeamAddMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: TeamAddMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: TeamAddMemberAuditEntryToIdResolver<TParent>;
  isLdapMapped?: TeamAddMemberAuditEntryToIsLdapMappedResolver<TParent>;
  operationType?: TeamAddMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: TeamAddMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: TeamAddMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: TeamAddMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: TeamAddMemberAuditEntryToOrganizationUrlResolver<TParent>;
  team?: TeamAddMemberAuditEntryToTeamResolver<TParent>;
  teamName?: TeamAddMemberAuditEntryToTeamNameResolver<TParent>;
  teamResourcePath?: TeamAddMemberAuditEntryToTeamResourcePathResolver<TParent>;
  teamUrl?: TeamAddMemberAuditEntryToTeamUrlResolver<TParent>;
  user?: TeamAddMemberAuditEntryToUserResolver<TParent>;
  userLogin?: TeamAddMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: TeamAddMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: TeamAddMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface TeamAddMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToIsLdapMappedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamAddRepositoryAuditEntryTypeResolver<TParent = any> {
  action?: TeamAddRepositoryAuditEntryToActionResolver<TParent>;
  actor?: TeamAddRepositoryAuditEntryToActorResolver<TParent>;
  actorIp?: TeamAddRepositoryAuditEntryToActorIpResolver<TParent>;
  actorLocation?: TeamAddRepositoryAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: TeamAddRepositoryAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: TeamAddRepositoryAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: TeamAddRepositoryAuditEntryToActorUrlResolver<TParent>;
  createdAt?: TeamAddRepositoryAuditEntryToCreatedAtResolver<TParent>;
  id?: TeamAddRepositoryAuditEntryToIdResolver<TParent>;
  isLdapMapped?: TeamAddRepositoryAuditEntryToIsLdapMappedResolver<TParent>;
  operationType?: TeamAddRepositoryAuditEntryToOperationTypeResolver<TParent>;
  organization?: TeamAddRepositoryAuditEntryToOrganizationResolver<TParent>;
  organizationName?: TeamAddRepositoryAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: TeamAddRepositoryAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: TeamAddRepositoryAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: TeamAddRepositoryAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: TeamAddRepositoryAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: TeamAddRepositoryAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: TeamAddRepositoryAuditEntryToRepositoryUrlResolver<TParent>;
  team?: TeamAddRepositoryAuditEntryToTeamResolver<TParent>;
  teamName?: TeamAddRepositoryAuditEntryToTeamNameResolver<TParent>;
  teamResourcePath?: TeamAddRepositoryAuditEntryToTeamResourcePathResolver<TParent>;
  teamUrl?: TeamAddRepositoryAuditEntryToTeamUrlResolver<TParent>;
  user?: TeamAddRepositoryAuditEntryToUserResolver<TParent>;
  userLogin?: TeamAddRepositoryAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: TeamAddRepositoryAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: TeamAddRepositoryAuditEntryToUserUrlResolver<TParent>;
}

export interface TeamAddRepositoryAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToIsLdapMappedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamAddRepositoryAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamChangeParentTeamAuditEntryTypeResolver<TParent = any> {
  action?: TeamChangeParentTeamAuditEntryToActionResolver<TParent>;
  actor?: TeamChangeParentTeamAuditEntryToActorResolver<TParent>;
  actorIp?: TeamChangeParentTeamAuditEntryToActorIpResolver<TParent>;
  actorLocation?: TeamChangeParentTeamAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: TeamChangeParentTeamAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: TeamChangeParentTeamAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: TeamChangeParentTeamAuditEntryToActorUrlResolver<TParent>;
  createdAt?: TeamChangeParentTeamAuditEntryToCreatedAtResolver<TParent>;
  id?: TeamChangeParentTeamAuditEntryToIdResolver<TParent>;
  isLdapMapped?: TeamChangeParentTeamAuditEntryToIsLdapMappedResolver<TParent>;
  operationType?: TeamChangeParentTeamAuditEntryToOperationTypeResolver<TParent>;
  organization?: TeamChangeParentTeamAuditEntryToOrganizationResolver<TParent>;
  organizationName?: TeamChangeParentTeamAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: TeamChangeParentTeamAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: TeamChangeParentTeamAuditEntryToOrganizationUrlResolver<TParent>;
  parentTeam?: TeamChangeParentTeamAuditEntryToParentTeamResolver<TParent>;
  parentTeamName?: TeamChangeParentTeamAuditEntryToParentTeamNameResolver<TParent>;
  parentTeamNameWas?: TeamChangeParentTeamAuditEntryToParentTeamNameWasResolver<TParent>;
  parentTeamResourcePath?: TeamChangeParentTeamAuditEntryToParentTeamResourcePathResolver<TParent>;
  parentTeamUrl?: TeamChangeParentTeamAuditEntryToParentTeamUrlResolver<TParent>;
  parentTeamWas?: TeamChangeParentTeamAuditEntryToParentTeamWasResolver<TParent>;
  parentTeamWasResourcePath?: TeamChangeParentTeamAuditEntryToParentTeamWasResourcePathResolver<TParent>;
  parentTeamWasUrl?: TeamChangeParentTeamAuditEntryToParentTeamWasUrlResolver<TParent>;
  team?: TeamChangeParentTeamAuditEntryToTeamResolver<TParent>;
  teamName?: TeamChangeParentTeamAuditEntryToTeamNameResolver<TParent>;
  teamResourcePath?: TeamChangeParentTeamAuditEntryToTeamResourcePathResolver<TParent>;
  teamUrl?: TeamChangeParentTeamAuditEntryToTeamUrlResolver<TParent>;
  user?: TeamChangeParentTeamAuditEntryToUserResolver<TParent>;
  userLogin?: TeamChangeParentTeamAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: TeamChangeParentTeamAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: TeamChangeParentTeamAuditEntryToUserUrlResolver<TParent>;
}

export interface TeamChangeParentTeamAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToIsLdapMappedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamNameWasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamWasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamWasResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToParentTeamWasUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamChangeParentTeamAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamRemoveMemberAuditEntryTypeResolver<TParent = any> {
  action?: TeamRemoveMemberAuditEntryToActionResolver<TParent>;
  actor?: TeamRemoveMemberAuditEntryToActorResolver<TParent>;
  actorIp?: TeamRemoveMemberAuditEntryToActorIpResolver<TParent>;
  actorLocation?: TeamRemoveMemberAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: TeamRemoveMemberAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: TeamRemoveMemberAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: TeamRemoveMemberAuditEntryToActorUrlResolver<TParent>;
  createdAt?: TeamRemoveMemberAuditEntryToCreatedAtResolver<TParent>;
  id?: TeamRemoveMemberAuditEntryToIdResolver<TParent>;
  isLdapMapped?: TeamRemoveMemberAuditEntryToIsLdapMappedResolver<TParent>;
  operationType?: TeamRemoveMemberAuditEntryToOperationTypeResolver<TParent>;
  organization?: TeamRemoveMemberAuditEntryToOrganizationResolver<TParent>;
  organizationName?: TeamRemoveMemberAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: TeamRemoveMemberAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: TeamRemoveMemberAuditEntryToOrganizationUrlResolver<TParent>;
  team?: TeamRemoveMemberAuditEntryToTeamResolver<TParent>;
  teamName?: TeamRemoveMemberAuditEntryToTeamNameResolver<TParent>;
  teamResourcePath?: TeamRemoveMemberAuditEntryToTeamResourcePathResolver<TParent>;
  teamUrl?: TeamRemoveMemberAuditEntryToTeamUrlResolver<TParent>;
  user?: TeamRemoveMemberAuditEntryToUserResolver<TParent>;
  userLogin?: TeamRemoveMemberAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: TeamRemoveMemberAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: TeamRemoveMemberAuditEntryToUserUrlResolver<TParent>;
}

export interface TeamRemoveMemberAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToIsLdapMappedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveMemberAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTeamRemoveRepositoryAuditEntryTypeResolver<TParent = any> {
  action?: TeamRemoveRepositoryAuditEntryToActionResolver<TParent>;
  actor?: TeamRemoveRepositoryAuditEntryToActorResolver<TParent>;
  actorIp?: TeamRemoveRepositoryAuditEntryToActorIpResolver<TParent>;
  actorLocation?: TeamRemoveRepositoryAuditEntryToActorLocationResolver<TParent>;
  actorLogin?: TeamRemoveRepositoryAuditEntryToActorLoginResolver<TParent>;
  actorResourcePath?: TeamRemoveRepositoryAuditEntryToActorResourcePathResolver<TParent>;
  actorUrl?: TeamRemoveRepositoryAuditEntryToActorUrlResolver<TParent>;
  createdAt?: TeamRemoveRepositoryAuditEntryToCreatedAtResolver<TParent>;
  id?: TeamRemoveRepositoryAuditEntryToIdResolver<TParent>;
  isLdapMapped?: TeamRemoveRepositoryAuditEntryToIsLdapMappedResolver<TParent>;
  operationType?: TeamRemoveRepositoryAuditEntryToOperationTypeResolver<TParent>;
  organization?: TeamRemoveRepositoryAuditEntryToOrganizationResolver<TParent>;
  organizationName?: TeamRemoveRepositoryAuditEntryToOrganizationNameResolver<TParent>;
  organizationResourcePath?: TeamRemoveRepositoryAuditEntryToOrganizationResourcePathResolver<TParent>;
  organizationUrl?: TeamRemoveRepositoryAuditEntryToOrganizationUrlResolver<TParent>;
  repository?: TeamRemoveRepositoryAuditEntryToRepositoryResolver<TParent>;
  repositoryName?: TeamRemoveRepositoryAuditEntryToRepositoryNameResolver<TParent>;
  repositoryResourcePath?: TeamRemoveRepositoryAuditEntryToRepositoryResourcePathResolver<TParent>;
  repositoryUrl?: TeamRemoveRepositoryAuditEntryToRepositoryUrlResolver<TParent>;
  team?: TeamRemoveRepositoryAuditEntryToTeamResolver<TParent>;
  teamName?: TeamRemoveRepositoryAuditEntryToTeamNameResolver<TParent>;
  teamResourcePath?: TeamRemoveRepositoryAuditEntryToTeamResourcePathResolver<TParent>;
  teamUrl?: TeamRemoveRepositoryAuditEntryToTeamUrlResolver<TParent>;
  user?: TeamRemoveRepositoryAuditEntryToUserResolver<TParent>;
  userLogin?: TeamRemoveRepositoryAuditEntryToUserLoginResolver<TParent>;
  userResourcePath?: TeamRemoveRepositoryAuditEntryToUserResourcePathResolver<TParent>;
  userUrl?: TeamRemoveRepositoryAuditEntryToUserUrlResolver<TParent>;
}

export interface TeamRemoveRepositoryAuditEntryToActionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToActorIpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToActorLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToActorLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToActorResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToActorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToIsLdapMappedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToOperationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToOrganizationNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToOrganizationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToOrganizationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToRepositoryNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToRepositoryResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToRepositoryUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToTeamNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToUserResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRemoveRepositoryAuditEntryToUserUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIpAllowListEntryConnectionTypeResolver<TParent = any> {
  edges?: IpAllowListEntryConnectionToEdgesResolver<TParent>;
  nodes?: IpAllowListEntryConnectionToNodesResolver<TParent>;
  pageInfo?: IpAllowListEntryConnectionToPageInfoResolver<TParent>;
  totalCount?: IpAllowListEntryConnectionToTotalCountResolver<TParent>;
}

export interface IpAllowListEntryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIpAllowListEntryEdgeTypeResolver<TParent = any> {
  cursor?: IpAllowListEntryEdgeToCursorResolver<TParent>;
  node?: IpAllowListEntryEdgeToNodeResolver<TParent>;
}

export interface IpAllowListEntryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIpAllowListEntryTypeResolver<TParent = any> {
  allowListValue?: IpAllowListEntryToAllowListValueResolver<TParent>;
  createdAt?: IpAllowListEntryToCreatedAtResolver<TParent>;
  id?: IpAllowListEntryToIdResolver<TParent>;
  isActive?: IpAllowListEntryToIsActiveResolver<TParent>;
  name?: IpAllowListEntryToNameResolver<TParent>;
  owner?: IpAllowListEntryToOwnerResolver<TParent>;
  updatedAt?: IpAllowListEntryToUpdatedAtResolver<TParent>;
}

export interface IpAllowListEntryToAllowListValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryToIsActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IpAllowListEntryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIpAllowListOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Enterprise' | 'Organization';
}
export interface GQLOrganizationMemberConnectionTypeResolver<TParent = any> {
  edges?: OrganizationMemberConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationMemberConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationMemberConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationMemberConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationMemberEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationMemberEdgeToCursorResolver<TParent>;
  hasTwoFactorEnabled?: OrganizationMemberEdgeToHasTwoFactorEnabledResolver<TParent>;
  node?: OrganizationMemberEdgeToNodeResolver<TParent>;
  role?: OrganizationMemberEdgeToRoleResolver<TParent>;
}

export interface OrganizationMemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberEdgeToHasTwoFactorEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationIdentityProviderTypeResolver<TParent = any> {
  digestMethod?: OrganizationIdentityProviderToDigestMethodResolver<TParent>;
  externalIdentities?: OrganizationIdentityProviderToExternalIdentitiesResolver<TParent>;
  id?: OrganizationIdentityProviderToIdResolver<TParent>;
  idpCertificate?: OrganizationIdentityProviderToIdpCertificateResolver<TParent>;
  issuer?: OrganizationIdentityProviderToIssuerResolver<TParent>;
  organization?: OrganizationIdentityProviderToOrganizationResolver<TParent>;
  signatureMethod?: OrganizationIdentityProviderToSignatureMethodResolver<TParent>;
  ssoUrl?: OrganizationIdentityProviderToSsoUrlResolver<TParent>;
}

export interface OrganizationIdentityProviderToDigestMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToExternalIdentitiesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationIdentityProviderToExternalIdentitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationIdentityProviderToExternalIdentitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIdpCertificateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIssuerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToSignatureMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToSsoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityConnectionTypeResolver<TParent = any> {
  edges?: ExternalIdentityConnectionToEdgesResolver<TParent>;
  nodes?: ExternalIdentityConnectionToNodesResolver<TParent>;
  pageInfo?: ExternalIdentityConnectionToPageInfoResolver<TParent>;
  totalCount?: ExternalIdentityConnectionToTotalCountResolver<TParent>;
}

export interface ExternalIdentityConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityEdgeTypeResolver<TParent = any> {
  cursor?: ExternalIdentityEdgeToCursorResolver<TParent>;
  node?: ExternalIdentityEdgeToNodeResolver<TParent>;
}

export interface ExternalIdentityEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityTypeResolver<TParent = any> {
  guid?: ExternalIdentityToGuidResolver<TParent>;
  id?: ExternalIdentityToIdResolver<TParent>;
  organizationInvitation?: ExternalIdentityToOrganizationInvitationResolver<TParent>;
  samlIdentity?: ExternalIdentityToSamlIdentityResolver<TParent>;
  scimIdentity?: ExternalIdentityToScimIdentityResolver<TParent>;
  user?: ExternalIdentityToUserResolver<TParent>;
}

export interface ExternalIdentityToGuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToOrganizationInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToSamlIdentityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToScimIdentityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentitySamlAttributesTypeResolver<TParent = any> {
  nameId?: ExternalIdentitySamlAttributesToNameIdResolver<TParent>;
}

export interface ExternalIdentitySamlAttributesToNameIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExternalIdentityScimAttributesTypeResolver<TParent = any> {
  username?: ExternalIdentityScimAttributesToUsernameResolver<TParent>;
}

export interface ExternalIdentityScimAttributesToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseOwnerInfoTypeResolver<TParent = any> {
  actionExecutionCapabilitySettingOrganizations?: EnterpriseOwnerInfoToActionExecutionCapabilitySettingOrganizationsResolver<TParent>;
  admins?: EnterpriseOwnerInfoToAdminsResolver<TParent>;
  affiliatedUsersWithTwoFactorDisabled?: EnterpriseOwnerInfoToAffiliatedUsersWithTwoFactorDisabledResolver<TParent>;
  affiliatedUsersWithTwoFactorDisabledExist?: EnterpriseOwnerInfoToAffiliatedUsersWithTwoFactorDisabledExistResolver<TParent>;
  allowPrivateRepositoryForkingSetting?: EnterpriseOwnerInfoToAllowPrivateRepositoryForkingSettingResolver<TParent>;
  allowPrivateRepositoryForkingSettingOrganizations?: EnterpriseOwnerInfoToAllowPrivateRepositoryForkingSettingOrganizationsResolver<TParent>;
  defaultRepositoryPermissionSetting?: EnterpriseOwnerInfoToDefaultRepositoryPermissionSettingResolver<TParent>;
  defaultRepositoryPermissionSettingOrganizations?: EnterpriseOwnerInfoToDefaultRepositoryPermissionSettingOrganizationsResolver<TParent>;
  enterpriseServerInstallations?: EnterpriseOwnerInfoToEnterpriseServerInstallationsResolver<TParent>;
  ipAllowListEnabledSetting?: EnterpriseOwnerInfoToIpAllowListEnabledSettingResolver<TParent>;
  ipAllowListEntries?: EnterpriseOwnerInfoToIpAllowListEntriesResolver<TParent>;
  isUpdatingDefaultRepositoryPermission?: EnterpriseOwnerInfoToIsUpdatingDefaultRepositoryPermissionResolver<TParent>;
  isUpdatingTwoFactorRequirement?: EnterpriseOwnerInfoToIsUpdatingTwoFactorRequirementResolver<TParent>;
  membersCanChangeRepositoryVisibilitySetting?: EnterpriseOwnerInfoToMembersCanChangeRepositoryVisibilitySettingResolver<TParent>;
  membersCanChangeRepositoryVisibilitySettingOrganizations?: EnterpriseOwnerInfoToMembersCanChangeRepositoryVisibilitySettingOrganizationsResolver<TParent>;
  membersCanCreateInternalRepositoriesSetting?: EnterpriseOwnerInfoToMembersCanCreateInternalRepositoriesSettingResolver<TParent>;
  membersCanCreatePrivateRepositoriesSetting?: EnterpriseOwnerInfoToMembersCanCreatePrivateRepositoriesSettingResolver<TParent>;
  membersCanCreatePublicRepositoriesSetting?: EnterpriseOwnerInfoToMembersCanCreatePublicRepositoriesSettingResolver<TParent>;
  membersCanCreateRepositoriesSetting?: EnterpriseOwnerInfoToMembersCanCreateRepositoriesSettingResolver<TParent>;
  membersCanCreateRepositoriesSettingOrganizations?: EnterpriseOwnerInfoToMembersCanCreateRepositoriesSettingOrganizationsResolver<TParent>;
  membersCanDeleteIssuesSetting?: EnterpriseOwnerInfoToMembersCanDeleteIssuesSettingResolver<TParent>;
  membersCanDeleteIssuesSettingOrganizations?: EnterpriseOwnerInfoToMembersCanDeleteIssuesSettingOrganizationsResolver<TParent>;
  membersCanDeleteRepositoriesSetting?: EnterpriseOwnerInfoToMembersCanDeleteRepositoriesSettingResolver<TParent>;
  membersCanDeleteRepositoriesSettingOrganizations?: EnterpriseOwnerInfoToMembersCanDeleteRepositoriesSettingOrganizationsResolver<TParent>;
  membersCanInviteCollaboratorsSetting?: EnterpriseOwnerInfoToMembersCanInviteCollaboratorsSettingResolver<TParent>;
  membersCanInviteCollaboratorsSettingOrganizations?: EnterpriseOwnerInfoToMembersCanInviteCollaboratorsSettingOrganizationsResolver<TParent>;
  membersCanMakePurchasesSetting?: EnterpriseOwnerInfoToMembersCanMakePurchasesSettingResolver<TParent>;
  membersCanUpdateProtectedBranchesSetting?: EnterpriseOwnerInfoToMembersCanUpdateProtectedBranchesSettingResolver<TParent>;
  membersCanUpdateProtectedBranchesSettingOrganizations?: EnterpriseOwnerInfoToMembersCanUpdateProtectedBranchesSettingOrganizationsResolver<TParent>;
  membersCanViewDependencyInsightsSetting?: EnterpriseOwnerInfoToMembersCanViewDependencyInsightsSettingResolver<TParent>;
  membersCanViewDependencyInsightsSettingOrganizations?: EnterpriseOwnerInfoToMembersCanViewDependencyInsightsSettingOrganizationsResolver<TParent>;
  organizationProjectsSetting?: EnterpriseOwnerInfoToOrganizationProjectsSettingResolver<TParent>;
  organizationProjectsSettingOrganizations?: EnterpriseOwnerInfoToOrganizationProjectsSettingOrganizationsResolver<TParent>;
  outsideCollaborators?: EnterpriseOwnerInfoToOutsideCollaboratorsResolver<TParent>;
  pendingAdminInvitations?: EnterpriseOwnerInfoToPendingAdminInvitationsResolver<TParent>;
  pendingCollaboratorInvitations?: EnterpriseOwnerInfoToPendingCollaboratorInvitationsResolver<TParent>;
  pendingCollaborators?: EnterpriseOwnerInfoToPendingCollaboratorsResolver<TParent>;
  pendingMemberInvitations?: EnterpriseOwnerInfoToPendingMemberInvitationsResolver<TParent>;
  repositoryProjectsSetting?: EnterpriseOwnerInfoToRepositoryProjectsSettingResolver<TParent>;
  repositoryProjectsSettingOrganizations?: EnterpriseOwnerInfoToRepositoryProjectsSettingOrganizationsResolver<TParent>;
  samlIdentityProvider?: EnterpriseOwnerInfoToSamlIdentityProviderResolver<TParent>;
  samlIdentityProviderSettingOrganizations?: EnterpriseOwnerInfoToSamlIdentityProviderSettingOrganizationsResolver<TParent>;
  teamDiscussionsSetting?: EnterpriseOwnerInfoToTeamDiscussionsSettingResolver<TParent>;
  teamDiscussionsSettingOrganizations?: EnterpriseOwnerInfoToTeamDiscussionsSettingOrganizationsResolver<TParent>;
  twoFactorRequiredSetting?: EnterpriseOwnerInfoToTwoFactorRequiredSettingResolver<TParent>;
  twoFactorRequiredSettingOrganizations?: EnterpriseOwnerInfoToTwoFactorRequiredSettingOrganizationsResolver<TParent>;
}

export interface EnterpriseOwnerInfoToActionExecutionCapabilitySettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
}
export interface EnterpriseOwnerInfoToActionExecutionCapabilitySettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToActionExecutionCapabilitySettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToAdminsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseMemberOrder;
  query?: string;
  role?: GQLEnterpriseAdministratorRole;
}
export interface EnterpriseOwnerInfoToAdminsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToAdminsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToAffiliatedUsersWithTwoFactorDisabledArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface EnterpriseOwnerInfoToAffiliatedUsersWithTwoFactorDisabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToAffiliatedUsersWithTwoFactorDisabledArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToAffiliatedUsersWithTwoFactorDisabledExistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToAllowPrivateRepositoryForkingSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToAllowPrivateRepositoryForkingSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToAllowPrivateRepositoryForkingSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToAllowPrivateRepositoryForkingSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToDefaultRepositoryPermissionSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToDefaultRepositoryPermissionSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: GQLDefaultRepositoryPermissionField;
}
export interface EnterpriseOwnerInfoToDefaultRepositoryPermissionSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToDefaultRepositoryPermissionSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToEnterpriseServerInstallationsArgs {
  after?: string;
  before?: string;
  connectedOnly?: boolean;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseServerInstallationOrder;
}
export interface EnterpriseOwnerInfoToEnterpriseServerInstallationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToEnterpriseServerInstallationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToIpAllowListEnabledSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToIpAllowListEntriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLIpAllowListEntryOrder;
}
export interface EnterpriseOwnerInfoToIpAllowListEntriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToIpAllowListEntriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToIsUpdatingDefaultRepositoryPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToIsUpdatingTwoFactorRequirementResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanChangeRepositoryVisibilitySettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToMembersCanChangeRepositoryVisibilitySettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanCreateInternalRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanCreatePrivateRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanCreatePublicRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanCreateRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanCreateRepositoriesSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: GQLOrganizationMembersCanCreateRepositoriesSettingValue;
}
export interface EnterpriseOwnerInfoToMembersCanCreateRepositoriesSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanCreateRepositoriesSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanDeleteIssuesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanDeleteIssuesSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToMembersCanDeleteIssuesSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanDeleteIssuesSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanDeleteRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanDeleteRepositoriesSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToMembersCanDeleteRepositoriesSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanDeleteRepositoriesSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanInviteCollaboratorsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanInviteCollaboratorsSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToMembersCanInviteCollaboratorsSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanInviteCollaboratorsSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanMakePurchasesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanUpdateProtectedBranchesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanUpdateProtectedBranchesSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToMembersCanUpdateProtectedBranchesSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanUpdateProtectedBranchesSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanViewDependencyInsightsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToMembersCanViewDependencyInsightsSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToMembersCanViewDependencyInsightsSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToMembersCanViewDependencyInsightsSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToOrganizationProjectsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToOrganizationProjectsSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToOrganizationProjectsSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToOrganizationProjectsSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToOutsideCollaboratorsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  login?: string;
  orderBy?: GQLEnterpriseMemberOrder;
  query?: string;
  visibility?: GQLRepositoryVisibility;
}
export interface EnterpriseOwnerInfoToOutsideCollaboratorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToOutsideCollaboratorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToPendingAdminInvitationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseAdministratorInvitationOrder;
  query?: string;
  role?: GQLEnterpriseAdministratorRole;
}
export interface EnterpriseOwnerInfoToPendingAdminInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToPendingAdminInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToPendingCollaboratorInvitationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLRepositoryInvitationOrder;
  query?: string;
}
export interface EnterpriseOwnerInfoToPendingCollaboratorInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToPendingCollaboratorInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToPendingCollaboratorsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLRepositoryInvitationOrder;
  query?: string;
}
export interface EnterpriseOwnerInfoToPendingCollaboratorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToPendingCollaboratorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToPendingMemberInvitationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface EnterpriseOwnerInfoToPendingMemberInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToPendingMemberInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToRepositoryProjectsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToRepositoryProjectsSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToRepositoryProjectsSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToRepositoryProjectsSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToSamlIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToSamlIdentityProviderSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: GQLIdentityProviderConfigurationState;
}
export interface EnterpriseOwnerInfoToSamlIdentityProviderSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToSamlIdentityProviderSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToTeamDiscussionsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToTeamDiscussionsSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToTeamDiscussionsSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToTeamDiscussionsSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToTwoFactorRequiredSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOwnerInfoToTwoFactorRequiredSettingOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLOrganizationOrder;
  value: boolean;
}
export interface EnterpriseOwnerInfoToTwoFactorRequiredSettingOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOwnerInfoToTwoFactorRequiredSettingOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseAdministratorConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseAdministratorConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseAdministratorConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseAdministratorConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseAdministratorConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseAdministratorConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseAdministratorEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseAdministratorEdgeToCursorResolver<TParent>;
  node?: EnterpriseAdministratorEdgeToNodeResolver<TParent>;
  role?: EnterpriseAdministratorEdgeToRoleResolver<TParent>;
}

export interface EnterpriseAdministratorEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerInstallationConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseServerInstallationConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseServerInstallationConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseServerInstallationConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseServerInstallationConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseServerInstallationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerInstallationEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseServerInstallationEdgeToCursorResolver<TParent>;
  node?: EnterpriseServerInstallationEdgeToNodeResolver<TParent>;
}

export interface EnterpriseServerInstallationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerInstallationTypeResolver<TParent = any> {
  createdAt?: EnterpriseServerInstallationToCreatedAtResolver<TParent>;
  customerName?: EnterpriseServerInstallationToCustomerNameResolver<TParent>;
  hostName?: EnterpriseServerInstallationToHostNameResolver<TParent>;
  id?: EnterpriseServerInstallationToIdResolver<TParent>;
  isConnected?: EnterpriseServerInstallationToIsConnectedResolver<TParent>;
  updatedAt?: EnterpriseServerInstallationToUpdatedAtResolver<TParent>;
  userAccounts?: EnterpriseServerInstallationToUserAccountsResolver<TParent>;
  userAccountsUploads?: EnterpriseServerInstallationToUserAccountsUploadsResolver<TParent>;
}

export interface EnterpriseServerInstallationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToCustomerNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToHostNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToIsConnectedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToUserAccountsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseServerUserAccountOrder;
}
export interface EnterpriseServerInstallationToUserAccountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseServerInstallationToUserAccountsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerInstallationToUserAccountsUploadsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseServerUserAccountsUploadOrder;
}
export interface EnterpriseServerInstallationToUserAccountsUploadsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseServerInstallationToUserAccountsUploadsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseServerUserAccountConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseServerUserAccountConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseServerUserAccountConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseServerUserAccountConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseServerUserAccountConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseServerUserAccountEdgeToCursorResolver<TParent>;
  node?: EnterpriseServerUserAccountEdgeToNodeResolver<TParent>;
}

export interface EnterpriseServerUserAccountEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountTypeResolver<TParent = any> {
  createdAt?: EnterpriseServerUserAccountToCreatedAtResolver<TParent>;
  emails?: EnterpriseServerUserAccountToEmailsResolver<TParent>;
  enterpriseServerInstallation?: EnterpriseServerUserAccountToEnterpriseServerInstallationResolver<TParent>;
  id?: EnterpriseServerUserAccountToIdResolver<TParent>;
  isSiteAdmin?: EnterpriseServerUserAccountToIsSiteAdminResolver<TParent>;
  login?: EnterpriseServerUserAccountToLoginResolver<TParent>;
  profileName?: EnterpriseServerUserAccountToProfileNameResolver<TParent>;
  remoteCreatedAt?: EnterpriseServerUserAccountToRemoteCreatedAtResolver<TParent>;
  remoteUserId?: EnterpriseServerUserAccountToRemoteUserIdResolver<TParent>;
  updatedAt?: EnterpriseServerUserAccountToUpdatedAtResolver<TParent>;
}

export interface EnterpriseServerUserAccountToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToEmailsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLEnterpriseServerUserAccountEmailOrder;
}
export interface EnterpriseServerUserAccountToEmailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseServerUserAccountToEmailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToEnterpriseServerInstallationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToIsSiteAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToProfileNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToRemoteCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToRemoteUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountEmailConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseServerUserAccountEmailConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseServerUserAccountEmailConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseServerUserAccountEmailConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseServerUserAccountEmailConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseServerUserAccountEmailConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountEmailEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseServerUserAccountEmailEdgeToCursorResolver<TParent>;
  node?: EnterpriseServerUserAccountEmailEdgeToNodeResolver<TParent>;
}

export interface EnterpriseServerUserAccountEmailEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountEmailTypeResolver<TParent = any> {
  createdAt?: EnterpriseServerUserAccountEmailToCreatedAtResolver<TParent>;
  email?: EnterpriseServerUserAccountEmailToEmailResolver<TParent>;
  id?: EnterpriseServerUserAccountEmailToIdResolver<TParent>;
  isPrimary?: EnterpriseServerUserAccountEmailToIsPrimaryResolver<TParent>;
  updatedAt?: EnterpriseServerUserAccountEmailToUpdatedAtResolver<TParent>;
  userAccount?: EnterpriseServerUserAccountEmailToUserAccountResolver<TParent>;
}

export interface EnterpriseServerUserAccountEmailToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailToIsPrimaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountEmailToUserAccountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountsUploadConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseServerUserAccountsUploadConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseServerUserAccountsUploadConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseServerUserAccountsUploadConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseServerUserAccountsUploadConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseServerUserAccountsUploadConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountsUploadEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseServerUserAccountsUploadEdgeToCursorResolver<TParent>;
  node?: EnterpriseServerUserAccountsUploadEdgeToNodeResolver<TParent>;
}

export interface EnterpriseServerUserAccountsUploadEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseServerUserAccountsUploadTypeResolver<TParent = any> {
  createdAt?: EnterpriseServerUserAccountsUploadToCreatedAtResolver<TParent>;
  enterprise?: EnterpriseServerUserAccountsUploadToEnterpriseResolver<TParent>;
  enterpriseServerInstallation?: EnterpriseServerUserAccountsUploadToEnterpriseServerInstallationResolver<TParent>;
  id?: EnterpriseServerUserAccountsUploadToIdResolver<TParent>;
  name?: EnterpriseServerUserAccountsUploadToNameResolver<TParent>;
  syncState?: EnterpriseServerUserAccountsUploadToSyncStateResolver<TParent>;
  updatedAt?: EnterpriseServerUserAccountsUploadToUpdatedAtResolver<TParent>;
}

export interface EnterpriseServerUserAccountsUploadToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadToEnterpriseServerInstallationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadToSyncStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseServerUserAccountsUploadToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseOutsideCollaboratorConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseOutsideCollaboratorConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseOutsideCollaboratorConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseOutsideCollaboratorConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseOutsideCollaboratorConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseOutsideCollaboratorConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOutsideCollaboratorConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOutsideCollaboratorConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOutsideCollaboratorConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseOutsideCollaboratorEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseOutsideCollaboratorEdgeToCursorResolver<TParent>;
  isUnlicensed?: EnterpriseOutsideCollaboratorEdgeToIsUnlicensedResolver<TParent>;
  node?: EnterpriseOutsideCollaboratorEdgeToNodeResolver<TParent>;
  repositories?: EnterpriseOutsideCollaboratorEdgeToRepositoriesResolver<TParent>;
}

export interface EnterpriseOutsideCollaboratorEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOutsideCollaboratorEdgeToIsUnlicensedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOutsideCollaboratorEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseOutsideCollaboratorEdgeToRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLRepositoryOrder;
}
export interface EnterpriseOutsideCollaboratorEdgeToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseOutsideCollaboratorEdgeToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseRepositoryInfoConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseRepositoryInfoConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseRepositoryInfoConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseRepositoryInfoConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseRepositoryInfoConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseRepositoryInfoConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseRepositoryInfoEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseRepositoryInfoEdgeToCursorResolver<TParent>;
  node?: EnterpriseRepositoryInfoEdgeToNodeResolver<TParent>;
}

export interface EnterpriseRepositoryInfoEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseRepositoryInfoTypeResolver<TParent = any> {
  id?: EnterpriseRepositoryInfoToIdResolver<TParent>;
  isPrivate?: EnterpriseRepositoryInfoToIsPrivateResolver<TParent>;
  name?: EnterpriseRepositoryInfoToNameResolver<TParent>;
  nameWithOwner?: EnterpriseRepositoryInfoToNameWithOwnerResolver<TParent>;
}

export interface EnterpriseRepositoryInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoToIsPrivateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseRepositoryInfoToNameWithOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseAdministratorInvitationConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseAdministratorInvitationConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseAdministratorInvitationConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseAdministratorInvitationConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseAdministratorInvitationConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseAdministratorInvitationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseAdministratorInvitationEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseAdministratorInvitationEdgeToCursorResolver<TParent>;
  node?: EnterpriseAdministratorInvitationEdgeToNodeResolver<TParent>;
}

export interface EnterpriseAdministratorInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseAdministratorInvitationTypeResolver<TParent = any> {
  createdAt?: EnterpriseAdministratorInvitationToCreatedAtResolver<TParent>;
  email?: EnterpriseAdministratorInvitationToEmailResolver<TParent>;
  enterprise?: EnterpriseAdministratorInvitationToEnterpriseResolver<TParent>;
  id?: EnterpriseAdministratorInvitationToIdResolver<TParent>;
  invitee?: EnterpriseAdministratorInvitationToInviteeResolver<TParent>;
  inviter?: EnterpriseAdministratorInvitationToInviterResolver<TParent>;
  role?: EnterpriseAdministratorInvitationToRoleResolver<TParent>;
}

export interface EnterpriseAdministratorInvitationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseAdministratorInvitationToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInvitationConnectionTypeResolver<TParent = any> {
  edges?: RepositoryInvitationConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryInvitationConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryInvitationConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryInvitationConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryInvitationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInvitationEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryInvitationEdgeToCursorResolver<TParent>;
  node?: RepositoryInvitationEdgeToNodeResolver<TParent>;
}

export interface RepositoryInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRepositoryInvitationTypeResolver<TParent = any> {
  email?: RepositoryInvitationToEmailResolver<TParent>;
  id?: RepositoryInvitationToIdResolver<TParent>;
  invitee?: RepositoryInvitationToInviteeResolver<TParent>;
  inviter?: RepositoryInvitationToInviterResolver<TParent>;
  permission?: RepositoryInvitationToPermissionResolver<TParent>;
  repository?: RepositoryInvitationToRepositoryResolver<TParent>;
}

export interface RepositoryInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterprisePendingCollaboratorConnectionTypeResolver<TParent = any> {
  edges?: EnterprisePendingCollaboratorConnectionToEdgesResolver<TParent>;
  nodes?: EnterprisePendingCollaboratorConnectionToNodesResolver<TParent>;
  pageInfo?: EnterprisePendingCollaboratorConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterprisePendingCollaboratorConnectionToTotalCountResolver<TParent>;
}

export interface EnterprisePendingCollaboratorConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingCollaboratorConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingCollaboratorConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingCollaboratorConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterprisePendingCollaboratorEdgeTypeResolver<TParent = any> {
  cursor?: EnterprisePendingCollaboratorEdgeToCursorResolver<TParent>;
  isUnlicensed?: EnterprisePendingCollaboratorEdgeToIsUnlicensedResolver<TParent>;
  node?: EnterprisePendingCollaboratorEdgeToNodeResolver<TParent>;
  repositories?: EnterprisePendingCollaboratorEdgeToRepositoriesResolver<TParent>;
}

export interface EnterprisePendingCollaboratorEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingCollaboratorEdgeToIsUnlicensedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingCollaboratorEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingCollaboratorEdgeToRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: GQLRepositoryOrder;
}
export interface EnterprisePendingCollaboratorEdgeToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterprisePendingCollaboratorEdgeToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterprisePendingMemberInvitationConnectionTypeResolver<TParent = any> {
  edges?: EnterprisePendingMemberInvitationConnectionToEdgesResolver<TParent>;
  nodes?: EnterprisePendingMemberInvitationConnectionToNodesResolver<TParent>;
  pageInfo?: EnterprisePendingMemberInvitationConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterprisePendingMemberInvitationConnectionToTotalCountResolver<TParent>;
  totalUniqueUserCount?: EnterprisePendingMemberInvitationConnectionToTotalUniqueUserCountResolver<TParent>;
}

export interface EnterprisePendingMemberInvitationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingMemberInvitationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingMemberInvitationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingMemberInvitationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingMemberInvitationConnectionToTotalUniqueUserCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterprisePendingMemberInvitationEdgeTypeResolver<TParent = any> {
  cursor?: EnterprisePendingMemberInvitationEdgeToCursorResolver<TParent>;
  isUnlicensed?: EnterprisePendingMemberInvitationEdgeToIsUnlicensedResolver<TParent>;
  node?: EnterprisePendingMemberInvitationEdgeToNodeResolver<TParent>;
}

export interface EnterprisePendingMemberInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingMemberInvitationEdgeToIsUnlicensedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterprisePendingMemberInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseIdentityProviderTypeResolver<TParent = any> {
  digestMethod?: EnterpriseIdentityProviderToDigestMethodResolver<TParent>;
  enterprise?: EnterpriseIdentityProviderToEnterpriseResolver<TParent>;
  externalIdentities?: EnterpriseIdentityProviderToExternalIdentitiesResolver<TParent>;
  id?: EnterpriseIdentityProviderToIdResolver<TParent>;
  idpCertificate?: EnterpriseIdentityProviderToIdpCertificateResolver<TParent>;
  issuer?: EnterpriseIdentityProviderToIssuerResolver<TParent>;
  recoveryCodes?: EnterpriseIdentityProviderToRecoveryCodesResolver<TParent>;
  signatureMethod?: EnterpriseIdentityProviderToSignatureMethodResolver<TParent>;
  ssoUrl?: EnterpriseIdentityProviderToSsoUrlResolver<TParent>;
}

export interface EnterpriseIdentityProviderToDigestMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToExternalIdentitiesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface EnterpriseIdentityProviderToExternalIdentitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: EnterpriseIdentityProviderToExternalIdentitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToIdpCertificateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToIssuerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToRecoveryCodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToSignatureMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseIdentityProviderToSsoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseUserAccountConnectionTypeResolver<TParent = any> {
  edges?: EnterpriseUserAccountConnectionToEdgesResolver<TParent>;
  nodes?: EnterpriseUserAccountConnectionToNodesResolver<TParent>;
  pageInfo?: EnterpriseUserAccountConnectionToPageInfoResolver<TParent>;
  totalCount?: EnterpriseUserAccountConnectionToTotalCountResolver<TParent>;
}

export interface EnterpriseUserAccountConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnterpriseUserAccountEdgeTypeResolver<TParent = any> {
  cursor?: EnterpriseUserAccountEdgeToCursorResolver<TParent>;
  node?: EnterpriseUserAccountEdgeToNodeResolver<TParent>;
}

export interface EnterpriseUserAccountEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnterpriseUserAccountEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceCategoryTypeResolver<TParent = any> {
  description?: MarketplaceCategoryToDescriptionResolver<TParent>;
  howItWorks?: MarketplaceCategoryToHowItWorksResolver<TParent>;
  id?: MarketplaceCategoryToIdResolver<TParent>;
  name?: MarketplaceCategoryToNameResolver<TParent>;
  primaryListingCount?: MarketplaceCategoryToPrimaryListingCountResolver<TParent>;
  resourcePath?: MarketplaceCategoryToResourcePathResolver<TParent>;
  secondaryListingCount?: MarketplaceCategoryToSecondaryListingCountResolver<TParent>;
  slug?: MarketplaceCategoryToSlugResolver<TParent>;
  url?: MarketplaceCategoryToUrlResolver<TParent>;
}

export interface MarketplaceCategoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToHowItWorksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToPrimaryListingCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToSecondaryListingCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceListingTypeResolver<TParent = any> {
  app?: MarketplaceListingToAppResolver<TParent>;
  companyUrl?: MarketplaceListingToCompanyUrlResolver<TParent>;
  configurationResourcePath?: MarketplaceListingToConfigurationResourcePathResolver<TParent>;
  configurationUrl?: MarketplaceListingToConfigurationUrlResolver<TParent>;
  documentationUrl?: MarketplaceListingToDocumentationUrlResolver<TParent>;
  extendedDescription?: MarketplaceListingToExtendedDescriptionResolver<TParent>;
  extendedDescriptionHTML?: MarketplaceListingToExtendedDescriptionHTMLResolver<TParent>;
  fullDescription?: MarketplaceListingToFullDescriptionResolver<TParent>;
  fullDescriptionHTML?: MarketplaceListingToFullDescriptionHTMLResolver<TParent>;
  hasPublishedFreeTrialPlans?: MarketplaceListingToHasPublishedFreeTrialPlansResolver<TParent>;
  hasTermsOfService?: MarketplaceListingToHasTermsOfServiceResolver<TParent>;
  howItWorks?: MarketplaceListingToHowItWorksResolver<TParent>;
  howItWorksHTML?: MarketplaceListingToHowItWorksHTMLResolver<TParent>;
  id?: MarketplaceListingToIdResolver<TParent>;
  installationUrl?: MarketplaceListingToInstallationUrlResolver<TParent>;
  installedForViewer?: MarketplaceListingToInstalledForViewerResolver<TParent>;
  isArchived?: MarketplaceListingToIsArchivedResolver<TParent>;
  isDraft?: MarketplaceListingToIsDraftResolver<TParent>;
  isPaid?: MarketplaceListingToIsPaidResolver<TParent>;
  isPublic?: MarketplaceListingToIsPublicResolver<TParent>;
  isRejected?: MarketplaceListingToIsRejectedResolver<TParent>;
  isUnverified?: MarketplaceListingToIsUnverifiedResolver<TParent>;
  isUnverifiedPending?: MarketplaceListingToIsUnverifiedPendingResolver<TParent>;
  isVerificationPendingFromDraft?: MarketplaceListingToIsVerificationPendingFromDraftResolver<TParent>;
  isVerificationPendingFromUnverified?: MarketplaceListingToIsVerificationPendingFromUnverifiedResolver<TParent>;
  isVerified?: MarketplaceListingToIsVerifiedResolver<TParent>;
  logoBackgroundColor?: MarketplaceListingToLogoBackgroundColorResolver<TParent>;
  logoUrl?: MarketplaceListingToLogoUrlResolver<TParent>;
  name?: MarketplaceListingToNameResolver<TParent>;
  normalizedShortDescription?: MarketplaceListingToNormalizedShortDescriptionResolver<TParent>;
  pricingUrl?: MarketplaceListingToPricingUrlResolver<TParent>;
  primaryCategory?: MarketplaceListingToPrimaryCategoryResolver<TParent>;
  privacyPolicyUrl?: MarketplaceListingToPrivacyPolicyUrlResolver<TParent>;
  resourcePath?: MarketplaceListingToResourcePathResolver<TParent>;
  screenshotUrls?: MarketplaceListingToScreenshotUrlsResolver<TParent>;
  secondaryCategory?: MarketplaceListingToSecondaryCategoryResolver<TParent>;
  shortDescription?: MarketplaceListingToShortDescriptionResolver<TParent>;
  slug?: MarketplaceListingToSlugResolver<TParent>;
  statusUrl?: MarketplaceListingToStatusUrlResolver<TParent>;
  supportEmail?: MarketplaceListingToSupportEmailResolver<TParent>;
  supportUrl?: MarketplaceListingToSupportUrlResolver<TParent>;
  termsOfServiceUrl?: MarketplaceListingToTermsOfServiceUrlResolver<TParent>;
  url?: MarketplaceListingToUrlResolver<TParent>;
  viewerCanAddPlans?: MarketplaceListingToViewerCanAddPlansResolver<TParent>;
  viewerCanApprove?: MarketplaceListingToViewerCanApproveResolver<TParent>;
  viewerCanDelist?: MarketplaceListingToViewerCanDelistResolver<TParent>;
  viewerCanEdit?: MarketplaceListingToViewerCanEditResolver<TParent>;
  viewerCanEditCategories?: MarketplaceListingToViewerCanEditCategoriesResolver<TParent>;
  viewerCanEditPlans?: MarketplaceListingToViewerCanEditPlansResolver<TParent>;
  viewerCanRedraft?: MarketplaceListingToViewerCanRedraftResolver<TParent>;
  viewerCanReject?: MarketplaceListingToViewerCanRejectResolver<TParent>;
  viewerCanRequestApproval?: MarketplaceListingToViewerCanRequestApprovalResolver<TParent>;
  viewerHasPurchased?: MarketplaceListingToViewerHasPurchasedResolver<TParent>;
  viewerHasPurchasedForAllOrganizations?: MarketplaceListingToViewerHasPurchasedForAllOrganizationsResolver<TParent>;
  viewerIsListingAdmin?: MarketplaceListingToViewerIsListingAdminResolver<TParent>;
}

export interface MarketplaceListingToAppResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToCompanyUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToConfigurationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToConfigurationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToDocumentationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToExtendedDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToExtendedDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToFullDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToFullDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasPublishedFreeTrialPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasTermsOfServiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHowItWorksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHowItWorksHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToInstallationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToInstalledForViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsRejectedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsUnverifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsUnverifiedPendingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsVerificationPendingFromDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsVerificationPendingFromUnverifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToLogoBackgroundColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToLogoUrlArgs {
  size?: number;
}
export interface MarketplaceListingToLogoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MarketplaceListingToLogoUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToNormalizedShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPricingUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPrimaryCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPrivacyPolicyUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToScreenshotUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSecondaryCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToStatusUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSupportEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSupportUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToTermsOfServiceUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanAddPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanApproveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanDelistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRedraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRejectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRequestApprovalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerHasPurchasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerHasPurchasedForAllOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerIsListingAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceListingConnectionTypeResolver<TParent = any> {
  edges?: MarketplaceListingConnectionToEdgesResolver<TParent>;
  nodes?: MarketplaceListingConnectionToNodesResolver<TParent>;
  pageInfo?: MarketplaceListingConnectionToPageInfoResolver<TParent>;
  totalCount?: MarketplaceListingConnectionToTotalCountResolver<TParent>;
}

export interface MarketplaceListingConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarketplaceListingEdgeTypeResolver<TParent = any> {
  cursor?: MarketplaceListingEdgeToCursorResolver<TParent>;
  node?: MarketplaceListingEdgeToNodeResolver<TParent>;
}

export interface MarketplaceListingEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGitHubMetadataTypeResolver<TParent = any> {
  gitHubServicesSha?: GitHubMetadataToGitHubServicesShaResolver<TParent>;
  gitIpAddresses?: GitHubMetadataToGitIpAddressesResolver<TParent>;
  hookIpAddresses?: GitHubMetadataToHookIpAddressesResolver<TParent>;
  importerIpAddresses?: GitHubMetadataToImporterIpAddressesResolver<TParent>;
  isPasswordAuthenticationVerifiable?: GitHubMetadataToIsPasswordAuthenticationVerifiableResolver<TParent>;
  pagesIpAddresses?: GitHubMetadataToPagesIpAddressesResolver<TParent>;
}

export interface GitHubMetadataToGitHubServicesShaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToGitIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToHookIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToImporterIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToIsPasswordAuthenticationVerifiableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToPagesIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRateLimitTypeResolver<TParent = any> {
  cost?: RateLimitToCostResolver<TParent>;
  limit?: RateLimitToLimitResolver<TParent>;
  nodeCount?: RateLimitToNodeCountResolver<TParent>;
  remaining?: RateLimitToRemainingResolver<TParent>;
  resetAt?: RateLimitToResetAtResolver<TParent>;
}

export interface RateLimitToCostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToNodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToResetAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultItemConnectionTypeResolver<TParent = any> {
  codeCount?: SearchResultItemConnectionToCodeCountResolver<TParent>;
  edges?: SearchResultItemConnectionToEdgesResolver<TParent>;
  issueCount?: SearchResultItemConnectionToIssueCountResolver<TParent>;
  nodes?: SearchResultItemConnectionToNodesResolver<TParent>;
  pageInfo?: SearchResultItemConnectionToPageInfoResolver<TParent>;
  repositoryCount?: SearchResultItemConnectionToRepositoryCountResolver<TParent>;
  userCount?: SearchResultItemConnectionToUserCountResolver<TParent>;
  wikiCount?: SearchResultItemConnectionToWikiCountResolver<TParent>;
}

export interface SearchResultItemConnectionToCodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToIssueCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToRepositoryCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToUserCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToWikiCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultItemEdgeTypeResolver<TParent = any> {
  cursor?: SearchResultItemEdgeToCursorResolver<TParent>;
  node?: SearchResultItemEdgeToNodeResolver<TParent>;
  textMatches?: SearchResultItemEdgeToTextMatchesResolver<TParent>;
}

export interface SearchResultItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeToTextMatchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'App' | 'Issue' | 'MarketplaceListing' | 'Organization' | 'PullRequest' | 'Repository' | 'User';
}
export interface GQLTextMatchTypeResolver<TParent = any> {
  fragment?: TextMatchToFragmentResolver<TParent>;
  highlights?: TextMatchToHighlightsResolver<TParent>;
  property?: TextMatchToPropertyResolver<TParent>;
}

export interface TextMatchToFragmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchToHighlightsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchToPropertyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTextMatchHighlightTypeResolver<TParent = any> {
  beginIndice?: TextMatchHighlightToBeginIndiceResolver<TParent>;
  endIndice?: TextMatchHighlightToEndIndiceResolver<TParent>;
  text?: TextMatchHighlightToTextResolver<TParent>;
}

export interface TextMatchHighlightToBeginIndiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightToEndIndiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryConnectionTypeResolver<TParent = any> {
  edges?: SecurityAdvisoryConnectionToEdgesResolver<TParent>;
  nodes?: SecurityAdvisoryConnectionToNodesResolver<TParent>;
  pageInfo?: SecurityAdvisoryConnectionToPageInfoResolver<TParent>;
  totalCount?: SecurityAdvisoryConnectionToTotalCountResolver<TParent>;
}

export interface SecurityAdvisoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSecurityAdvisoryEdgeTypeResolver<TParent = any> {
  cursor?: SecurityAdvisoryEdgeToCursorResolver<TParent>;
  node?: SecurityAdvisoryEdgeToNodeResolver<TParent>;
}

export interface SecurityAdvisoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  acceptEnterpriseAdministratorInvitation?: MutationToAcceptEnterpriseAdministratorInvitationResolver<TParent>;
  acceptTopicSuggestion?: MutationToAcceptTopicSuggestionResolver<TParent>;
  addAssigneesToAssignable?: MutationToAddAssigneesToAssignableResolver<TParent>;
  addComment?: MutationToAddCommentResolver<TParent>;
  addLabelsToLabelable?: MutationToAddLabelsToLabelableResolver<TParent>;
  addProjectCard?: MutationToAddProjectCardResolver<TParent>;
  addProjectColumn?: MutationToAddProjectColumnResolver<TParent>;
  addPullRequestReview?: MutationToAddPullRequestReviewResolver<TParent>;
  addPullRequestReviewComment?: MutationToAddPullRequestReviewCommentResolver<TParent>;
  addPullRequestReviewThread?: MutationToAddPullRequestReviewThreadResolver<TParent>;
  addReaction?: MutationToAddReactionResolver<TParent>;
  addStar?: MutationToAddStarResolver<TParent>;
  archiveRepository?: MutationToArchiveRepositoryResolver<TParent>;
  cancelEnterpriseAdminInvitation?: MutationToCancelEnterpriseAdminInvitationResolver<TParent>;
  changeUserStatus?: MutationToChangeUserStatusResolver<TParent>;
  clearLabelsFromLabelable?: MutationToClearLabelsFromLabelableResolver<TParent>;
  cloneProject?: MutationToCloneProjectResolver<TParent>;
  cloneTemplateRepository?: MutationToCloneTemplateRepositoryResolver<TParent>;
  closeIssue?: MutationToCloseIssueResolver<TParent>;
  closePullRequest?: MutationToClosePullRequestResolver<TParent>;
  convertProjectCardNoteToIssue?: MutationToConvertProjectCardNoteToIssueResolver<TParent>;
  createBranchProtectionRule?: MutationToCreateBranchProtectionRuleResolver<TParent>;
  createEnterpriseOrganization?: MutationToCreateEnterpriseOrganizationResolver<TParent>;
  createIpAllowListEntry?: MutationToCreateIpAllowListEntryResolver<TParent>;
  createIssue?: MutationToCreateIssueResolver<TParent>;
  createProject?: MutationToCreateProjectResolver<TParent>;
  createPullRequest?: MutationToCreatePullRequestResolver<TParent>;
  createRef?: MutationToCreateRefResolver<TParent>;
  createRepository?: MutationToCreateRepositoryResolver<TParent>;
  createTeamDiscussion?: MutationToCreateTeamDiscussionResolver<TParent>;
  createTeamDiscussionComment?: MutationToCreateTeamDiscussionCommentResolver<TParent>;
  declineTopicSuggestion?: MutationToDeclineTopicSuggestionResolver<TParent>;
  deleteBranchProtectionRule?: MutationToDeleteBranchProtectionRuleResolver<TParent>;
  deleteDeployment?: MutationToDeleteDeploymentResolver<TParent>;
  deleteIpAllowListEntry?: MutationToDeleteIpAllowListEntryResolver<TParent>;
  deleteIssue?: MutationToDeleteIssueResolver<TParent>;
  deleteIssueComment?: MutationToDeleteIssueCommentResolver<TParent>;
  deleteProject?: MutationToDeleteProjectResolver<TParent>;
  deleteProjectCard?: MutationToDeleteProjectCardResolver<TParent>;
  deleteProjectColumn?: MutationToDeleteProjectColumnResolver<TParent>;
  deletePullRequestReview?: MutationToDeletePullRequestReviewResolver<TParent>;
  deletePullRequestReviewComment?: MutationToDeletePullRequestReviewCommentResolver<TParent>;
  deleteRef?: MutationToDeleteRefResolver<TParent>;
  deleteTeamDiscussion?: MutationToDeleteTeamDiscussionResolver<TParent>;
  deleteTeamDiscussionComment?: MutationToDeleteTeamDiscussionCommentResolver<TParent>;
  dismissPullRequestReview?: MutationToDismissPullRequestReviewResolver<TParent>;
  followUser?: MutationToFollowUserResolver<TParent>;
  inviteEnterpriseAdmin?: MutationToInviteEnterpriseAdminResolver<TParent>;
  linkRepositoryToProject?: MutationToLinkRepositoryToProjectResolver<TParent>;
  lockLockable?: MutationToLockLockableResolver<TParent>;
  markPullRequestReadyForReview?: MutationToMarkPullRequestReadyForReviewResolver<TParent>;
  mergeBranch?: MutationToMergeBranchResolver<TParent>;
  mergePullRequest?: MutationToMergePullRequestResolver<TParent>;
  minimizeComment?: MutationToMinimizeCommentResolver<TParent>;
  moveProjectCard?: MutationToMoveProjectCardResolver<TParent>;
  moveProjectColumn?: MutationToMoveProjectColumnResolver<TParent>;
  regenerateEnterpriseIdentityProviderRecoveryCodes?: MutationToRegenerateEnterpriseIdentityProviderRecoveryCodesResolver<TParent>;
  removeAssigneesFromAssignable?: MutationToRemoveAssigneesFromAssignableResolver<TParent>;
  removeEnterpriseAdmin?: MutationToRemoveEnterpriseAdminResolver<TParent>;
  removeEnterpriseIdentityProvider?: MutationToRemoveEnterpriseIdentityProviderResolver<TParent>;
  removeEnterpriseOrganization?: MutationToRemoveEnterpriseOrganizationResolver<TParent>;
  removeLabelsFromLabelable?: MutationToRemoveLabelsFromLabelableResolver<TParent>;
  removeOutsideCollaborator?: MutationToRemoveOutsideCollaboratorResolver<TParent>;
  removeReaction?: MutationToRemoveReactionResolver<TParent>;
  removeStar?: MutationToRemoveStarResolver<TParent>;
  reopenIssue?: MutationToReopenIssueResolver<TParent>;
  reopenPullRequest?: MutationToReopenPullRequestResolver<TParent>;
  requestReviews?: MutationToRequestReviewsResolver<TParent>;
  resolveReviewThread?: MutationToResolveReviewThreadResolver<TParent>;
  setEnterpriseIdentityProvider?: MutationToSetEnterpriseIdentityProviderResolver<TParent>;
  submitPullRequestReview?: MutationToSubmitPullRequestReviewResolver<TParent>;
  transferIssue?: MutationToTransferIssueResolver<TParent>;
  unarchiveRepository?: MutationToUnarchiveRepositoryResolver<TParent>;
  unfollowUser?: MutationToUnfollowUserResolver<TParent>;
  unlinkRepositoryFromProject?: MutationToUnlinkRepositoryFromProjectResolver<TParent>;
  unlockLockable?: MutationToUnlockLockableResolver<TParent>;
  unmarkIssueAsDuplicate?: MutationToUnmarkIssueAsDuplicateResolver<TParent>;
  unminimizeComment?: MutationToUnminimizeCommentResolver<TParent>;
  unresolveReviewThread?: MutationToUnresolveReviewThreadResolver<TParent>;
  updateBranchProtectionRule?: MutationToUpdateBranchProtectionRuleResolver<TParent>;
  updateEnterpriseActionExecutionCapabilitySetting?: MutationToUpdateEnterpriseActionExecutionCapabilitySettingResolver<TParent>;
  updateEnterpriseAdministratorRole?: MutationToUpdateEnterpriseAdministratorRoleResolver<TParent>;
  updateEnterpriseAllowPrivateRepositoryForkingSetting?: MutationToUpdateEnterpriseAllowPrivateRepositoryForkingSettingResolver<TParent>;
  updateEnterpriseDefaultRepositoryPermissionSetting?: MutationToUpdateEnterpriseDefaultRepositoryPermissionSettingResolver<TParent>;
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: MutationToUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingResolver<TParent>;
  updateEnterpriseMembersCanCreateRepositoriesSetting?: MutationToUpdateEnterpriseMembersCanCreateRepositoriesSettingResolver<TParent>;
  updateEnterpriseMembersCanDeleteIssuesSetting?: MutationToUpdateEnterpriseMembersCanDeleteIssuesSettingResolver<TParent>;
  updateEnterpriseMembersCanDeleteRepositoriesSetting?: MutationToUpdateEnterpriseMembersCanDeleteRepositoriesSettingResolver<TParent>;
  updateEnterpriseMembersCanInviteCollaboratorsSetting?: MutationToUpdateEnterpriseMembersCanInviteCollaboratorsSettingResolver<TParent>;
  updateEnterpriseMembersCanMakePurchasesSetting?: MutationToUpdateEnterpriseMembersCanMakePurchasesSettingResolver<TParent>;
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: MutationToUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingResolver<TParent>;
  updateEnterpriseMembersCanViewDependencyInsightsSetting?: MutationToUpdateEnterpriseMembersCanViewDependencyInsightsSettingResolver<TParent>;
  updateEnterpriseOrganizationProjectsSetting?: MutationToUpdateEnterpriseOrganizationProjectsSettingResolver<TParent>;
  updateEnterpriseProfile?: MutationToUpdateEnterpriseProfileResolver<TParent>;
  updateEnterpriseRepositoryProjectsSetting?: MutationToUpdateEnterpriseRepositoryProjectsSettingResolver<TParent>;
  updateEnterpriseTeamDiscussionsSetting?: MutationToUpdateEnterpriseTeamDiscussionsSettingResolver<TParent>;
  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: MutationToUpdateEnterpriseTwoFactorAuthenticationRequiredSettingResolver<TParent>;
  updateIpAllowListEnabledSetting?: MutationToUpdateIpAllowListEnabledSettingResolver<TParent>;
  updateIpAllowListEntry?: MutationToUpdateIpAllowListEntryResolver<TParent>;
  updateIssue?: MutationToUpdateIssueResolver<TParent>;
  updateIssueComment?: MutationToUpdateIssueCommentResolver<TParent>;
  updateProject?: MutationToUpdateProjectResolver<TParent>;
  updateProjectCard?: MutationToUpdateProjectCardResolver<TParent>;
  updateProjectColumn?: MutationToUpdateProjectColumnResolver<TParent>;
  updatePullRequest?: MutationToUpdatePullRequestResolver<TParent>;
  updatePullRequestReview?: MutationToUpdatePullRequestReviewResolver<TParent>;
  updatePullRequestReviewComment?: MutationToUpdatePullRequestReviewCommentResolver<TParent>;
  updateRef?: MutationToUpdateRefResolver<TParent>;
  updateRepository?: MutationToUpdateRepositoryResolver<TParent>;
  updateSubscription?: MutationToUpdateSubscriptionResolver<TParent>;
  updateTeamDiscussion?: MutationToUpdateTeamDiscussionResolver<TParent>;
  updateTeamDiscussionComment?: MutationToUpdateTeamDiscussionCommentResolver<TParent>;
  updateTopics?: MutationToUpdateTopicsResolver<TParent>;
}

export interface MutationToAcceptEnterpriseAdministratorInvitationArgs {
  input: GQLAcceptEnterpriseAdministratorInvitationInput;
}
export interface MutationToAcceptEnterpriseAdministratorInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptEnterpriseAdministratorInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAcceptTopicSuggestionArgs {
  input: GQLAcceptTopicSuggestionInput;
}
export interface MutationToAcceptTopicSuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptTopicSuggestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddAssigneesToAssignableArgs {
  input: GQLAddAssigneesToAssignableInput;
}
export interface MutationToAddAssigneesToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddAssigneesToAssignableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddCommentArgs {
  input: GQLAddCommentInput;
}
export interface MutationToAddCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddLabelsToLabelableArgs {
  input: GQLAddLabelsToLabelableInput;
}
export interface MutationToAddLabelsToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddLabelsToLabelableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProjectCardArgs {
  input: GQLAddProjectCardInput;
}
export interface MutationToAddProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProjectColumnArgs {
  input: GQLAddProjectColumnInput;
}
export interface MutationToAddProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewArgs {
  input: GQLAddPullRequestReviewInput;
}
export interface MutationToAddPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewCommentArgs {
  input: GQLAddPullRequestReviewCommentInput;
}
export interface MutationToAddPullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewThreadArgs {
  input: GQLAddPullRequestReviewThreadInput;
}
export interface MutationToAddPullRequestReviewThreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewThreadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddReactionArgs {
  input: GQLAddReactionInput;
}
export interface MutationToAddReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddReactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddStarArgs {
  input: GQLAddStarInput;
}
export interface MutationToAddStarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddStarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToArchiveRepositoryArgs {
  input: GQLArchiveRepositoryInput;
}
export interface MutationToArchiveRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToArchiveRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCancelEnterpriseAdminInvitationArgs {
  input: GQLCancelEnterpriseAdminInvitationInput;
}
export interface MutationToCancelEnterpriseAdminInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCancelEnterpriseAdminInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToChangeUserStatusArgs {
  input: GQLChangeUserStatusInput;
}
export interface MutationToChangeUserStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToChangeUserStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToClearLabelsFromLabelableArgs {
  input: GQLClearLabelsFromLabelableInput;
}
export interface MutationToClearLabelsFromLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToClearLabelsFromLabelableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCloneProjectArgs {
  input: GQLCloneProjectInput;
}
export interface MutationToCloneProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCloneProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCloneTemplateRepositoryArgs {
  input: GQLCloneTemplateRepositoryInput;
}
export interface MutationToCloneTemplateRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCloneTemplateRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCloseIssueArgs {
  input: GQLCloseIssueInput;
}
export interface MutationToCloseIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCloseIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToClosePullRequestArgs {
  input: GQLClosePullRequestInput;
}
export interface MutationToClosePullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToClosePullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToConvertProjectCardNoteToIssueArgs {
  input: GQLConvertProjectCardNoteToIssueInput;
}
export interface MutationToConvertProjectCardNoteToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToConvertProjectCardNoteToIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateBranchProtectionRuleArgs {
  input: GQLCreateBranchProtectionRuleInput;
}
export interface MutationToCreateBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateEnterpriseOrganizationArgs {
  input: GQLCreateEnterpriseOrganizationInput;
}
export interface MutationToCreateEnterpriseOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateEnterpriseOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateIpAllowListEntryArgs {
  input: GQLCreateIpAllowListEntryInput;
}
export interface MutationToCreateIpAllowListEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateIpAllowListEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateIssueArgs {
  input: GQLCreateIssueInput;
}
export interface MutationToCreateIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateProjectArgs {
  input: GQLCreateProjectInput;
}
export interface MutationToCreateProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreatePullRequestArgs {
  input: GQLCreatePullRequestInput;
}
export interface MutationToCreatePullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateRefArgs {
  input: GQLCreateRefInput;
}
export interface MutationToCreateRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateRefArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateRepositoryArgs {
  input: GQLCreateRepositoryInput;
}
export interface MutationToCreateRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTeamDiscussionArgs {
  input: GQLCreateTeamDiscussionInput;
}
export interface MutationToCreateTeamDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTeamDiscussionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTeamDiscussionCommentArgs {
  input: GQLCreateTeamDiscussionCommentInput;
}
export interface MutationToCreateTeamDiscussionCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTeamDiscussionCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeclineTopicSuggestionArgs {
  input: GQLDeclineTopicSuggestionInput;
}
export interface MutationToDeclineTopicSuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeclineTopicSuggestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteBranchProtectionRuleArgs {
  input: GQLDeleteBranchProtectionRuleInput;
}
export interface MutationToDeleteBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteDeploymentArgs {
  input: GQLDeleteDeploymentInput;
}
export interface MutationToDeleteDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteDeploymentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteIpAllowListEntryArgs {
  input: GQLDeleteIpAllowListEntryInput;
}
export interface MutationToDeleteIpAllowListEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteIpAllowListEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteIssueArgs {
  input: GQLDeleteIssueInput;
}
export interface MutationToDeleteIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteIssueCommentArgs {
  input: GQLDeleteIssueCommentInput;
}
export interface MutationToDeleteIssueCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteIssueCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectArgs {
  input: GQLDeleteProjectInput;
}
export interface MutationToDeleteProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectCardArgs {
  input: GQLDeleteProjectCardInput;
}
export interface MutationToDeleteProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectColumnArgs {
  input: GQLDeleteProjectColumnInput;
}
export interface MutationToDeleteProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePullRequestReviewArgs {
  input: GQLDeletePullRequestReviewInput;
}
export interface MutationToDeletePullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePullRequestReviewCommentArgs {
  input: GQLDeletePullRequestReviewCommentInput;
}
export interface MutationToDeletePullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteRefArgs {
  input: GQLDeleteRefInput;
}
export interface MutationToDeleteRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteRefArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTeamDiscussionArgs {
  input: GQLDeleteTeamDiscussionInput;
}
export interface MutationToDeleteTeamDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTeamDiscussionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTeamDiscussionCommentArgs {
  input: GQLDeleteTeamDiscussionCommentInput;
}
export interface MutationToDeleteTeamDiscussionCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTeamDiscussionCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDismissPullRequestReviewArgs {
  input: GQLDismissPullRequestReviewInput;
}
export interface MutationToDismissPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDismissPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFollowUserArgs {
  input: GQLFollowUserInput;
}
export interface MutationToFollowUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFollowUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToInviteEnterpriseAdminArgs {
  input: GQLInviteEnterpriseAdminInput;
}
export interface MutationToInviteEnterpriseAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToInviteEnterpriseAdminArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLinkRepositoryToProjectArgs {
  input: GQLLinkRepositoryToProjectInput;
}
export interface MutationToLinkRepositoryToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLinkRepositoryToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLockLockableArgs {
  input: GQLLockLockableInput;
}
export interface MutationToLockLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLockLockableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMarkPullRequestReadyForReviewArgs {
  input: GQLMarkPullRequestReadyForReviewInput;
}
export interface MutationToMarkPullRequestReadyForReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMarkPullRequestReadyForReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMergeBranchArgs {
  input: GQLMergeBranchInput;
}
export interface MutationToMergeBranchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMergeBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMergePullRequestArgs {
  input: GQLMergePullRequestInput;
}
export interface MutationToMergePullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMergePullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMinimizeCommentArgs {
  input: GQLMinimizeCommentInput;
}
export interface MutationToMinimizeCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMinimizeCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMoveProjectCardArgs {
  input: GQLMoveProjectCardInput;
}
export interface MutationToMoveProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMoveProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMoveProjectColumnArgs {
  input: GQLMoveProjectColumnInput;
}
export interface MutationToMoveProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMoveProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRegenerateEnterpriseIdentityProviderRecoveryCodesArgs {
  input: GQLRegenerateEnterpriseIdentityProviderRecoveryCodesInput;
}
export interface MutationToRegenerateEnterpriseIdentityProviderRecoveryCodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRegenerateEnterpriseIdentityProviderRecoveryCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveAssigneesFromAssignableArgs {
  input: GQLRemoveAssigneesFromAssignableInput;
}
export interface MutationToRemoveAssigneesFromAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveAssigneesFromAssignableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveEnterpriseAdminArgs {
  input: GQLRemoveEnterpriseAdminInput;
}
export interface MutationToRemoveEnterpriseAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveEnterpriseAdminArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveEnterpriseIdentityProviderArgs {
  input: GQLRemoveEnterpriseIdentityProviderInput;
}
export interface MutationToRemoveEnterpriseIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveEnterpriseIdentityProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveEnterpriseOrganizationArgs {
  input: GQLRemoveEnterpriseOrganizationInput;
}
export interface MutationToRemoveEnterpriseOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveEnterpriseOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveLabelsFromLabelableArgs {
  input: GQLRemoveLabelsFromLabelableInput;
}
export interface MutationToRemoveLabelsFromLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveLabelsFromLabelableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveOutsideCollaboratorArgs {
  input: GQLRemoveOutsideCollaboratorInput;
}
export interface MutationToRemoveOutsideCollaboratorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveOutsideCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveReactionArgs {
  input: GQLRemoveReactionInput;
}
export interface MutationToRemoveReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveReactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveStarArgs {
  input: GQLRemoveStarInput;
}
export interface MutationToRemoveStarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveStarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToReopenIssueArgs {
  input: GQLReopenIssueInput;
}
export interface MutationToReopenIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToReopenIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToReopenPullRequestArgs {
  input: GQLReopenPullRequestInput;
}
export interface MutationToReopenPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToReopenPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestReviewsArgs {
  input: GQLRequestReviewsInput;
}
export interface MutationToRequestReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToResolveReviewThreadArgs {
  input: GQLResolveReviewThreadInput;
}
export interface MutationToResolveReviewThreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToResolveReviewThreadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetEnterpriseIdentityProviderArgs {
  input: GQLSetEnterpriseIdentityProviderInput;
}
export interface MutationToSetEnterpriseIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetEnterpriseIdentityProviderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSubmitPullRequestReviewArgs {
  input: GQLSubmitPullRequestReviewInput;
}
export interface MutationToSubmitPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSubmitPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTransferIssueArgs {
  input: GQLTransferIssueInput;
}
export interface MutationToTransferIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTransferIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnarchiveRepositoryArgs {
  input: GQLUnarchiveRepositoryInput;
}
export interface MutationToUnarchiveRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnarchiveRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnfollowUserArgs {
  input: GQLUnfollowUserInput;
}
export interface MutationToUnfollowUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnfollowUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnlinkRepositoryFromProjectArgs {
  input: GQLUnlinkRepositoryFromProjectInput;
}
export interface MutationToUnlinkRepositoryFromProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnlinkRepositoryFromProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnlockLockableArgs {
  input: GQLUnlockLockableInput;
}
export interface MutationToUnlockLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnlockLockableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnmarkIssueAsDuplicateArgs {
  input: GQLUnmarkIssueAsDuplicateInput;
}
export interface MutationToUnmarkIssueAsDuplicateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnmarkIssueAsDuplicateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnminimizeCommentArgs {
  input: GQLUnminimizeCommentInput;
}
export interface MutationToUnminimizeCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnminimizeCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnresolveReviewThreadArgs {
  input: GQLUnresolveReviewThreadInput;
}
export interface MutationToUnresolveReviewThreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnresolveReviewThreadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateBranchProtectionRuleArgs {
  input: GQLUpdateBranchProtectionRuleInput;
}
export interface MutationToUpdateBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseActionExecutionCapabilitySettingArgs {
  input: GQLUpdateEnterpriseActionExecutionCapabilitySettingInput;
}
export interface MutationToUpdateEnterpriseActionExecutionCapabilitySettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseActionExecutionCapabilitySettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseAdministratorRoleArgs {
  input: GQLUpdateEnterpriseAdministratorRoleInput;
}
export interface MutationToUpdateEnterpriseAdministratorRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseAdministratorRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs {
  input: GQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
}
export interface MutationToUpdateEnterpriseAllowPrivateRepositoryForkingSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseDefaultRepositoryPermissionSettingArgs {
  input: GQLUpdateEnterpriseDefaultRepositoryPermissionSettingInput;
}
export interface MutationToUpdateEnterpriseDefaultRepositoryPermissionSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseDefaultRepositoryPermissionSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs {
  input: GQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs {
  input: GQLUpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanCreateRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanDeleteIssuesSettingArgs {
  input: GQLUpdateEnterpriseMembersCanDeleteIssuesSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanDeleteIssuesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanDeleteIssuesSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs {
  input: GQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanDeleteRepositoriesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs {
  input: GQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanInviteCollaboratorsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanMakePurchasesSettingArgs {
  input: GQLUpdateEnterpriseMembersCanMakePurchasesSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanMakePurchasesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanMakePurchasesSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs {
  input: GQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs {
  input: GQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
}
export interface MutationToUpdateEnterpriseMembersCanViewDependencyInsightsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseOrganizationProjectsSettingArgs {
  input: GQLUpdateEnterpriseOrganizationProjectsSettingInput;
}
export interface MutationToUpdateEnterpriseOrganizationProjectsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseOrganizationProjectsSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseProfileArgs {
  input: GQLUpdateEnterpriseProfileInput;
}
export interface MutationToUpdateEnterpriseProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseRepositoryProjectsSettingArgs {
  input: GQLUpdateEnterpriseRepositoryProjectsSettingInput;
}
export interface MutationToUpdateEnterpriseRepositoryProjectsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseRepositoryProjectsSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseTeamDiscussionsSettingArgs {
  input: GQLUpdateEnterpriseTeamDiscussionsSettingInput;
}
export interface MutationToUpdateEnterpriseTeamDiscussionsSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseTeamDiscussionsSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs {
  input: GQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
}
export interface MutationToUpdateEnterpriseTwoFactorAuthenticationRequiredSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateIpAllowListEnabledSettingArgs {
  input: GQLUpdateIpAllowListEnabledSettingInput;
}
export interface MutationToUpdateIpAllowListEnabledSettingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateIpAllowListEnabledSettingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateIpAllowListEntryArgs {
  input: GQLUpdateIpAllowListEntryInput;
}
export interface MutationToUpdateIpAllowListEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateIpAllowListEntryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateIssueArgs {
  input: GQLUpdateIssueInput;
}
export interface MutationToUpdateIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateIssueCommentArgs {
  input: GQLUpdateIssueCommentInput;
}
export interface MutationToUpdateIssueCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateIssueCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectArgs {
  input: GQLUpdateProjectInput;
}
export interface MutationToUpdateProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectCardArgs {
  input: GQLUpdateProjectCardInput;
}
export interface MutationToUpdateProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectColumnArgs {
  input: GQLUpdateProjectColumnInput;
}
export interface MutationToUpdateProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestArgs {
  input: GQLUpdatePullRequestInput;
}
export interface MutationToUpdatePullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestReviewArgs {
  input: GQLUpdatePullRequestReviewInput;
}
export interface MutationToUpdatePullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestReviewCommentArgs {
  input: GQLUpdatePullRequestReviewCommentInput;
}
export interface MutationToUpdatePullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateRefArgs {
  input: GQLUpdateRefInput;
}
export interface MutationToUpdateRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateRefArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateRepositoryArgs {
  input: GQLUpdateRepositoryInput;
}
export interface MutationToUpdateRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateSubscriptionArgs {
  input: GQLUpdateSubscriptionInput;
}
export interface MutationToUpdateSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateSubscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTeamDiscussionArgs {
  input: GQLUpdateTeamDiscussionInput;
}
export interface MutationToUpdateTeamDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTeamDiscussionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTeamDiscussionCommentArgs {
  input: GQLUpdateTeamDiscussionCommentInput;
}
export interface MutationToUpdateTeamDiscussionCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTeamDiscussionCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTopicsArgs {
  input: GQLUpdateTopicsInput;
}
export interface MutationToUpdateTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAcceptEnterpriseAdministratorInvitationPayloadTypeResolver<TParent = any> {
  clientMutationId?: AcceptEnterpriseAdministratorInvitationPayloadToClientMutationIdResolver<TParent>;
  invitation?: AcceptEnterpriseAdministratorInvitationPayloadToInvitationResolver<TParent>;
  message?: AcceptEnterpriseAdministratorInvitationPayloadToMessageResolver<TParent>;
}

export interface AcceptEnterpriseAdministratorInvitationPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AcceptEnterpriseAdministratorInvitationPayloadToInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AcceptEnterpriseAdministratorInvitationPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAcceptTopicSuggestionPayloadTypeResolver<TParent = any> {
  clientMutationId?: AcceptTopicSuggestionPayloadToClientMutationIdResolver<TParent>;
  topic?: AcceptTopicSuggestionPayloadToTopicResolver<TParent>;
}

export interface AcceptTopicSuggestionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AcceptTopicSuggestionPayloadToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddAssigneesToAssignablePayloadTypeResolver<TParent = any> {
  assignable?: AddAssigneesToAssignablePayloadToAssignableResolver<TParent>;
  clientMutationId?: AddAssigneesToAssignablePayloadToClientMutationIdResolver<TParent>;
}

export interface AddAssigneesToAssignablePayloadToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddAssigneesToAssignablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddCommentPayloadToClientMutationIdResolver<TParent>;
  commentEdge?: AddCommentPayloadToCommentEdgeResolver<TParent>;
  subject?: AddCommentPayloadToSubjectResolver<TParent>;
  timelineEdge?: AddCommentPayloadToTimelineEdgeResolver<TParent>;
}

export interface AddCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToCommentEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToTimelineEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddLabelsToLabelablePayloadTypeResolver<TParent = any> {
  clientMutationId?: AddLabelsToLabelablePayloadToClientMutationIdResolver<TParent>;
  labelable?: AddLabelsToLabelablePayloadToLabelableResolver<TParent>;
}

export interface AddLabelsToLabelablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddLabelsToLabelablePayloadToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddProjectCardPayloadTypeResolver<TParent = any> {
  cardEdge?: AddProjectCardPayloadToCardEdgeResolver<TParent>;
  clientMutationId?: AddProjectCardPayloadToClientMutationIdResolver<TParent>;
  projectColumn?: AddProjectCardPayloadToProjectColumnResolver<TParent>;
}

export interface AddProjectCardPayloadToCardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadToProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddProjectColumnPayloadToClientMutationIdResolver<TParent>;
  columnEdge?: AddProjectColumnPayloadToColumnEdgeResolver<TParent>;
  project?: AddProjectColumnPayloadToProjectResolver<TParent>;
}

export interface AddProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadToColumnEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: AddPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
  reviewEdge?: AddPullRequestReviewPayloadToReviewEdgeResolver<TParent>;
}

export interface AddPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadToReviewEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddPullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  comment?: AddPullRequestReviewCommentPayloadToCommentResolver<TParent>;
  commentEdge?: AddPullRequestReviewCommentPayloadToCommentEdgeResolver<TParent>;
}

export interface AddPullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadToCommentEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddPullRequestReviewThreadPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewThreadPayloadToClientMutationIdResolver<TParent>;
  thread?: AddPullRequestReviewThreadPayloadToThreadResolver<TParent>;
}

export interface AddPullRequestReviewThreadPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewThreadPayloadToThreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddReactionPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddReactionPayloadToClientMutationIdResolver<TParent>;
  reaction?: AddReactionPayloadToReactionResolver<TParent>;
  subject?: AddReactionPayloadToSubjectResolver<TParent>;
}

export interface AddReactionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadToReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddStarPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddStarPayloadToClientMutationIdResolver<TParent>;
  starrable?: AddStarPayloadToStarrableResolver<TParent>;
}

export interface AddStarPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddStarPayloadToStarrableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArchiveRepositoryPayloadTypeResolver<TParent = any> {
  clientMutationId?: ArchiveRepositoryPayloadToClientMutationIdResolver<TParent>;
  repository?: ArchiveRepositoryPayloadToRepositoryResolver<TParent>;
}

export interface ArchiveRepositoryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArchiveRepositoryPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCancelEnterpriseAdminInvitationPayloadTypeResolver<TParent = any> {
  clientMutationId?: CancelEnterpriseAdminInvitationPayloadToClientMutationIdResolver<TParent>;
  invitation?: CancelEnterpriseAdminInvitationPayloadToInvitationResolver<TParent>;
  message?: CancelEnterpriseAdminInvitationPayloadToMessageResolver<TParent>;
}

export interface CancelEnterpriseAdminInvitationPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CancelEnterpriseAdminInvitationPayloadToInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CancelEnterpriseAdminInvitationPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLChangeUserStatusPayloadTypeResolver<TParent = any> {
  clientMutationId?: ChangeUserStatusPayloadToClientMutationIdResolver<TParent>;
  status?: ChangeUserStatusPayloadToStatusResolver<TParent>;
}

export interface ChangeUserStatusPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChangeUserStatusPayloadToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClearLabelsFromLabelablePayloadTypeResolver<TParent = any> {
  clientMutationId?: ClearLabelsFromLabelablePayloadToClientMutationIdResolver<TParent>;
  labelable?: ClearLabelsFromLabelablePayloadToLabelableResolver<TParent>;
}

export interface ClearLabelsFromLabelablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClearLabelsFromLabelablePayloadToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCloneProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: CloneProjectPayloadToClientMutationIdResolver<TParent>;
  jobStatusId?: CloneProjectPayloadToJobStatusIdResolver<TParent>;
  project?: CloneProjectPayloadToProjectResolver<TParent>;
}

export interface CloneProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CloneProjectPayloadToJobStatusIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CloneProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCloneTemplateRepositoryPayloadTypeResolver<TParent = any> {
  clientMutationId?: CloneTemplateRepositoryPayloadToClientMutationIdResolver<TParent>;
  repository?: CloneTemplateRepositoryPayloadToRepositoryResolver<TParent>;
}

export interface CloneTemplateRepositoryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CloneTemplateRepositoryPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCloseIssuePayloadTypeResolver<TParent = any> {
  clientMutationId?: CloseIssuePayloadToClientMutationIdResolver<TParent>;
  issue?: CloseIssuePayloadToIssueResolver<TParent>;
}

export interface CloseIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CloseIssuePayloadToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClosePullRequestPayloadTypeResolver<TParent = any> {
  clientMutationId?: ClosePullRequestPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: ClosePullRequestPayloadToPullRequestResolver<TParent>;
}

export interface ClosePullRequestPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosePullRequestPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConvertProjectCardNoteToIssuePayloadTypeResolver<TParent = any> {
  clientMutationId?: ConvertProjectCardNoteToIssuePayloadToClientMutationIdResolver<TParent>;
  projectCard?: ConvertProjectCardNoteToIssuePayloadToProjectCardResolver<TParent>;
}

export interface ConvertProjectCardNoteToIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertProjectCardNoteToIssuePayloadToProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateBranchProtectionRulePayloadTypeResolver<TParent = any> {
  branchProtectionRule?: CreateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent>;
  clientMutationId?: CreateBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface CreateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateEnterpriseOrganizationPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateEnterpriseOrganizationPayloadToClientMutationIdResolver<TParent>;
  enterprise?: CreateEnterpriseOrganizationPayloadToEnterpriseResolver<TParent>;
  organization?: CreateEnterpriseOrganizationPayloadToOrganizationResolver<TParent>;
}

export interface CreateEnterpriseOrganizationPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateEnterpriseOrganizationPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateEnterpriseOrganizationPayloadToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateIpAllowListEntryPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateIpAllowListEntryPayloadToClientMutationIdResolver<TParent>;
  ipAllowListEntry?: CreateIpAllowListEntryPayloadToIpAllowListEntryResolver<TParent>;
}

export interface CreateIpAllowListEntryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateIpAllowListEntryPayloadToIpAllowListEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateIssuePayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateIssuePayloadToClientMutationIdResolver<TParent>;
  issue?: CreateIssuePayloadToIssueResolver<TParent>;
}

export interface CreateIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateIssuePayloadToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateProjectPayloadToClientMutationIdResolver<TParent>;
  project?: CreateProjectPayloadToProjectResolver<TParent>;
}

export interface CreateProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatePullRequestPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreatePullRequestPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: CreatePullRequestPayloadToPullRequestResolver<TParent>;
}

export interface CreatePullRequestPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatePullRequestPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateRefPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateRefPayloadToClientMutationIdResolver<TParent>;
  ref?: CreateRefPayloadToRefResolver<TParent>;
}

export interface CreateRefPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateRefPayloadToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateRepositoryPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateRepositoryPayloadToClientMutationIdResolver<TParent>;
  repository?: CreateRepositoryPayloadToRepositoryResolver<TParent>;
}

export interface CreateRepositoryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateRepositoryPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateTeamDiscussionPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateTeamDiscussionPayloadToClientMutationIdResolver<TParent>;
  teamDiscussion?: CreateTeamDiscussionPayloadToTeamDiscussionResolver<TParent>;
}

export interface CreateTeamDiscussionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateTeamDiscussionPayloadToTeamDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateTeamDiscussionCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateTeamDiscussionCommentPayloadToClientMutationIdResolver<TParent>;
  teamDiscussionComment?: CreateTeamDiscussionCommentPayloadToTeamDiscussionCommentResolver<TParent>;
}

export interface CreateTeamDiscussionCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateTeamDiscussionCommentPayloadToTeamDiscussionCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeclineTopicSuggestionPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeclineTopicSuggestionPayloadToClientMutationIdResolver<TParent>;
  topic?: DeclineTopicSuggestionPayloadToTopicResolver<TParent>;
}

export interface DeclineTopicSuggestionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeclineTopicSuggestionPayloadToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteBranchProtectionRulePayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteDeploymentPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteDeploymentPayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteDeploymentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteIpAllowListEntryPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteIpAllowListEntryPayloadToClientMutationIdResolver<TParent>;
  ipAllowListEntry?: DeleteIpAllowListEntryPayloadToIpAllowListEntryResolver<TParent>;
}

export interface DeleteIpAllowListEntryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteIpAllowListEntryPayloadToIpAllowListEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteIssuePayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteIssuePayloadToClientMutationIdResolver<TParent>;
  repository?: DeleteIssuePayloadToRepositoryResolver<TParent>;
}

export interface DeleteIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteIssuePayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteIssueCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteIssueCommentPayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteIssueCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectPayloadToClientMutationIdResolver<TParent>;
  owner?: DeleteProjectPayloadToOwnerResolver<TParent>;
}

export interface DeleteProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectPayloadToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteProjectCardPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectCardPayloadToClientMutationIdResolver<TParent>;
  column?: DeleteProjectCardPayloadToColumnResolver<TParent>;
  deletedCardId?: DeleteProjectCardPayloadToDeletedCardIdResolver<TParent>;
}

export interface DeleteProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadToColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadToDeletedCardIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectColumnPayloadToClientMutationIdResolver<TParent>;
  deletedColumnId?: DeleteProjectColumnPayloadToDeletedColumnIdResolver<TParent>;
  project?: DeleteProjectColumnPayloadToProjectResolver<TParent>;
}

export interface DeleteProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadToDeletedColumnIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeletePullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeletePullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DeletePullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface DeletePullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletePullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeletePullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeletePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DeletePullRequestReviewCommentPayloadToPullRequestReviewResolver<TParent>;
}

export interface DeletePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletePullRequestReviewCommentPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteRefPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteRefPayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteRefPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteTeamDiscussionPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteTeamDiscussionPayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteTeamDiscussionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteTeamDiscussionCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteTeamDiscussionCommentPayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteTeamDiscussionCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDismissPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DismissPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DismissPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface DismissPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DismissPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFollowUserPayloadTypeResolver<TParent = any> {
  clientMutationId?: FollowUserPayloadToClientMutationIdResolver<TParent>;
  user?: FollowUserPayloadToUserResolver<TParent>;
}

export interface FollowUserPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowUserPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInviteEnterpriseAdminPayloadTypeResolver<TParent = any> {
  clientMutationId?: InviteEnterpriseAdminPayloadToClientMutationIdResolver<TParent>;
  invitation?: InviteEnterpriseAdminPayloadToInvitationResolver<TParent>;
}

export interface InviteEnterpriseAdminPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InviteEnterpriseAdminPayloadToInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLinkRepositoryToProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: LinkRepositoryToProjectPayloadToClientMutationIdResolver<TParent>;
  project?: LinkRepositoryToProjectPayloadToProjectResolver<TParent>;
  repository?: LinkRepositoryToProjectPayloadToRepositoryResolver<TParent>;
}

export interface LinkRepositoryToProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkRepositoryToProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LinkRepositoryToProjectPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLockLockablePayloadTypeResolver<TParent = any> {
  actor?: LockLockablePayloadToActorResolver<TParent>;
  clientMutationId?: LockLockablePayloadToClientMutationIdResolver<TParent>;
  lockedRecord?: LockLockablePayloadToLockedRecordResolver<TParent>;
}

export interface LockLockablePayloadToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockLockablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockLockablePayloadToLockedRecordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMarkPullRequestReadyForReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: MarkPullRequestReadyForReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: MarkPullRequestReadyForReviewPayloadToPullRequestResolver<TParent>;
}

export interface MarkPullRequestReadyForReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarkPullRequestReadyForReviewPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMergeBranchPayloadTypeResolver<TParent = any> {
  clientMutationId?: MergeBranchPayloadToClientMutationIdResolver<TParent>;
  mergeCommit?: MergeBranchPayloadToMergeCommitResolver<TParent>;
}

export interface MergeBranchPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergeBranchPayloadToMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMergePullRequestPayloadTypeResolver<TParent = any> {
  actor?: MergePullRequestPayloadToActorResolver<TParent>;
  clientMutationId?: MergePullRequestPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: MergePullRequestPayloadToPullRequestResolver<TParent>;
}

export interface MergePullRequestPayloadToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergePullRequestPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergePullRequestPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMinimizeCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: MinimizeCommentPayloadToClientMutationIdResolver<TParent>;
  minimizedComment?: MinimizeCommentPayloadToMinimizedCommentResolver<TParent>;
}

export interface MinimizeCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MinimizeCommentPayloadToMinimizedCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMoveProjectCardPayloadTypeResolver<TParent = any> {
  cardEdge?: MoveProjectCardPayloadToCardEdgeResolver<TParent>;
  clientMutationId?: MoveProjectCardPayloadToClientMutationIdResolver<TParent>;
}

export interface MoveProjectCardPayloadToCardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMoveProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: MoveProjectColumnPayloadToClientMutationIdResolver<TParent>;
  columnEdge?: MoveProjectColumnPayloadToColumnEdgeResolver<TParent>;
}

export interface MoveProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectColumnPayloadToColumnEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRegenerateEnterpriseIdentityProviderRecoveryCodesPayloadTypeResolver<TParent = any> {
  clientMutationId?: RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadToClientMutationIdResolver<TParent>;
  identityProvider?: RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadToIdentityProviderResolver<TParent>;
}

export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadToIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveAssigneesFromAssignablePayloadTypeResolver<TParent = any> {
  assignable?: RemoveAssigneesFromAssignablePayloadToAssignableResolver<TParent>;
  clientMutationId?: RemoveAssigneesFromAssignablePayloadToClientMutationIdResolver<TParent>;
}

export interface RemoveAssigneesFromAssignablePayloadToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveAssigneesFromAssignablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveEnterpriseAdminPayloadTypeResolver<TParent = any> {
  admin?: RemoveEnterpriseAdminPayloadToAdminResolver<TParent>;
  clientMutationId?: RemoveEnterpriseAdminPayloadToClientMutationIdResolver<TParent>;
  enterprise?: RemoveEnterpriseAdminPayloadToEnterpriseResolver<TParent>;
  message?: RemoveEnterpriseAdminPayloadToMessageResolver<TParent>;
  viewer?: RemoveEnterpriseAdminPayloadToViewerResolver<TParent>;
}

export interface RemoveEnterpriseAdminPayloadToAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseAdminPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseAdminPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseAdminPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseAdminPayloadToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveEnterpriseIdentityProviderPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveEnterpriseIdentityProviderPayloadToClientMutationIdResolver<TParent>;
  identityProvider?: RemoveEnterpriseIdentityProviderPayloadToIdentityProviderResolver<TParent>;
}

export interface RemoveEnterpriseIdentityProviderPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseIdentityProviderPayloadToIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveEnterpriseOrganizationPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveEnterpriseOrganizationPayloadToClientMutationIdResolver<TParent>;
  enterprise?: RemoveEnterpriseOrganizationPayloadToEnterpriseResolver<TParent>;
  organization?: RemoveEnterpriseOrganizationPayloadToOrganizationResolver<TParent>;
  viewer?: RemoveEnterpriseOrganizationPayloadToViewerResolver<TParent>;
}

export interface RemoveEnterpriseOrganizationPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseOrganizationPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseOrganizationPayloadToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveEnterpriseOrganizationPayloadToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveLabelsFromLabelablePayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveLabelsFromLabelablePayloadToClientMutationIdResolver<TParent>;
  labelable?: RemoveLabelsFromLabelablePayloadToLabelableResolver<TParent>;
}

export interface RemoveLabelsFromLabelablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveLabelsFromLabelablePayloadToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveOutsideCollaboratorPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveOutsideCollaboratorPayloadToClientMutationIdResolver<TParent>;
  removedUser?: RemoveOutsideCollaboratorPayloadToRemovedUserResolver<TParent>;
}

export interface RemoveOutsideCollaboratorPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveOutsideCollaboratorPayloadToRemovedUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveReactionPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveReactionPayloadToClientMutationIdResolver<TParent>;
  reaction?: RemoveReactionPayloadToReactionResolver<TParent>;
  subject?: RemoveReactionPayloadToSubjectResolver<TParent>;
}

export interface RemoveReactionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadToReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveStarPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveStarPayloadToClientMutationIdResolver<TParent>;
  starrable?: RemoveStarPayloadToStarrableResolver<TParent>;
}

export interface RemoveStarPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveStarPayloadToStarrableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReopenIssuePayloadTypeResolver<TParent = any> {
  clientMutationId?: ReopenIssuePayloadToClientMutationIdResolver<TParent>;
  issue?: ReopenIssuePayloadToIssueResolver<TParent>;
}

export interface ReopenIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenIssuePayloadToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReopenPullRequestPayloadTypeResolver<TParent = any> {
  clientMutationId?: ReopenPullRequestPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: ReopenPullRequestPayloadToPullRequestResolver<TParent>;
}

export interface ReopenPullRequestPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenPullRequestPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRequestReviewsPayloadTypeResolver<TParent = any> {
  actor?: RequestReviewsPayloadToActorResolver<TParent>;
  clientMutationId?: RequestReviewsPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: RequestReviewsPayloadToPullRequestResolver<TParent>;
  requestedReviewersEdge?: RequestReviewsPayloadToRequestedReviewersEdgeResolver<TParent>;
}

export interface RequestReviewsPayloadToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToRequestedReviewersEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResolveReviewThreadPayloadTypeResolver<TParent = any> {
  clientMutationId?: ResolveReviewThreadPayloadToClientMutationIdResolver<TParent>;
  thread?: ResolveReviewThreadPayloadToThreadResolver<TParent>;
}

export interface ResolveReviewThreadPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResolveReviewThreadPayloadToThreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSetEnterpriseIdentityProviderPayloadTypeResolver<TParent = any> {
  clientMutationId?: SetEnterpriseIdentityProviderPayloadToClientMutationIdResolver<TParent>;
  identityProvider?: SetEnterpriseIdentityProviderPayloadToIdentityProviderResolver<TParent>;
}

export interface SetEnterpriseIdentityProviderPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SetEnterpriseIdentityProviderPayloadToIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubmitPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: SubmitPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: SubmitPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface SubmitPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmitPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTransferIssuePayloadTypeResolver<TParent = any> {
  clientMutationId?: TransferIssuePayloadToClientMutationIdResolver<TParent>;
  issue?: TransferIssuePayloadToIssueResolver<TParent>;
}

export interface TransferIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferIssuePayloadToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnarchiveRepositoryPayloadTypeResolver<TParent = any> {
  clientMutationId?: UnarchiveRepositoryPayloadToClientMutationIdResolver<TParent>;
  repository?: UnarchiveRepositoryPayloadToRepositoryResolver<TParent>;
}

export interface UnarchiveRepositoryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnarchiveRepositoryPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnfollowUserPayloadTypeResolver<TParent = any> {
  clientMutationId?: UnfollowUserPayloadToClientMutationIdResolver<TParent>;
  user?: UnfollowUserPayloadToUserResolver<TParent>;
}

export interface UnfollowUserPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnfollowUserPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlinkRepositoryFromProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: UnlinkRepositoryFromProjectPayloadToClientMutationIdResolver<TParent>;
  project?: UnlinkRepositoryFromProjectPayloadToProjectResolver<TParent>;
  repository?: UnlinkRepositoryFromProjectPayloadToRepositoryResolver<TParent>;
}

export interface UnlinkRepositoryFromProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlinkRepositoryFromProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlinkRepositoryFromProjectPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnlockLockablePayloadTypeResolver<TParent = any> {
  actor?: UnlockLockablePayloadToActorResolver<TParent>;
  clientMutationId?: UnlockLockablePayloadToClientMutationIdResolver<TParent>;
  unlockedRecord?: UnlockLockablePayloadToUnlockedRecordResolver<TParent>;
}

export interface UnlockLockablePayloadToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockLockablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockLockablePayloadToUnlockedRecordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnmarkIssueAsDuplicatePayloadTypeResolver<TParent = any> {
  clientMutationId?: UnmarkIssueAsDuplicatePayloadToClientMutationIdResolver<TParent>;
  duplicate?: UnmarkIssueAsDuplicatePayloadToDuplicateResolver<TParent>;
}

export interface UnmarkIssueAsDuplicatePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnmarkIssueAsDuplicatePayloadToDuplicateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnminimizeCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: UnminimizeCommentPayloadToClientMutationIdResolver<TParent>;
  unminimizedComment?: UnminimizeCommentPayloadToUnminimizedCommentResolver<TParent>;
}

export interface UnminimizeCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnminimizeCommentPayloadToUnminimizedCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnresolveReviewThreadPayloadTypeResolver<TParent = any> {
  clientMutationId?: UnresolveReviewThreadPayloadToClientMutationIdResolver<TParent>;
  thread?: UnresolveReviewThreadPayloadToThreadResolver<TParent>;
}

export interface UnresolveReviewThreadPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnresolveReviewThreadPayloadToThreadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateBranchProtectionRulePayloadTypeResolver<TParent = any> {
  branchProtectionRule?: UpdateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent>;
  clientMutationId?: UpdateBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface UpdateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseActionExecutionCapabilitySettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseActionExecutionCapabilitySettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseActionExecutionCapabilitySettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseActionExecutionCapabilitySettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseActionExecutionCapabilitySettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseActionExecutionCapabilitySettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseActionExecutionCapabilitySettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseAdministratorRolePayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseAdministratorRolePayloadToClientMutationIdResolver<TParent>;
  message?: UpdateEnterpriseAdministratorRolePayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseAdministratorRolePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseAdministratorRolePayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseDefaultRepositoryPermissionSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanDeleteIssuesSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanMakePurchasesSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseOrganizationProjectsSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseOrganizationProjectsSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseOrganizationProjectsSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseOrganizationProjectsSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseOrganizationProjectsSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseOrganizationProjectsSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseOrganizationProjectsSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseProfilePayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseProfilePayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseProfilePayloadToEnterpriseResolver<TParent>;
}

export interface UpdateEnterpriseProfilePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseProfilePayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseRepositoryProjectsSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseRepositoryProjectsSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseRepositoryProjectsSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseRepositoryProjectsSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseRepositoryProjectsSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseRepositoryProjectsSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseRepositoryProjectsSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseTeamDiscussionsSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseTeamDiscussionsSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseTeamDiscussionsSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseTeamDiscussionsSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseTeamDiscussionsSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseTeamDiscussionsSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseTeamDiscussionsSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadToClientMutationIdResolver<TParent>;
  enterprise?: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadToEnterpriseResolver<TParent>;
  message?: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadToMessageResolver<TParent>;
}

export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadToEnterpriseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateIpAllowListEnabledSettingPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateIpAllowListEnabledSettingPayloadToClientMutationIdResolver<TParent>;
  owner?: UpdateIpAllowListEnabledSettingPayloadToOwnerResolver<TParent>;
}

export interface UpdateIpAllowListEnabledSettingPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateIpAllowListEnabledSettingPayloadToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateIpAllowListEntryPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateIpAllowListEntryPayloadToClientMutationIdResolver<TParent>;
  ipAllowListEntry?: UpdateIpAllowListEntryPayloadToIpAllowListEntryResolver<TParent>;
}

export interface UpdateIpAllowListEntryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateIpAllowListEntryPayloadToIpAllowListEntryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateIssuePayloadTypeResolver<TParent = any> {
  actor?: UpdateIssuePayloadToActorResolver<TParent>;
  clientMutationId?: UpdateIssuePayloadToClientMutationIdResolver<TParent>;
  issue?: UpdateIssuePayloadToIssueResolver<TParent>;
}

export interface UpdateIssuePayloadToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateIssuePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateIssuePayloadToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateIssueCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateIssueCommentPayloadToClientMutationIdResolver<TParent>;
  issueComment?: UpdateIssueCommentPayloadToIssueCommentResolver<TParent>;
}

export interface UpdateIssueCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateIssueCommentPayloadToIssueCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectPayloadToClientMutationIdResolver<TParent>;
  project?: UpdateProjectPayloadToProjectResolver<TParent>;
}

export interface UpdateProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProjectCardPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectCardPayloadToClientMutationIdResolver<TParent>;
  projectCard?: UpdateProjectCardPayloadToProjectCardResolver<TParent>;
}

export interface UpdateProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectCardPayloadToProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectColumnPayloadToClientMutationIdResolver<TParent>;
  projectColumn?: UpdateProjectColumnPayloadToProjectColumnResolver<TParent>;
}

export interface UpdateProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectColumnPayloadToProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdatePullRequestPayloadTypeResolver<TParent = any> {
  actor?: UpdatePullRequestPayloadToActorResolver<TParent>;
  clientMutationId?: UpdatePullRequestPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: UpdatePullRequestPayloadToPullRequestResolver<TParent>;
}

export interface UpdatePullRequestPayloadToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdatePullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdatePullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: UpdatePullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface UpdatePullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdatePullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdatePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  pullRequestReviewComment?: UpdatePullRequestReviewCommentPayloadToPullRequestReviewCommentResolver<TParent>;
}

export interface UpdatePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewCommentPayloadToPullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateRefPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateRefPayloadToClientMutationIdResolver<TParent>;
  ref?: UpdateRefPayloadToRefResolver<TParent>;
}

export interface UpdateRefPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateRefPayloadToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateRepositoryPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateRepositoryPayloadToClientMutationIdResolver<TParent>;
  repository?: UpdateRepositoryPayloadToRepositoryResolver<TParent>;
}

export interface UpdateRepositoryPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateRepositoryPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateSubscriptionPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateSubscriptionPayloadToClientMutationIdResolver<TParent>;
  subscribable?: UpdateSubscriptionPayloadToSubscribableResolver<TParent>;
}

export interface UpdateSubscriptionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateSubscriptionPayloadToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateTeamDiscussionPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateTeamDiscussionPayloadToClientMutationIdResolver<TParent>;
  teamDiscussion?: UpdateTeamDiscussionPayloadToTeamDiscussionResolver<TParent>;
}

export interface UpdateTeamDiscussionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTeamDiscussionPayloadToTeamDiscussionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateTeamDiscussionCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateTeamDiscussionCommentPayloadToClientMutationIdResolver<TParent>;
  teamDiscussionComment?: UpdateTeamDiscussionCommentPayloadToTeamDiscussionCommentResolver<TParent>;
}

export interface UpdateTeamDiscussionCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTeamDiscussionCommentPayloadToTeamDiscussionCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateTopicsPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateTopicsPayloadToClientMutationIdResolver<TParent>;
  invalidTopicNames?: UpdateTopicsPayloadToInvalidTopicNamesResolver<TParent>;
  repository?: UpdateTopicsPayloadToRepositoryResolver<TParent>;
}

export interface UpdateTopicsPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadToInvalidTopicNamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlobTypeResolver<TParent = any> {
  abbreviatedOid?: BlobToAbbreviatedOidResolver<TParent>;
  byteSize?: BlobToByteSizeResolver<TParent>;
  commitResourcePath?: BlobToCommitResourcePathResolver<TParent>;
  commitUrl?: BlobToCommitUrlResolver<TParent>;
  id?: BlobToIdResolver<TParent>;
  isBinary?: BlobToIsBinaryResolver<TParent>;
  isTruncated?: BlobToIsTruncatedResolver<TParent>;
  oid?: BlobToOidResolver<TParent>;
  repository?: BlobToRepositoryResolver<TParent>;
  text?: BlobToTextResolver<TParent>;
}

export interface BlobToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToByteSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIsBinaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIsTruncatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGenericHovercardContextTypeResolver<TParent = any> {
  message?: GenericHovercardContextToMessageResolver<TParent>;
  octicon?: GenericHovercardContextToOcticonResolver<TParent>;
}

export interface GenericHovercardContextToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenericHovercardContextToOcticonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGpgSignatureTypeResolver<TParent = any> {
  email?: GpgSignatureToEmailResolver<TParent>;
  isValid?: GpgSignatureToIsValidResolver<TParent>;
  keyId?: GpgSignatureToKeyIdResolver<TParent>;
  payload?: GpgSignatureToPayloadResolver<TParent>;
  signature?: GpgSignatureToSignatureResolver<TParent>;
  signer?: GpgSignatureToSignerResolver<TParent>;
  state?: GpgSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: GpgSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface GpgSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToKeyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationTeamsHovercardContextTypeResolver<TParent = any> {
  message?: OrganizationTeamsHovercardContextToMessageResolver<TParent>;
  octicon?: OrganizationTeamsHovercardContextToOcticonResolver<TParent>;
  relevantTeams?: OrganizationTeamsHovercardContextToRelevantTeamsResolver<TParent>;
  teamsResourcePath?: OrganizationTeamsHovercardContextToTeamsResourcePathResolver<TParent>;
  teamsUrl?: OrganizationTeamsHovercardContextToTeamsUrlResolver<TParent>;
  totalTeamCount?: OrganizationTeamsHovercardContextToTotalTeamCountResolver<TParent>;
}

export interface OrganizationTeamsHovercardContextToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationTeamsHovercardContextToOcticonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationTeamsHovercardContextToRelevantTeamsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationTeamsHovercardContextToRelevantTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationTeamsHovercardContextToRelevantTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationTeamsHovercardContextToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationTeamsHovercardContextToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationTeamsHovercardContextToTotalTeamCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationsHovercardContextTypeResolver<TParent = any> {
  message?: OrganizationsHovercardContextToMessageResolver<TParent>;
  octicon?: OrganizationsHovercardContextToOcticonResolver<TParent>;
  relevantOrganizations?: OrganizationsHovercardContextToRelevantOrganizationsResolver<TParent>;
  totalOrganizationCount?: OrganizationsHovercardContextToTotalOrganizationCountResolver<TParent>;
}

export interface OrganizationsHovercardContextToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationsHovercardContextToOcticonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationsHovercardContextToRelevantOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationsHovercardContextToRelevantOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationsHovercardContextToRelevantOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationsHovercardContextToTotalOrganizationCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPackageTagTypeResolver<TParent = any> {
  id?: PackageTagToIdResolver<TParent>;
  name?: PackageTagToNameResolver<TParent>;
  version?: PackageTagToVersionResolver<TParent>;
}

export interface PackageTagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageTagToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PackageTagToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReviewStatusHovercardContextTypeResolver<TParent = any> {
  message?: ReviewStatusHovercardContextToMessageResolver<TParent>;
  octicon?: ReviewStatusHovercardContextToOcticonResolver<TParent>;
  reviewDecision?: ReviewStatusHovercardContextToReviewDecisionResolver<TParent>;
}

export interface ReviewStatusHovercardContextToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewStatusHovercardContextToOcticonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewStatusHovercardContextToReviewDecisionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSmimeSignatureTypeResolver<TParent = any> {
  email?: SmimeSignatureToEmailResolver<TParent>;
  isValid?: SmimeSignatureToIsValidResolver<TParent>;
  payload?: SmimeSignatureToPayloadResolver<TParent>;
  signature?: SmimeSignatureToSignatureResolver<TParent>;
  signer?: SmimeSignatureToSignerResolver<TParent>;
  state?: SmimeSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: SmimeSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface SmimeSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTagTypeResolver<TParent = any> {
  abbreviatedOid?: TagToAbbreviatedOidResolver<TParent>;
  commitResourcePath?: TagToCommitResourcePathResolver<TParent>;
  commitUrl?: TagToCommitUrlResolver<TParent>;
  id?: TagToIdResolver<TParent>;
  message?: TagToMessageResolver<TParent>;
  name?: TagToNameResolver<TParent>;
  oid?: TagToOidResolver<TParent>;
  repository?: TagToRepositoryResolver<TParent>;
  tagger?: TagToTaggerResolver<TParent>;
  target?: TagToTargetResolver<TParent>;
}

export interface TagToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToTaggerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUnknownSignatureTypeResolver<TParent = any> {
  email?: UnknownSignatureToEmailResolver<TParent>;
  isValid?: UnknownSignatureToIsValidResolver<TParent>;
  payload?: UnknownSignatureToPayloadResolver<TParent>;
  signature?: UnknownSignatureToSignatureResolver<TParent>;
  signer?: UnknownSignatureToSignerResolver<TParent>;
  state?: UnknownSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: UnknownSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface UnknownSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLViewerHovercardContextTypeResolver<TParent = any> {
  message?: ViewerHovercardContextToMessageResolver<TParent>;
  octicon?: ViewerHovercardContextToOcticonResolver<TParent>;
  viewer?: ViewerHovercardContextToViewerResolver<TParent>;
}

export interface ViewerHovercardContextToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ViewerHovercardContextToOcticonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ViewerHovercardContextToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
